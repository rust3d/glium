var searchIndex = {};
searchIndex['glium'] = {"items":[[0,"","glium","Easy-to-use, high-level, OpenGL3+ wrapper.",null,null],[3,"DrawParameters","","Represents the parameters to use when drawing.",null,null],[12,"depth_test","","The function that the GPU will use to determine whether to write over an existing pixel\non the target. Don't forget to set `depth_write` appropriately if you use a depth test.",0,null],[12,"depth_write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the\ndepth test.",0,null],[12,"depth_range","","The range of possible Z values in surface coordinates.",0,null],[12,"stencil_test_clockwise","","A comparaison against the existing value in the stencil buffer.",0,null],[12,"stencil_reference_value_clockwise","","Reference value that is used by `stencil_test_clockwise`, `stencil_fail_operation_clockwise`,\n`stencil_pass_depth_fail_operation_clockwise` and `stencil_depth_pass_operation_clockwise`.",0,null],[12,"stencil_write_mask_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",0,null],[12,"stencil_fail_operation_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",0,null],[12,"stencil_pass_depth_fail_operation_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails\nthe depth test.",0,null],[12,"stencil_depth_pass_operation_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",0,null],[12,"stencil_test_counter_clockwise","","A comparaison against the existing value in the stencil buffer.",0,null],[12,"stencil_reference_value_counter_clockwise","","Reference value that is used by `stencil_test_counter_clockwise`,\n`stencil_fail_operation_counter_clockwise`,\n`stencil_pass_depth_fail_operation_counter_clockwise` and\n`stencil_depth_pass_operation_counter_clockwise`.",0,null],[12,"stencil_write_mask_counter_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",0,null],[12,"stencil_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",0,null],[12,"stencil_pass_depth_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails\nthe depth test.",0,null],[12,"stencil_depth_pass_operation_counter_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",0,null],[12,"blending_function","","The function that the GPU will use to merge the existing pixel with the pixel that is\nbeing written.",0,null],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",0,null],[12,"point_size","","Diameter in pixels of the points to draw when drawing points.",0,null],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",0,null],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",0,null],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",0,null],[12,"dithering","","Whether dithering is activated. Default value is `true`.",0,null],[12,"viewport","","The viewport to use when drawing.",0,null],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",0,null],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default\nvalue is `true`.",0,null],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory.",null,null],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"LinearSyncFence","","Prototype for a `SyncFence`.",null,null],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished.",null,null],[3,"Version","","Describes a version.",null,null],[3,"Rect","","Area of a surface in pixels.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",1,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",1,null],[12,"width","","Width of the area in pixels.",1,null],[12,"height","","Height of the area in pixels.",1,null],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",2,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",2,null],[12,"width","","Width of the area in pixels. Can be negative.",2,null],[12,"height","","Height of the area in pixels. Can be negative.",2,null],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer.",null,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",3,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen\nbetween the source and the destination.",3,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen\nbetween the source and the destination.",3,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition\nbetween the source and the destination.",3,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",3,null],[12,"destination","","The factor to apply to the destination pixel.",3,null],[13,"Subtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the source by the destination.",3,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",3,null],[12,"destination","","The factor to apply to the destination pixel.",3,null],[13,"ReverseSubtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the destination by the source.",3,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",3,null],[12,"destination","","The factor to apply to the destination pixel.",3,null],[4,"LinearBlendingFactor","glium","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always\ngives `0.0`.",4,null],[13,"One","","Multiply the source or destination component by one, which always\ngives you the original value.",4,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value\nin the source.",4,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",4,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value\nin the destination.",4,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",4,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",4,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",4,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",4,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the\ndestination.",4,null],[4,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling\nis purely an optimization. If you don't know what this does, just use `CullingDisabled`.",null,null],[13,"CullingDisabled","","All triangles are always drawn.",5,null],[13,"CullCounterClockWise","","Triangles whose vertices are counterclockwise won't be drawn.",5,null],[13,"CullClockWise","","Triangles whose vertices are clockwise won't be drawn.",5,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel\non the target.",null,null],[13,"Ignore","","Never replace the target pixel.",6,null],[13,"Overwrite","","Always replace the target pixel.",6,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",6,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",6,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",6,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",6,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",6,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",6,null],[4,"PolygonMode","","Defines how the device should render polygons.",null,null],[13,"Point","","Only draw a single point at each vertex.",7,null],[13,"Line","","Only draw a line in the boundaries of each polygon.",7,null],[13,"Fill","","Fill the content of the polygon. This is the default mode.",7,null],[4,"StencilTest","","Specifies which comparaison the GPU will do to determine whether a sample passes the stencil\ntest.",null,null],[13,"AlwaysPass","","The stencil test always passes.",8,null],[13,"AlwaysFail","","The stencil test always fails.",8,null],[13,"IfLess","","Applies the mask as a bitfield to both the value currently in the stencil buffer and\nthe reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`), then compares them.",8,null],[12,"mask","glium::StencilTest","",8,null],[13,"IfLessOrEqual","glium","Applies the mask as a bitfield to both the value currently in the stencil buffer and\nthe reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`), then compares them.",8,null],[12,"mask","glium::StencilTest","",8,null],[13,"IfMore","glium","Applies the mask as a bitfield to both the value currently in the stencil buffer and\nthe reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`), then compares them.",8,null],[12,"mask","glium::StencilTest","",8,null],[13,"IfMoreOrEqual","glium","Applies the mask as a bitfield to both the value currently in the stencil buffer and\nthe reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`), then compares them.",8,null],[12,"mask","glium::StencilTest","",8,null],[13,"IfEqual","glium","Applies the mask as a bitfield to both the value currently in the stencil buffer and\nthe reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`), then compares them.",8,null],[12,"mask","glium::StencilTest","",8,null],[13,"IfNotEqual","glium","Applies the mask as a bitfield to both the value currently in the stencil buffer and\nthe reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`), then compares them.",8,null],[12,"mask","glium::StencilTest","",8,null],[4,"StencilOperation","glium","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",9,null],[13,"Zero","","Writes zero in the stencil buffer.",9,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`) in the stencil buffer.",9,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the\nmaximum, don't do anything.",9,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the\nmaximum, wrap to `0`.",9,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`,\ndon't do anything.",9,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`,\nwrap to `-1`.",9,null],[13,"Invert","","Inverts each bit of the value.",9,null],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`.",null,null],[13,"CompilationError","","Error while compiling one of the shaders.",10,null],[13,"LinkingError","","Error while linking the program.",10,null],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",10,null],[13,"CompilationNotSupported","","The OpenGL implementation doesn't provide a compiler.",10,null],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported\nby the backend.",10,null],[4,"Api","","Describes an OpenGL-related API.",null,null],[13,"Gl","","Regular OpenGL.",11,null],[13,"GlEs","","OpenGL embedded system.",11,null],[4,"Handle","","Handle to a shader or a program.",null,null],[13,"Id","","A numberic identifier.",12,null],[13,"Handle","","A `GLhandleARB`.",12,null],[4,"DrawError","","Error that can happen while drawing.",null,null],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",13,null],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the\nprogram requires.",13,null],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",13,null],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",13,null],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",13,null],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",13,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",13,null],[12,"expected","","The expected type.",13,null],[13,"UniformBufferToValue","glium","Tried to bind a uniform buffer to a single uniform value.",13,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",13,null],[13,"UniformValueToBlock","glium","Tried to bind a single uniform value to a uniform block.",13,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",13,null],[13,"UniformBlockLayoutMismatch","glium","The layout of the content of the uniform buffer does not match the layout of the block.",13,null],[12,"name","glium::DrawError","Name of the block you are trying to bind.",13,null],[13,"UnsupportedVerticesPerPatch","glium","The number of vertices per patch that has been requested is not supported.",13,null],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",13,null],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",13,null],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",13,null],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",13,null],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",13,null],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",13,null],[4,"GliumCreationError","","Error that can happen while creating a glium display.",null,null],[13,"GlutinCreationError","","An error has happened while creating the glutin window or headless renderer.",14,null],[13,"IncompatibleOpenGl","","The OpenGL implementation is too old.",14,null],[5,"get_supported_glsl_version","","Given an API version, this function returns the GLSL version that the implementation is\nrequired to support.",null,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[0,"backend","","The `backend` module allows one to link between glium and the OpenGL context..",null,null],[3,"Context","glium::backend","Stores the state and information required for glium to execute commands. Most public glium\nfunctions require passing a `Context`.",null,null],[12,"framebuffer_objects","","",15,null],[12,"vertex_array_objects","","",15,null],[12,"samplers","","",15,null],[0,"glutin_backend","","Backend implementation for the glutin library",null,null],[3,"GlutinFacade","glium::backend::glutin_backend","Facade implementation for glutin. Wraps both glium and glutin.",null,null],[3,"PollEventsIter","","Iterator for all the events received by the window.",null,null],[3,"WaitEventsIter","","Blocking iterator over all the events received by the window.",null,null],[3,"WinRef","","Borrow of the glutin window.",null,null],[3,"GlutinWindowBackend","","An implementation of the `Backend` trait for a glutin window.",null,null],[3,"GlutinHeadlessBackend","","An implementation of the `Backend` trait for a glutin headless context.",null,null],[11,"clone","","",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"glutinfacade"}}],[11,"get_context","","",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"rc"}}],[6,"Item","","",null,null],[11,"next","","",17,{"inputs":[{"name":"polleventsiter"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",18,{"inputs":[{"name":"waiteventsiter"}],"output":{"name":"option"}}],[6,"Target","","",null,null],[11,"deref","","",19,{"inputs":[{"name":"winref"}],"output":{"name":"window"}}],[11,"poll_events","","Reads all events received by the window.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"polleventsiter"}}],[11,"wait_events","","Reads all events received by the window.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"waiteventsiter"}}],[11,"is_closed","","Returns true if the window has been closed.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"bool"}}],[11,"get_window","","Returns the underlying window, or `None` if glium uses a headless context.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"option"}}],[11,"get_framebuffer_dimensions","","Returns the dimensions of the main framebuffer.",16,null],[11,"get_opengl_version","","Returns the OpenGL version of the current context.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"version"}}],[11,"get_supported_glsl_version","","Returns the supported GLSL version.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",16,{"inputs":[{"name":"glutinfacade"},{"name":"version"}],"output":{"name":"bool"}}],[11,"draw","","Start drawing on the backbuffer.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"frame"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",16,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",16,{"inputs":[{"name":"glutinfacade"}],"output":null}],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",16,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another\ncomponent needs to directly manipulate OpenGL state.",16,{"inputs":[{"name":"glutinfacade"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",16,{"inputs":[{"name":"glutinfacade"}],"output":null}],[11,"synchronize","","Waits until all the previous commands have finished being executed.",16,{"inputs":[{"name":"glutinfacade"}],"output":null}],[6,"Facade","","",null,null],[11,"build_glium","glutin::window","",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_glium_unchecked","","",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",20,{"inputs":[{"name":"windowbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[6,"Facade","glium::backend::glutin_backend","",null,null],[11,"build_glium","glutin::headless","",21,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_glium_unchecked","","",21,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",21,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[11,"swap_buffers","glium::backend::glutin_backend","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":null}],[11,"get_proc_address","","",22,null],[11,"get_framebuffer_dimensions","","",22,null],[11,"is_current","","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":null}],[11,"new","","Builds a new backend from the builder.",22,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"get_window","","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"window"}}],[11,"is_closed","","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"bool"}}],[11,"poll_events","","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",22,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"waiteventsiterator"}}],[11,"rebuild","","",22,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","","",23,{"inputs":[{"name":"glutinheadlessbackend"}],"output":null}],[11,"get_proc_address","","",23,null],[11,"get_framebuffer_dimensions","","",23,null],[11,"is_current","","",23,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",23,{"inputs":[{"name":"glutinheadlessbackend"}],"output":null}],[11,"new","","Builds a new backend from the builder.",23,{"inputs":[{"name":"glutinheadlessbackend"},{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[8,"Backend","glium::backend","Trait for types that can be used as a backend for a glium context.",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",24,{"inputs":[{"name":"backend"}],"output":null}],[10,"get_proc_address","","Returns the address of an OpenGL function.",24,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc.",24,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",24,{"inputs":[{"name":"backend"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",24,{"inputs":[{"name":"backend"}],"output":null}],[8,"Facade","","Trait for types that provide a safe access for glium functions.",null,null],[10,"get_context","","Returns an opaque type that contains the OpenGL state, extensions, version, etc.",25,{"inputs":[{"name":"facade"}],"output":{"name":"rc"}}],[11,"swap_buffers","alloc::rc","",26,{"inputs":[{"name":"rc"}],"output":null}],[11,"get_proc_address","","",26,null],[11,"get_framebuffer_dimensions","","",26,null],[11,"is_current","","",26,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_current","","",26,{"inputs":[{"name":"rc"}],"output":null}],[11,"get_context","","",26,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[0,"debug","glium","",null,null],[3,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue.",null,null],[4,"Severity","","Severity of a debug message.",null,null],[13,"Notification","","Anything that isn't an error or performance issue.",27,null],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",27,null],[13,"Medium","","Major performance warnings, shader compilation/linking warnings,\nor the use of deprecated functionality.",27,null],[13,"High","","All OpenGL Errors, shader compilation/linking errors,\nor highly-dangerous undefined behavior.",27,null],[4,"Source","","Source of a debug message.",null,null],[13,"Api","","Calls to the OpenGL API.",28,null],[13,"WindowSystem","","Calls to a window-system API.",28,null],[13,"ShaderCompiler","","A compiler for a shading language.",28,null],[13,"ThirdParty","","An application associated with Openctxt.gl.",28,null],[13,"Application","","Explicitly generated by Glium or the application.",28,null],[13,"OtherSource","","",28,null],[4,"MessageType","","Type of a debug message.",null,null],[13,"Error","","An error, typically from the API",29,null],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",29,null],[13,"UndefinedBehavior","","Something has invoked undefined behavior",29,null],[13,"Portability","","Some functionality the user relies upon is not portable",29,null],[13,"Performance","","Code has triggered possible performance issues",29,null],[13,"Marker","","Command stream annotation",29,null],[13,"PushGroup","","Entering a debug group",29,null],[13,"PopGroup","","Leaving a debug group",29,null],[13,"Other","","Any other event",29,null],[11,"eq","","",27,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"from_i64","","",27,{"inputs":[{"name":"severity"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",27,{"inputs":[{"name":"severity"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"severity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"severity"}],"output":{"name":"severity"}}],[11,"from_i64","","",28,{"inputs":[{"name":"source"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",28,{"inputs":[{"name":"source"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"source"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"source"}],"output":{"name":"source"}}],[11,"from_i64","","",29,{"inputs":[{"name":"messagetype"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",29,{"inputs":[{"name":"messagetype"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"messagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"messagetype"}],"output":{"name":"messagetype"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",30,{"inputs":[{"name":"timestampquery"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",30,{"inputs":[{"name":"timestampquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",30,{"inputs":[{"name":"timestampquery"}],"output":{"name":"u64"}}],[0,"framebuffer","glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.",null,null],[3,"SimpleFrameBuffer","glium::framebuffer","A framebuffer which has only one color attachment.",null,null],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment.",null,null],[4,"ColorAttachment","","Describes an attachment for a color buffer.",null,null],[13,"Texture1d","","A texture.",31,null],[13,"SrgbTexture1d","","A texture.",31,null],[13,"Texture2d","","A texture.",31,null],[13,"SrgbTexture2d","","A texture.",31,null],[13,"Texture2dMultisample","","A texture.",31,null],[13,"SrgbTexture2dMultisample","","A texture.",31,null],[13,"Texture3d","","A texture.",31,null],[13,"SrgbTexture3d","","A texture.",31,null],[13,"Texture1dArray","","A texture.",31,null],[13,"SrgbTexture1dArray","","A texture.",31,null],[13,"Texture2dArray","","A texture.",31,null],[13,"SrgbTexture2dArray","","A texture.",31,null],[13,"Texture2dMultisampleArray","","A texture.",31,null],[13,"SrgbTexture2dMultisampleArray","","A texture.",31,null],[13,"RenderBuffer","","A render buffer.",31,null],[4,"DepthAttachment","","Describes an attachment for a depth buffer.",null,null],[13,"Texture1d","","A texture.",32,null],[13,"Texture2d","","A texture.",32,null],[13,"Texture2dMultisample","","A texture.",32,null],[13,"Texture3d","","A texture.",32,null],[13,"Texture1dArray","","A texture.",32,null],[13,"Texture2dArray","","A texture.",32,null],[13,"Texture2dMultisampleArray","","A texture.",32,null],[13,"RenderBuffer","","A render buffer.",32,null],[4,"StencilAttachment","","Describes an attachment for a stencil buffer.",null,null],[13,"Texture1d","","A texture.",33,null],[13,"Texture2d","","A texture.",33,null],[13,"Texture2dMultisample","","A texture.",33,null],[13,"Texture3d","","A texture.",33,null],[13,"Texture1dArray","","A texture.",33,null],[13,"Texture2dArray","","A texture.",33,null],[13,"Texture2dMultisampleArray","","A texture.",33,null],[13,"RenderBuffer","","A render buffer.",33,null],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer.",null,null],[13,"Texture1d","","A texture.",34,null],[13,"Texture2d","","A texture.",34,null],[13,"Texture2dMultisample","","A texture.",34,null],[13,"Texture3d","","A texture.",34,null],[13,"Texture1dArray","","A texture.",34,null],[13,"Texture2dArray","","A texture.",34,null],[13,"Texture2dMultisampleArray","","A texture.",34,null],[13,"RenderBuffer","","A render buffer.",34,null],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments.",null,null],[10,"to_color_attachment","","Builds the `ColorAttachment`.",35,{"inputs":[{"name":"tocolorattachment"}],"output":{"name":"colorattachment"}}],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments.",null,null],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",36,{"inputs":[{"name":"todepthattachment"}],"output":{"name":"depthattachment"}}],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments.",null,null],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",37,{"inputs":[{"name":"tostencilattachment"}],"output":{"name":"stencilattachment"}}],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments.",null,null],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",38,{"inputs":[{"name":"todepthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[11,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"}],"output":{"name":"simpleframebuffer"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth\nbuffer, but no stencil buffer.",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"simpleframebuffer"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth\nbuffer, and a stencil buffer.",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"},{"name":"s"}],"output":{"name":"simpleframebuffer"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"s"}],"output":{"name":"simpleframebuffer"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"simpleframebuffer"}}],[11,"clear","","",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",39,null],[11,"get_depth_buffer_bits","","",39,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",39,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",39,{"inputs":[{"name":"simpleframebuffer"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",40,null],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",40,null],[11,"clear","","",40,{"inputs":[{"name":"multioutputframebuffer"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",40,null],[11,"get_depth_buffer_bits","","",40,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",40,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",40,{"inputs":[{"name":"multioutputframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",40,{"inputs":[{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",40,{"inputs":[{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",40,{"inputs":[{"name":"multioutputframebuffer"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",40,{"inputs":[{"name":"multioutputframebuffer"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"colorattachment"}],"output":{"name":"colorattachment"}}],[11,"clone","","",32,{"inputs":[{"name":"depthattachment"}],"output":{"name":"depthattachment"}}],[11,"clone","","",33,{"inputs":[{"name":"stencilattachment"}],"output":{"name":"stencilattachment"}}],[11,"clone","","",34,{"inputs":[{"name":"depthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[0,"index","glium","In order to draw, you need to provide a source of indices which is used to link the vertices\ntogether into *primitives*.",null,null],[3,"PointsList","glium::index","A list of points stored in RAM.",null,null],[3,"LinesList","","A list of lines stored in RAM.",null,null],[3,"LinesListAdjacency","","A list of lines, with adjacency information, stored in RAM.",null,null],[3,"LineStrip","","A list of lines connected together stored in RAM.",null,null],[3,"LineStripAdjacency","","A list of lines connected together, with adjacency information, stored in RAM.",null,null],[3,"TrianglesList","","A list of triangles stored in RAM.",null,null],[3,"TrianglesListAdjacency","","A list of triangles, with adjacency information, stored in RAM.",null,null],[3,"TriangleStrip","","A list of triangles connected together stored in RAM.",null,null],[3,"TriangleStripAdjacency","","A list of triangles connected together, with adjacency information, stored in RAM.",null,null],[3,"TriangleFan","","A list of triangles stored in RAM.",null,null],[3,"Patches","","A list of patches stored in RAM.",null,null],[3,"NoIndices","","Marker that can be used as an indices source when you don't need indices.",null,null],[4,"IndicesSource","","Describes a source of indices used for drawing.",null,null],[13,"IndexBuffer","","A buffer uploaded in video memory.",41,null],[12,"buffer","glium::index::IndicesSource","The buffer.",41,null],[12,"offset","","Offset of the first element of the buffer to use.",41,null],[12,"length","","Number of elements in the buffer to use.",41,null],[13,"Buffer","glium::index","A buffer in RAM.",41,null],[12,"pointer","glium::index::IndicesSource","Slice of data to use.",41,null],[12,"primitives","","Type of primitives contained in the buffer.",41,null],[12,"offset","","Offset of the first element of the buffer to use.",41,null],[12,"length","","Number of elements in the buffer to use.",41,null],[13,"NoIndices","glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in\nthe vertices source.",41,null],[12,"primitives","glium::index::IndicesSource","Type of primitives contained in the vertex source.",41,null],[4,"PrimitiveType","glium::index","List of available primitives.",null,null],[13,"Points","","",42,null],[13,"LinesList","","",42,null],[13,"LinesListAdjacency","","",42,null],[13,"LineStrip","","",42,null],[13,"LineStripAdjacency","","",42,null],[13,"TrianglesList","","",42,null],[13,"TrianglesListAdjacency","","",42,null],[13,"TriangleStrip","","",42,null],[13,"TriangleStripAdjacency","","",42,null],[13,"TriangleFan","","",42,null],[13,"Patches","","",42,null],[12,"vertices_per_patch","glium::index::PrimitiveType","Number of vertices per patch.",42,null],[4,"IndexType","glium::index","Type of the indices in an index source.",null,null],[13,"U8","","u8",43,null],[13,"U16","","u16",43,null],[13,"U32","","u32",43,null],[11,"fmt","glium","",44,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new index buffer.",44,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"indexbuffer"}}],[11,"from_raw","","Builds a new index buffer from raw data and a primitive type.",44,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"vec"},{"name":"primitivetype"}],"output":{"name":"indexbuffer"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",44,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",44,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",44,{"inputs":[{"name":"indexbuffer"},{"name":"range"}],"output":{"name":"option"}}],[11,"get_id","","",44,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"gluint"}}],[11,"to_indices_source","","",44,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"clone","glium::index","",45,{"inputs":[{"name":"pointslist"}],"output":{"name":"pointslist"}}],[11,"into_index_buffer","","",45,{"inputs":[{"name":"pointslist"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",45,{"inputs":[{"name":"pointslist"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",46,{"inputs":[{"name":"lineslist"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",46,{"inputs":[{"name":"lineslist"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",47,{"inputs":[{"name":"lineslistadjacency"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",47,{"inputs":[{"name":"lineslistadjacency"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",48,{"inputs":[{"name":"linestrip"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",48,{"inputs":[{"name":"linestrip"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",49,{"inputs":[{"name":"linestripadjacency"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",49,{"inputs":[{"name":"linestripadjacency"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",50,{"inputs":[{"name":"triangleslist"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",50,{"inputs":[{"name":"triangleslist"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",51,{"inputs":[{"name":"triangleslistadjacency"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",51,{"inputs":[{"name":"triangleslistadjacency"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",52,{"inputs":[{"name":"trianglestrip"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",52,{"inputs":[{"name":"trianglestrip"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",53,{"inputs":[{"name":"trianglestripadjacency"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",53,{"inputs":[{"name":"trianglestripadjacency"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",54,{"inputs":[{"name":"trianglefan"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",54,{"inputs":[{"name":"trianglefan"}],"output":{"name":"indicessource"}}],[11,"into_index_buffer","","",55,{"inputs":[{"name":"patches"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"to_indices_source","","",55,{"inputs":[{"name":"patches"}],"output":{"name":"indicessource"}}],[8,"ToIndicesSource","","Can be used as a source of indices when drawing.",null,null],[16,"Data","glium::index::ToIndicesSource","The type of data.",null,null],[10,"to_indices_source","glium::index","Builds the `IndicesSource`.",56,{"inputs":[{"name":"toindicessource"}],"output":{"name":"indicessource"}}],[8,"Index","","An index from the index buffer.",null,null],[10,"get_type","","Returns the `IndexType` corresponding to this type.",57,{"inputs":[{"name":"index"}],"output":{"name":"indextype"}}],[8,"IntoIndexBuffer","","Object that is convertible to an index buffer.",null,null],[10,"into_index_buffer","","Creates a new `IndexBuffer` with the list of indices.",58,{"inputs":[{"name":"intoindexbuffer"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"clone","","",41,{"inputs":[{"name":"indicessource"}],"output":{"name":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",41,{"inputs":[{"name":"indicessource"}],"output":{"name":"primitivetype"}}],[11,"eq","","",42,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",42,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"noindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"noindices"}],"output":{"name":"noindices"}}],[6,"Data","","",null,null],[11,"to_indices_source","","",59,{"inputs":[{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"eq","","",43,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"fmt","","",43,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",43,{"inputs":[{"name":"indextype"}],"output":{"name":"usize"}}],[0,"pixel_buffer","glium","Pixel buffers are buffers that contain two-dimensional texture data.",null,null],[3,"PixelBuffer","glium::pixel_buffer","Buffer that stores the content of a texture.",null,null],[11,"new_empty","","Builds a new buffer with an uninitialized content.",60,{"inputs":[{"name":"pixelbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"pixelbuffer"}}],[11,"get_size","","Returns the size of the buffer, in bytes.",60,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"usize"}}],[11,"read","","Copies the content of the pixel buffer to RAM.",60,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"t"}}],[11,"read_if_supported","","Copies the content of the pixel buffer to RAM.",60,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",60,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"gluint"}}],[0,"macros","glium","Defines useful macros for glium usage.",null,null],[0,"program","","",null,null],[3,"Uniform","glium::program","Information about a uniform (except its name).",null,null],[12,"location","","The location of the uniform.",61,null],[12,"ty","","Type of the uniform.",61,null],[12,"size","","If it is an array, the number of elements.",61,null],[3,"UniformBlock","","Information about a uniform block (except its name).",null,null],[12,"binding","","The binding point of the uniform.",62,null],[12,"size","","Size in bytes of the data in the block.",62,null],[12,"members","","List of elements in the block.",62,null],[3,"UniformBlockMember","","Information about a uniform inside a block.",null,null],[12,"name","","Name of the member.",63,null],[12,"offset","","Offset of the member in the block.",63,null],[12,"ty","","Type of the uniform.",63,null],[12,"size","","If it is an array, the number of elements.",63,null],[3,"Attribute","","Information about an attribute of a program (except its name).",null,null],[12,"location","","The index of the uniform.",64,null],[12,"ty","","Type of the attribute.",64,null],[12,"size","","Number of elements of the attribute.",64,null],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback.",null,null],[12,"name","","Name of the variable.",65,null],[12,"offset","","Number of bytes between the start of the first element and the start of this one.",65,null],[12,"size","","Size in bytes of this value.",65,null],[12,"ty","","Type of the value.",65,null],[3,"TransformFeedbackBuffer","","Describes the layout of a buffer that can receive transform feedback output.",null,null],[12,"id","","Slot of this buffer.",66,null],[12,"elements","","List of elements inside the buffer.",66,null],[12,"stride","","Size in bytes between two consecutive elements.",66,null],[3,"SourceCode","","Represents the source code of a program.",null,null],[12,"vertex_shader","","Source code of the vertex shader.",67,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",67,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",67,null],[12,"geometry_shader","","Source code of the optional geometry shader.",67,null],[12,"fragment_shader","","Source code of the fragment shader.",67,null],[3,"Binary","","Represents the compiled binary data of a program.",null,null],[12,"format","","An implementation-defined format.",68,null],[12,"content","","The binary data.",68,null],[4,"TransformFeedbackMode","","Type of transform feedback. Only used with the legacy interface.",null,null],[13,"Interleaved","","Each value is interleaved in the same buffer.",69,null],[13,"Separate","","Each value will go in a separate buffer.",69,null],[4,"ProgramCreationInput","","Input when creating a program.",null,null],[13,"SourceCode","","Use GLSL source code.",70,null],[12,"vertex_shader","glium::program::ProgramCreationInput","Source code of the vertex shader.",70,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",70,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",70,null],[12,"geometry_shader","","Source code of the optional geometry shader.",70,null],[12,"fragment_shader","","Source code of the fragment shader.",70,null],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",70,null],[13,"Binary","glium::program","Use a precompiled binary.",70,null],[12,"data","glium::program::ProgramCreationInput","The data.",70,null],[11,"fmt","glium","",10,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"programcreationerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"str"}}],[11,"cause","","",10,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"option"}}],[11,"new","","Builds a new program.",71,{"inputs":[{"name":"program"},{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",71,{"inputs":[{"name":"program"},{"name":"f"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",71,{"inputs":[{"name":"program"}],"output":{"name":"binary"}}],[11,"get_binary_if_supported","","Returns the program's compiled binary.",71,{"inputs":[{"name":"program"}],"output":{"name":"option"}}],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",71,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",71,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",71,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",71,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",71,null],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",71,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",71,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",71,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",71,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",71,{"inputs":[{"name":"program"}],"output":{"name":"handle"}}],[11,"drop","","",71,{"inputs":[{"name":"program"}],"output":null}],[11,"clone","glium::program","",61,{"inputs":[{"name":"uniform"}],"output":{"name":"uniform"}}],[11,"fmt","","",61,{"inputs":[{"name":"uniform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"uniformblock"}],"output":{"name":"uniformblock"}}],[11,"fmt","","",62,{"inputs":[{"name":"uniformblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"uniformblockmember"}],"output":{"name":"uniformblockmember"}}],[11,"fmt","","",63,{"inputs":[{"name":"uniformblockmember"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",64,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"transformfeedbackbuffer"}],"output":{"name":"transformfeedbackbuffer"}}],[11,"fmt","","",66,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"transformfeedbackvarying"}],"output":{"name":"transformfeedbackvarying"}}],[11,"fmt","","",65,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"transformfeedbackmode"}],"output":{"name":"transformfeedbackmode"}}],[11,"fmt","","",69,{"inputs":[{"name":"transformfeedbackmode"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"IntoProgramCreationInput","","Traits for objects that can be turned into `ProgramCreationInput`.",null,null],[10,"into_program_creation_input","","Builds the `ProgramCreationInput`.",72,{"inputs":[{"name":"intoprogramcreationinput"}],"output":{"name":"programcreationinput"}}],[11,"into_program_creation_input","","",70,{"inputs":[{"name":"programcreationinput"}],"output":{"name":"programcreationinput"}}],[11,"into_program_creation_input","","",67,{"inputs":[{"name":"sourcecode"}],"output":{"name":"programcreationinput"}}],[11,"into_program_creation_input","","",68,{"inputs":[{"name":"binary"}],"output":{"name":"programcreationinput"}}],[0,"render_buffer","glium","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"RenderBuffer","glium::render_buffer","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[11,"new","","Builds a new render buffer.",73,{"inputs":[{"name":"renderbuffer"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"renderbuffer"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",73,null],[11,"to_color_attachment","","",73,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"colorattachment"}}],[6,"Id","","",null,null],[11,"get_id","","",73,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"gluint"}}],[11,"new","","Builds a new render buffer.",74,{"inputs":[{"name":"depthrenderbuffer"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthrenderbuffer"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",74,null],[11,"to_depth_attachment","","",74,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"depthattachment"}}],[6,"Id","","",null,null],[11,"get_id","","",74,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"gluint"}}],[11,"new","","Builds a new render buffer.",75,{"inputs":[{"name":"stencilrenderbuffer"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stencilrenderbuffer"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",75,null],[11,"to_stencil_attachment","","",75,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"stencilattachment"}}],[6,"Id","","",null,null],[11,"get_id","","",75,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"gluint"}}],[11,"new","","Builds a new render buffer.",76,{"inputs":[{"name":"depthstencilrenderbuffer"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstencilrenderbuffer"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",76,null],[11,"to_depth_stencil_attachment","","",76,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"depthstencilattachment"}}],[6,"Id","","",null,null],[11,"get_id","","",76,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"gluint"}}],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to\ngive `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are \nhere to do that.",null,null],[3,"UniformBuffer","glium::uniforms","Buffer that contains a uniform block.",null,null],[3,"Sampler","","A sampler.",null,null],[3,"SamplerBehavior","","Behavior of a sampler.",null,null],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",77,null],[12,"minify_filter","","Filter to use when minifying the texture.",77,null],[12,"magnify_filter","","Filter to use when magnifying the texture.",77,null],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",77,null],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms.",null,null],[3,"UniformsStorage","","Stores uniforms.",null,null],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples.",null,null],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",78,null],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",78,null],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",78,null],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",79,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",79,null],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",80,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",80,null],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",80,null],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",80,null],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",80,null],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",80,null],[4,"UniformValue","","Represents a value to bind to a uniform.",null,null],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer\ncan be binded on a block with the given layout.\nThe last parameter is a sender which must be used to send a `SyncFence` that expires when\nthe buffer has finished being used.",81,null],[13,"SignedInt","","",81,null],[13,"UnsignedInt","","",81,null],[13,"Float","","",81,null],[13,"Mat2","","2x2 column-major matrix.",81,null],[13,"Mat3","","3x3 column-major matrix.",81,null],[13,"Mat4","","4x4 column-major matrix.",81,null],[13,"Vec2","","",81,null],[13,"Vec3","","",81,null],[13,"Vec4","","",81,null],[13,"Texture1d","","",81,null],[13,"CompressedTexture1d","","",81,null],[13,"SrgbTexture1d","","",81,null],[13,"CompressedSrgbTexture1d","","",81,null],[13,"IntegralTexture1d","","",81,null],[13,"UnsignedTexture1d","","",81,null],[13,"DepthTexture1d","","",81,null],[13,"Texture2d","","",81,null],[13,"CompressedTexture2d","","",81,null],[13,"SrgbTexture2d","","",81,null],[13,"CompressedSrgbTexture2d","","",81,null],[13,"IntegralTexture2d","","",81,null],[13,"UnsignedTexture2d","","",81,null],[13,"DepthTexture2d","","",81,null],[13,"Texture2dMultisample","","",81,null],[13,"SrgbTexture2dMultisample","","",81,null],[13,"IntegralTexture2dMultisample","","",81,null],[13,"UnsignedTexture2dMultisample","","",81,null],[13,"DepthTexture2dMultisample","","",81,null],[13,"Texture3d","","",81,null],[13,"CompressedTexture3d","","",81,null],[13,"SrgbTexture3d","","",81,null],[13,"CompressedSrgbTexture3d","","",81,null],[13,"IntegralTexture3d","","",81,null],[13,"UnsignedTexture3d","","",81,null],[13,"DepthTexture3d","","",81,null],[13,"Texture1dArray","","",81,null],[13,"CompressedTexture1dArray","","",81,null],[13,"SrgbTexture1dArray","","",81,null],[13,"CompressedSrgbTexture1dArray","","",81,null],[13,"IntegralTexture1dArray","","",81,null],[13,"UnsignedTexture1dArray","","",81,null],[13,"DepthTexture1dArray","","",81,null],[13,"Texture2dArray","","",81,null],[13,"CompressedTexture2dArray","","",81,null],[13,"SrgbTexture2dArray","","",81,null],[13,"CompressedSrgbTexture2dArray","","",81,null],[13,"IntegralTexture2dArray","","",81,null],[13,"UnsignedTexture2dArray","","",81,null],[13,"DepthTexture2dArray","","",81,null],[13,"Texture2dMultisampleArray","","",81,null],[13,"SrgbTexture2dMultisampleArray","","",81,null],[13,"IntegralTexture2dMultisampleArray","","",81,null],[13,"UnsignedTexture2dMultisampleArray","","",81,null],[13,"DepthTexture2dMultisampleArray","","",81,null],[4,"UniformType","","Type of a uniform in a program.",null,null],[13,"Float","","",82,null],[13,"FloatVec2","","",82,null],[13,"FloatVec3","","",82,null],[13,"FloatVec4","","",82,null],[13,"Double","","",82,null],[13,"DoubleVec2","","",82,null],[13,"DoubleVec3","","",82,null],[13,"DoubleVec4","","",82,null],[13,"Int","","",82,null],[13,"IntVec2","","",82,null],[13,"IntVec3","","",82,null],[13,"IntVec4","","",82,null],[13,"UnsignedInt","","",82,null],[13,"UnsignedIntVec2","","",82,null],[13,"UnsignedIntVec3","","",82,null],[13,"UnsignedIntVec4","","",82,null],[13,"Bool","","",82,null],[13,"BoolVec2","","",82,null],[13,"BoolVec3","","",82,null],[13,"BoolVec4","","",82,null],[13,"FloatMat2","","",82,null],[13,"FloatMat3","","",82,null],[13,"FloatMat4","","",82,null],[13,"FloatMat2x3","","",82,null],[13,"FloatMat2x4","","",82,null],[13,"FloatMat3x2","","",82,null],[13,"FloatMat3x4","","",82,null],[13,"FloatMat4x2","","",82,null],[13,"FloatMat4x3","","",82,null],[13,"DoubleMat2","","",82,null],[13,"DoubleMat3","","",82,null],[13,"DoubleMat4","","",82,null],[13,"DoubleMat2x3","","",82,null],[13,"DoubleMat2x4","","",82,null],[13,"DoubleMat3x2","","",82,null],[13,"DoubleMat3x4","","",82,null],[13,"DoubleMat4x2","","",82,null],[13,"DoubleMat4x3","","",82,null],[13,"Sampler1d","","",82,null],[13,"ISampler1d","","",82,null],[13,"USampler1d","","",82,null],[13,"Sampler2d","","",82,null],[13,"ISampler2d","","",82,null],[13,"USampler2d","","",82,null],[13,"Sampler3d","","",82,null],[13,"ISampler3d","","",82,null],[13,"USampler3d","","",82,null],[13,"Sampler1dArray","","",82,null],[13,"ISampler1dArray","","",82,null],[13,"USampler1dArray","","",82,null],[13,"Sampler2dArray","","",82,null],[13,"ISampler2dArray","","",82,null],[13,"USampler2dArray","","",82,null],[13,"SamplerCube","","",82,null],[13,"ISamplerCube","","",82,null],[13,"USamplerCube","","",82,null],[13,"Sampler2dRect","","",82,null],[13,"ISampler2dRect","","",82,null],[13,"USampler2dRect","","",82,null],[13,"Sampler2dRectShadow","","",82,null],[13,"SamplerCubeArray","","",82,null],[13,"ISamplerCubeArray","","",82,null],[13,"USamplerCubeArray","","",82,null],[13,"SamplerBuffer","","",82,null],[13,"ISamplerBuffer","","",82,null],[13,"USamplerBuffer","","",82,null],[13,"Sampler2dMultisample","","",82,null],[13,"ISampler2dMultisample","","",82,null],[13,"USampler2dMultisample","","",82,null],[13,"Sampler2dMultisampleArray","","",82,null],[13,"ISampler2dMultisampleArray","","",82,null],[13,"USampler2dMultisampleArray","","",82,null],[13,"Sampler1dShadow","","",82,null],[13,"Sampler2dShadow","","",82,null],[13,"SamplerCubeShadow","","",82,null],[13,"Sampler1dArrayShadow","","",82,null],[13,"Sampler2dArrayShadow","","",82,null],[13,"SamplerCubeArrayShadow","","",82,null],[13,"Image1d","","",82,null],[13,"IImage1d","","",82,null],[13,"UImage1d","","",82,null],[13,"Image2d","","",82,null],[13,"IImage2d","","",82,null],[13,"UImage2d","","",82,null],[13,"Image3d","","",82,null],[13,"IImage3d","","",82,null],[13,"UImage3d","","",82,null],[13,"Image2dRect","","",82,null],[13,"IImage2dRect","","",82,null],[13,"UImage2dRect","","",82,null],[13,"ImageCube","","",82,null],[13,"IImageCube","","",82,null],[13,"UImageCube","","",82,null],[13,"ImageBuffer","","",82,null],[13,"IImageBuffer","","",82,null],[13,"UImageBuffer","","",82,null],[13,"Image1dArray","","",82,null],[13,"IImage1dArray","","",82,null],[13,"UImage1dArray","","",82,null],[13,"Image2dArray","","",82,null],[13,"IImage2dArray","","",82,null],[13,"UImage2dArray","","",82,null],[13,"Image2dMultisample","","",82,null],[13,"IImage2dMultisample","","",82,null],[13,"UImage2dMultisample","","",82,null],[13,"Image2dMultisampleArray","","",82,null],[13,"IImage2dMultisampleArray","","",82,null],[13,"UImage2dMultisampleArray","","",82,null],[13,"AtomicCounterUint","","",82,null],[11,"fmt","","",83,{"inputs":[{"name":"uniformbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Uploads data in the uniforms buffer.",83,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"uniformbuffer"}}],[11,"new_if_supported","","Uploads data in the uniforms buffer.",83,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"new_persistent","","Builds a new uniform buffer with persistent mapping.",83,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"uniformbuffer"}}],[11,"new_persistent_if_supported","","Builds a new uniform buffer with persistent mapping, or `None` if this is not supported.",83,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"upload","","Modifies the content of the buffer.",83,{"inputs":[{"name":"uniformbuffer"},{"name":"t"}],"output":null}],[11,"map","","Maps the buffer to allow write access to it.",83,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"mapping"}}],[11,"read","","Reads the content of the buffer.",83,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"t"}}],[11,"read_if_supported","","Reads the content of the buffer.",83,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"option"}}],[11,"get_id","","",83,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"gluint"}}],[11,"eq","","",78,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"samplerwrapfunction"}],"output":{"name":"samplerwrapfunction"}}],[11,"fmt","","",78,{"inputs":[{"name":"samplerwrapfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"magnifysamplerfilter"}],"output":{"name":"magnifysamplerfilter"}}],[11,"fmt","","",79,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"inputs":[{"name":"minifysamplerfilter"}],"output":{"name":"minifysamplerfilter"}}],[11,"fmt","","",80,{"inputs":[{"name":"minifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Sampler` with default parameters.",84,{"inputs":[{"name":"sampler"},{"name":"t"}],"output":{"name":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",84,{"inputs":[{"name":"sampler"},{"name":"samplerwrapfunction"}],"output":{"name":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",84,{"inputs":[{"name":"sampler"},{"name":"minifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",84,{"inputs":[{"name":"sampler"},{"name":"magnifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",84,{"inputs":[{"name":"sampler"},{"name":"u16"}],"output":{"name":"sampler"}}],[11,"eq","","",77,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"fmt","","",77,{"inputs":[{"name":"samplerbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",77,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"clone","","",85,{"inputs":[{"name":"emptyuniforms"}],"output":{"name":"emptyuniforms"}}],[11,"fmt","","",85,{"inputs":[{"name":"emptyuniforms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_values","","",85,{"inputs":[{"name":"emptyuniforms"},{"name":"f"}],"output":null}],[11,"new","","Builds a new storage with a value.",86,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"t"}],"output":{"name":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",86,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"t"}],"output":{"name":"uniformsstorage"}}],[11,"eq","","",82,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"uniformtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"uniformtype"}],"output":{"name":"uniformtype"}}],[11,"clone","","",81,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",81,{"inputs":[{"name":"uniformvalue"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"into_uniform_value","nalgebra::structs::mat","",87,{"inputs":[{"name":"mat2"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",88,{"inputs":[{"name":"mat3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",89,{"inputs":[{"name":"mat4"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::ortho","",90,{"inputs":[{"name":"ortho3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",91,{"inputs":[{"name":"orthomat3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::persp","",92,{"inputs":[{"name":"persp3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",93,{"inputs":[{"name":"perspmat3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::pnt","",94,{"inputs":[{"name":"pnt2"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",95,{"inputs":[{"name":"pnt3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",96,{"inputs":[{"name":"pnt4"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::quat","",97,{"inputs":[{"name":"quat"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::rot","",98,{"inputs":[{"name":"rot2"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",99,{"inputs":[{"name":"rot3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",100,{"inputs":[{"name":"rot4"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::quat","",101,{"inputs":[{"name":"unitquat"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","nalgebra::structs::vec","",102,{"inputs":[{"name":"vec2"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",103,{"inputs":[{"name":"vec3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",104,{"inputs":[{"name":"vec4"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","cgmath::matrix","",105,{"inputs":[{"name":"matrix2"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",106,{"inputs":[{"name":"matrix3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",107,{"inputs":[{"name":"matrix4"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","cgmath::vector","",108,{"inputs":[{"name":"vector2"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",109,{"inputs":[{"name":"vector3"}],"output":{"name":"uniformvalue"}}],[11,"into_uniform_value","","",110,{"inputs":[{"name":"vector4"}],"output":{"name":"uniformvalue"}}],[8,"IntoUniformValue","glium::uniforms","Represents a value that can be used as the value of a uniform.",null,null],[10,"into_uniform_value","","Builds a `UniformValue`.",111,{"inputs":[{"name":"intouniformvalue"}],"output":{"name":"uniformvalue"}}],[8,"Uniforms","","Object that contains the values of all the uniforms to bind to a program.",null,null],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",112,{"inputs":[{"name":"uniforms"},{"name":"f"}],"output":null}],[8,"UniformBlock","","Objects that are suitable for being binded to a uniform block.",null,null],[10,"matches","","Checks whether the uniforms' layout matches the given block.",113,{"inputs":[{"name":"uniformblock"},{"name":"uniformblock"}],"output":{"name":"bool"}}],[0,"vertex","glium","Contains everything related to vertex buffers.",null,null],[3,"VertexBufferAny","glium::vertex","A list of vertices loaded in the graphics card's memory.",null,null],[3,"Mapping","","A mapping of a buffer.",null,null],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`.",null,null],[3,"VertexBufferAnySlice","","Represents a slice of a `VertexBufferAny`.",null,null],[3,"PerInstance","","Marker that instructs glium that the buffer is to be used per instance.",null,null],[4,"AttributeType","","",null,null],[13,"I8","","",114,null],[13,"I8I8","","",114,null],[13,"I8I8I8","","",114,null],[13,"I8I8I8I8","","",114,null],[13,"U8","","",114,null],[13,"U8U8","","",114,null],[13,"U8U8U8","","",114,null],[13,"U8U8U8U8","","",114,null],[13,"I16","","",114,null],[13,"I16I16","","",114,null],[13,"I16I16I16","","",114,null],[13,"I16I16I16I16","","",114,null],[13,"U16","","",114,null],[13,"U16U16","","",114,null],[13,"U16U16U16","","",114,null],[13,"U16U16U16U16","","",114,null],[13,"I32","","",114,null],[13,"I32I32","","",114,null],[13,"I32I32I32","","",114,null],[13,"I32I32I32I32","","",114,null],[13,"U32","","",114,null],[13,"U32U32","","",114,null],[13,"U32U32U32","","",114,null],[13,"U32U32U32U32","","",114,null],[13,"F32","","",114,null],[13,"F32F32","","",114,null],[13,"F32F32F32","","",114,null],[13,"F32F32F32F32","","",114,null],[13,"F32x2x2","","2x2 matrix of `f32`s",114,null],[13,"F32x2x3","","2x3 matrix of `f32`s",114,null],[13,"F32x2x4","","2x3 matrix of `f32`s",114,null],[13,"F32x3x2","","3x2 matrix of `f32`s",114,null],[13,"F32x3x3","","3x3 matrix of `f32`s",114,null],[13,"F32x3x4","","3x4 matrix of `f32`s",114,null],[13,"F32x4x2","","4x2 matrix of `f32`s",114,null],[13,"F32x4x3","","4x3 matrix of `f32`s",114,null],[13,"F32x4x4","","4x4 matrix of `f32`s",114,null],[13,"F64","","Warning: using `f64`s can be very slow.",114,null],[13,"F64F64","","Warning: using `f64`s can be very slow.",114,null],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",114,null],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",114,null],[13,"F64x2x2","","2x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x2x3","","2x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x2x4","","2x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x3x2","","3x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x3x3","","3x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x3x4","","3x4 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x4x2","","4x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x4x3","","4x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[13,"F64x4x4","","4x4 matrix of `f64`s\nWarning: using `f64`s can be very slow.",114,null],[4,"VerticesSource","","Describes the source to use for the vertices when drawing.",null,null],[13,"VertexBuffer","","A buffer uploaded in the video memory.",115,null],[11,"fmt","glium","",116,{"inputs":[{"name":"vertexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new vertex buffer.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"d"}],"output":{"name":"vertexbuffer"}}],[11,"new_dynamic","","Builds a new vertex buffer.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"vec"}],"output":{"name":"vertexbuffer"}}],[11,"new_persistent","","Builds a new vertex buffer with persistent mapping.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"vec"}],"output":{"name":"vertexbuffer"}}],[11,"new_persistent_if_supported","","Builds a new vertex buffer with persistent mapping, or `None` if this is not supported.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"empty","","Builds an empty vertex buffer.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"vertexbuffer"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"vec"},{"name":"vertexformat"},{"name":"usize"}],"output":{"name":"vertexbuffer"}}],[11,"slice","","Accesses a slice of the buffer.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"range"}],"output":{"name":"option"}}],[11,"map","","Maps the buffer to allow write access to it.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"mapping"}}],[11,"read","","Reads the content of the buffer.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vec"}}],[11,"read_if_supported","","Reads the content of the buffer.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"option"}}],[11,"write","","Replaces the content of the buffer.",116,{"inputs":[{"name":"vertexbuffer"},{"name":"vec"}],"output":null}],[11,"is_persistent","","Returns true if the buffer is mapped in a permanent way in memory.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"bool"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexformat"}}],[11,"into_vertex_buffer_any","","Discard the type information and turn the vertex buffer into a `VertexBufferAny`.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"len","","Returns the number of elements in the buffer.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"usize"}}],[11,"per_instance_if_supported","","Creates a marker that instructs glium to use multiple instances.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"option"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"perinstance"}}],[11,"get_id","","",116,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"gluint"}}],[11,"read","glium::vertex","Reads the content of the slice.",117,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"vec"}}],[11,"read_if_supported","","Reads the content of the buffer.",117,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"option"}}],[11,"write","","Writes some vertices to the buffer.",117,{"inputs":[{"name":"vertexbufferslice"},{"name":"vec"}],"output":null}],[11,"into_vertices_source","","",117,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"verticessource"}}],[11,"fmt","","",118,{"inputs":[{"name":"vertexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",118,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",118,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",118,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"vertexformat"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",118,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"vertexbuffer"}}],[11,"slice","","Accesses a slice of the buffer.",118,{"inputs":[{"name":"vertexbufferany"},{"name":"range"}],"output":{"name":"option"}}],[11,"get_id","","",118,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"gluint"}}],[11,"into_vertices_source","","",119,{"inputs":[{"name":"vertexbufferanyslice"}],"output":{"name":"verticessource"}}],[11,"deref","","",120,null],[11,"deref_mut","","",120,null],[11,"eq","","",114,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"get_num_components","","Returns the number of values for this type.",114,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[8,"IntoVerticesSource","","Objects that can be used as vertex sources.",null,null],[10,"into_vertices_source","","Builds the `VerticesSource`.",121,{"inputs":[{"name":"intoverticessource"}],"output":{"name":"verticessource"}}],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources.",null,null],[16,"Iterator","glium::vertex::MultiVerticesSource","Iterator that enumerates each source.",null,null],[10,"iter","glium::vertex","Iterates over the `VerticesSource`.",122,{"inputs":[{"name":"multiverticessource"}],"output":{"name":"iterator"}}],[8,"Vertex","","Trait for structures that represent a vertex.",null,null],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",123,{"inputs":[{"name":"vertex"}],"output":{"name":"vertexformat"}}],[8,"Attribute","","Trait for types that can be used as vertex attributes.",null,null],[10,"get_type","","Get the type of data.",124,{"inputs":[{"name":"attribute"}],"output":{"name":"attributetype"}}],[11,"clone","","",115,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",115,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",125,{"inputs":[{"name":"perinstance"}],"output":{"name":"verticessource"}}],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[0,"texture","glium","A texture is an image loaded in video memory, which can be sampled in your shaders.",null,null],[3,"Texture1d","glium::texture","A one-dimensional texture  containing floating-point data.",null,null],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`.",null,null],[3,"CompressedTexture1d","","A compressed one-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`.",null,null],[3,"SrgbTexture1d","","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dMipmap","","Represents a single mipmap level of a `SrgbTexture1d`.",null,null],[3,"CompressedSrgbTexture1d","","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1d`.",null,null],[3,"IntegralTexture1d","","A one-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`.",null,null],[3,"UnsignedTexture1d","","A one-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`.",null,null],[3,"DepthTexture1d","","A one-dimensional texture  containing depth data.",null,null],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`.",null,null],[3,"StencilTexture1d","","A one-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`.",null,null],[3,"DepthStencilTexture1d","","A one-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`.",null,null],[3,"Texture2d","","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`.",null,null],[3,"CompressedTexture2d","","A compressed two-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`.",null,null],[3,"SrgbTexture2d","","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMipmap","","Represents a single mipmap level of a `SrgbTexture2d`.",null,null],[3,"CompressedSrgbTexture2d","","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2d`.",null,null],[3,"IntegralTexture2d","","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`.",null,null],[3,"UnsignedTexture2d","","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`.",null,null],[3,"DepthTexture2d","","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`.",null,null],[3,"StencilTexture2d","","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`.",null,null],[3,"DepthStencilTexture2d","","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`.",null,null],[3,"Texture2dMultisample","","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`.",null,null],[3,"IntegralTexture2dMultisample","","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`.",null,null],[3,"SrgbTexture2dMultisample","","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisample`.",null,null],[3,"UnsignedTexture2dMultisample","","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`.",null,null],[3,"DepthTexture2dMultisample","","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`.",null,null],[3,"StencilTexture2dMultisample","","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`.",null,null],[3,"DepthStencilTexture2dMultisample","","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`.",null,null],[3,"Texture3d","","A three-dimensional texture  containing floating-point data.",null,null],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`.",null,null],[3,"CompressedTexture3d","","A compressed three-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`.",null,null],[3,"SrgbTexture3d","","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture3dMipmap","","Represents a single mipmap level of a `SrgbTexture3d`.",null,null],[3,"CompressedSrgbTexture3d","","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture3dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture3d`.",null,null],[3,"IntegralTexture3d","","A three-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`.",null,null],[3,"UnsignedTexture3d","","A three-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`.",null,null],[3,"DepthTexture3d","","A three-dimensional texture  containing depth data.",null,null],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`.",null,null],[3,"StencilTexture3d","","A three-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture3dMipmap","","Represents a single mipmap level of a `StencilTexture3d`.",null,null],[3,"DepthStencilTexture3d","","A three-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`.",null,null],[3,"Texture1dArray","","An array of one-dimensional textures  containing floating-point data.",null,null],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`.",null,null],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`.",null,null],[3,"CompressedTexture1dArray","","An array of compressed one-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`.",null,null],[3,"SrgbTexture1dArray","","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dArrayLayer","","Represents a single layer of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArray","","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[3,"IntegralTexture1dArray","","An array of one-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`.",null,null],[3,"UnsignedTexture1dArray","","An array of one-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`.",null,null],[3,"DepthTexture1dArray","","An array of one-dimensional textures  containing depth data.",null,null],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`.",null,null],[3,"StencilTexture1dArray","","An array of one-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArray","","An array of one-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`.",null,null],[3,"Texture2dArray","","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`.",null,null],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`.",null,null],[3,"CompressedTexture2dArray","","An array of compressed two-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`.",null,null],[3,"SrgbTexture2dArray","","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dArrayLayer","","Represents a single layer of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArray","","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[3,"IntegralTexture2dArray","","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`.",null,null],[3,"UnsignedTexture2dArray","","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`.",null,null],[3,"DepthTexture2dArray","","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`.",null,null],[3,"StencilTexture2dArray","","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArray","","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`.",null,null],[3,"Texture2dMultisampleArray","","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `Texture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArray","","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArray","","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArray","","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArray","","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArray","","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArray","","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"RawImage1d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",126,null],[12,"width","","Number of pixels per column.",126,null],[12,"format","","Formats of the pixels.",126,null],[3,"RawImage2d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",127,null],[12,"width","","Number of pixels per column.",127,null],[12,"height","","Number of pixels per row.",127,null],[12,"format","","Formats of the pixels.",127,null],[3,"RawImage3d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",128,null],[12,"width","","Number of pixels per column.",128,null],[12,"height","","Number of pixels per row.",128,null],[12,"depth","","Number of pixels per depth.",128,null],[12,"format","","Formats of the pixels.",128,null],[3,"TextureSurface","","Struct that allows you to draw on a texture.",null,null],[4,"ClientFormat","","List of client-side pixel formats.",null,null],[13,"U8","","",129,null],[13,"U8U8","","",129,null],[13,"U8U8U8","","",129,null],[13,"U8U8U8U8","","",129,null],[13,"I8","","",129,null],[13,"I8I8","","",129,null],[13,"I8I8I8","","",129,null],[13,"I8I8I8I8","","",129,null],[13,"U16","","",129,null],[13,"U16U16","","",129,null],[13,"U16U16U16","","",129,null],[13,"U16U16U16U16","","",129,null],[13,"I16","","",129,null],[13,"I16I16","","",129,null],[13,"I16I16I16","","",129,null],[13,"I16I16I16I16","","",129,null],[13,"U32","","",129,null],[13,"U32U32","","",129,null],[13,"U32U32U32","","",129,null],[13,"U32U32U32U32","","",129,null],[13,"I32","","",129,null],[13,"I32I32","","",129,null],[13,"I32I32I32","","",129,null],[13,"I32I32I32I32","","",129,null],[13,"U3U3U2","","",129,null],[13,"U5U6U5","","",129,null],[13,"U4U4U4U4","","",129,null],[13,"U5U5U5U1","","",129,null],[13,"U10U10U10U2","","",129,null],[13,"F16","","",129,null],[13,"F16F16","","",129,null],[13,"F16F16F16","","",129,null],[13,"F16F16F16F16","","",129,null],[13,"F32","","",129,null],[13,"F32F32","","",129,null],[13,"F32F32F32","","",129,null],[13,"F32F32F32F32","","",129,null],[4,"TextureFormat","","Format of the internal representation of a texture.",null,null],[13,"UncompressedFloat","","",130,null],[13,"UncompressedIntegral","","",130,null],[13,"UncompressedUnsigned","","",130,null],[13,"Srgb","","",130,null],[13,"CompressedFormat","","",130,null],[13,"CompressedSrgbFormat","","",130,null],[13,"DepthFormat","","",130,null],[13,"StencilFormat","","",130,null],[13,"DepthStencilFormat","","",130,null],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data.",null,null],[13,"U8","","",131,null],[13,"I8","","",131,null],[13,"U16","","",131,null],[13,"I16","","",131,null],[13,"U8U8","","",131,null],[13,"I8I8","","",131,null],[13,"U16U16","","",131,null],[13,"I16I16","","",131,null],[13,"U3U32U","","",131,null],[13,"U4U4U4","","",131,null],[13,"U5U5U5","","",131,null],[13,"U8U8U8","","",131,null],[13,"I8I8I8","","",131,null],[13,"U10U10U10","","",131,null],[13,"U12U12U12","","",131,null],[13,"I16I16I16","","",131,null],[13,"U2U2U2U2","","",131,null],[13,"U4U4U4U4","","",131,null],[13,"U5U5U5U1","","",131,null],[13,"U8U8U8U8","","",131,null],[13,"I8I8I8I8","","",131,null],[13,"U10U10U10U2","","",131,null],[13,"U12U12U12U12","","",131,null],[13,"U16U16U16U16","","",131,null],[13,"F16","","",131,null],[13,"F16F16","","",131,null],[13,"F16F16F16","","",131,null],[13,"F16F16F16F16","","",131,null],[13,"F32","","",131,null],[13,"F32F32","","",131,null],[13,"F32F32F32","","",131,null],[13,"F32F32F32F32","","",131,null],[13,"F11F11F10","","",131,null],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",131,null],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data.",null,null],[13,"I8","","",132,null],[13,"I16","","",132,null],[13,"I32","","",132,null],[13,"I8I8","","",132,null],[13,"I16I16","","",132,null],[13,"I32I32","","",132,null],[13,"I8I8I8","","",132,null],[13,"I16I16I16","","May not be supported by renderbuffers.",132,null],[13,"I32I32I32","","May not be supported by renderbuffers.",132,null],[13,"I8I8I8I8","","May not be supported by renderbuffers.",132,null],[13,"I16I16I16I16","","",132,null],[13,"I32I32I32I32","","",132,null],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data.",null,null],[13,"U8","","",133,null],[13,"U16","","",133,null],[13,"U32","","",133,null],[13,"U8U8","","",133,null],[13,"U16U16","","",133,null],[13,"U32U32","","",133,null],[13,"U8U8U8","","",133,null],[13,"U16U16U16","","May not be supported by renderbuffers.",133,null],[13,"U32U32U32","","May not be supported by renderbuffers.",133,null],[13,"U8U8U8U8","","May not be supported by renderbuffers.",133,null],[13,"U16U16U16U16","","",133,null],[13,"U32U32U32U32","","",133,null],[13,"U10U10U10U2","","",133,null],[4,"CompressedFormat","","List of compressed texture formats.",null,null],[13,"RGTCFormatU","","Red/green compressed texture with one unsigned component.",134,null],[13,"RGTCFormatI","","Red/green compressed texture with one signed component.",134,null],[13,"RGTCFormatUU","","Red/green compressed texture with two unsigned components.",134,null],[13,"RGTCFormatII","","Red/green compressed texture with two signed components.",134,null],[4,"DepthFormat","","List of formats available for depth textures.",null,null],[13,"I16","","",135,null],[13,"I24","","",135,null],[13,"I32","","May not be supported by all hardware.",135,null],[13,"F32","","",135,null],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures.",null,null],[13,"I24I8","","",136,null],[13,"F32I8","","",136,null],[4,"StencilFormat","","List of formats available for stencil textures.",null,null],[13,"I1","","",137,null],[13,"I4","","",137,null],[13,"I8","","",137,null],[13,"I16","","",137,null],[4,"CompressedSrgbFormat","","List of compressed pixel formats in the sRGB color space.",null,null],[4,"SrgbFormat","","List of uncompressed pixel formats that contain floating-point data in the sRGB color space.",null,null],[13,"U8U8U8","","",138,null],[13,"U8U8U8U8","","",138,null],[4,"TextureCreationError","","Error that can happen when creating a texture.",null,null],[13,"UnsupportedFormat","","The requested format is not supported by the backend.",139,null],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",139,null],[4,"TextureMaybeSupportedCreationError","","Error that can happen when creating a texture which we don't know whether it is supported.",null,null],[13,"CreationError","","The texture type is supported, but a `TextureCreationError` happened.",140,null],[13,"NotSupported","","The texture type is not supported by the backend.",140,null],[11,"get_format","image::color","",141,{"inputs":[{"name":"rgb"}],"output":{"name":"clientformat"}}],[11,"get_format","","",142,{"inputs":[{"name":"rgba"}],"output":{"name":"clientformat"}}],[11,"get_format","","",143,{"inputs":[{"name":"luma"}],"output":{"name":"clientformat"}}],[11,"get_format","","",143,{"inputs":[{"name":"luma"}],"output":{"name":"clientformat"}}],[11,"get_format","","",143,{"inputs":[{"name":"luma"}],"output":{"name":"clientformat"}}],[11,"get_format","","",144,{"inputs":[{"name":"lumaa"}],"output":{"name":"clientformat"}}],[11,"get_format","","",144,{"inputs":[{"name":"lumaa"}],"output":{"name":"clientformat"}}],[11,"get_format","","",144,{"inputs":[{"name":"lumaa"}],"output":{"name":"clientformat"}}],[8,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel.",null,null],[10,"get_format","","Returns corresponding client format.",145,{"inputs":[{"name":"pixelvalue"}],"output":{"name":"clientformat"}}],[8,"Texture","","Trait that describes a texture.",null,null],[10,"get_width","","Returns the width in pixels of the texture.",146,{"inputs":[{"name":"texture"}],"output":{"name":"u32"}}],[10,"get_height","","Returns the height in pixels of the texture, or `None` for one dimensional textures.",146,{"inputs":[{"name":"texture"}],"output":{"name":"option"}}],[10,"get_depth","","Returns the depth in pixels of the texture, or `None` for one or two dimensional textures.",146,{"inputs":[{"name":"texture"}],"output":{"name":"option"}}],[10,"get_array_size","","Returns the number of textures in the array, or `None` for non-arrays.",146,{"inputs":[{"name":"texture"}],"output":{"name":"option"}}],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","glium::texture::Texture1dDataSource","The type of each pixel.",null,null],[10,"into_raw","glium::texture","Returns the raw representation of the data.",147,{"inputs":[{"name":"texture1ddatasource"}],"output":{"name":"rawimage1d"}}],[8,"Texture1dDataSink","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","glium::texture::Texture1dDataSink","The type of each pixel.",null,null],[10,"get_preferred_formats","glium::texture","Returns the list of accepted formats.",148,{"inputs":[{"name":"texture1ddatasink"}],"output":{"name":"vec"}}],[10,"from_raw","","Builds a new object from raw data.",148,{"inputs":[{"name":"texture1ddatasink"},{"name":"rawimage1d"}],"output":{"name":"self"}}],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","glium::texture::Texture2dDataSource","The type of each pixel.",null,null],[10,"into_raw","glium::texture","Returns the raw representation of the data.",149,{"inputs":[{"name":"texture2ddatasource"}],"output":{"name":"rawimage2d"}}],[8,"Texture2dDataSink","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","glium::texture::Texture2dDataSink","The type of each pixel.",null,null],[10,"get_preferred_formats","glium::texture","Returns the list of accepted formats.",150,{"inputs":[{"name":"texture2ddatasink"}],"output":{"name":"vec"}}],[10,"from_raw","","Builds a new object from raw data.",150,{"inputs":[{"name":"texture2ddatasink"},{"name":"rawimage2d"}],"output":{"name":"self"}}],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","glium::texture::Texture3dDataSource","The type of each pixel.",null,null],[10,"into_raw","glium::texture","Returns the raw representation of the data.",151,{"inputs":[{"name":"texture3ddatasource"}],"output":{"name":"rawimage3d"}}],[8,"Texture3dDataSink","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","glium::texture::Texture3dDataSink","The type of each pixel.",null,null],[10,"get_preferred_formats","glium::texture","Returns the list of accepted formats.",152,{"inputs":[{"name":"texture3ddatasink"}],"output":{"name":"vec"}}],[10,"from_raw","","Builds a new object from raw data.",152,{"inputs":[{"name":"texture3ddatasink"},{"name":"rawimage3d"}],"output":{"name":"self"}}],[11,"get_width","","",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",153,{"inputs":[{"name":"texture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"texture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"texture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"}],"output":{"name":"texture1d"}}],[11,"empty","","Creates an empty texture.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"texture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"texture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",153,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",153,{"inputs":[{"name":"texture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",153,{"inputs":[{"name":"texture1d"}],"output":{"name":"texture1dmipmap"}}],[11,"clone","","",154,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",154,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1d"}}],[11,"get_level","","Returns the layer index.",154,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"compressedtexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"compressedtexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",155,{"inputs":[{"name":"compressedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",155,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"clone","","",156,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",156,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1d"}}],[11,"get_level","","Returns the layer index.",156,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"srgbtexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"srgbtexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"}],"output":{"name":"srgbtexture1d"}}],[11,"empty","","Creates an empty texture.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"srgbtexture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"srgbtexture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",157,{"inputs":[{"name":"srgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",157,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"clone","","",158,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",158,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1d"}}],[11,"get_level","","Returns the layer index.",158,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",159,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",159,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",160,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",160,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the layer index.",160,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",161,{"inputs":[{"name":"integraltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"integraltexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"integraltexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"}],"output":{"name":"integraltexture1d"}}],[11,"empty","","Creates an empty texture.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"integraltexture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"integraltexture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",161,{"inputs":[{"name":"integraltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",161,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"clone","","",162,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",162,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1d"}}],[11,"get_level","","Returns the layer index.",162,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"unsignedtexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"unsignedtexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"}],"output":{"name":"unsignedtexture1d"}}],[11,"empty","","Creates an empty texture.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"unsignedtexture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"unsignedtexture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",163,{"inputs":[{"name":"unsignedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",163,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"clone","","",164,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",164,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1d"}}],[11,"get_level","","Returns the layer index.",164,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",165,{"inputs":[{"name":"depthtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"depthtexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"depthtexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"u32"}],"output":{"name":"depthtexture1d"}}],[11,"empty","","Creates an empty texture.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"depthtexture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"depthtexture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",165,{"inputs":[{"name":"depthtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",165,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"clone","","",166,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",166,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1d"}}],[11,"get_level","","Returns the layer index.",166,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"stenciltexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"stenciltexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"}],"output":{"name":"stenciltexture1d"}}],[11,"empty","","Creates an empty texture.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"stenciltexture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"stenciltexture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",167,{"inputs":[{"name":"stenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",167,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"clone","","",168,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",168,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1d"}}],[11,"get_level","","Returns the layer index.",168,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"depthstenciltexture1d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"depthstenciltexture1d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"}],"output":{"name":"depthstenciltexture1d"}}],[11,"empty","","Creates an empty texture.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"depthstenciltexture1d"}}],[11,"empty_if_supported","","Creates an empty texture.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"depthstenciltexture1d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"bool"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",169,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",169,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"clone","","",170,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",170,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1d"}}],[11,"get_level","","Returns the layer index.",170,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",171,{"inputs":[{"name":"texture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"to_color_attachment","glium::texture","",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"colorattachment"}}],[11,"new","","Builds a new texture by uploading data.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"texture2d"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"texture2d"}}],[11,"with_format","","Builds a new texture with a specific format.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2d"}}],[11,"empty","","Creates an empty texture.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",171,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"as_surface","","Starts drawing on the texture.",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"texturesurface"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",171,{"inputs":[{"name":"texture2d"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"mipmap","","Access a single mipmap level of this texture.",171,{"inputs":[{"name":"texture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",171,{"inputs":[{"name":"texture2d"}],"output":{"name":"texture2dmipmap"}}],[11,"clone","","",172,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",172,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2d"}}],[11,"get_level","","Returns the layer index.",172,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",173,{"inputs":[{"name":"compressedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",173,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"compressedtexture2d"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",173,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"compressedtexture2d"}}],[11,"with_format","","Builds a new texture with a specific format.",173,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",173,{"inputs":[{"name":"compressedtexture2d"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"mipmap","","Access a single mipmap level of this texture.",173,{"inputs":[{"name":"compressedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",173,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"clone","","",174,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",174,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2d"}}],[11,"get_level","","Returns the layer index.",174,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"to_color_attachment","glium::texture","",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"colorattachment"}}],[11,"new","","Builds a new texture by uploading data.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"srgbtexture2d"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"srgbtexture2d"}}],[11,"with_format","","Builds a new texture with a specific format.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2d"}}],[11,"empty","","Creates an empty texture.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",175,{"inputs":[{"name":"srgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",175,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"clone","","",176,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",176,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2d"}}],[11,"get_level","","Returns the layer index.",176,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",177,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",177,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",177,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"with_format","","Builds a new texture with a specific format.",177,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",177,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",177,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",178,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",178,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the layer index.",178,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",179,{"inputs":[{"name":"integraltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"integraltexture2d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"integraltexture2d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2d"}}],[11,"empty","","Creates an empty texture.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",179,{"inputs":[{"name":"integraltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",179,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"clone","","",180,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",180,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2d"}}],[11,"get_level","","Returns the layer index.",180,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"unsignedtexture2d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"unsignedtexture2d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2d"}}],[11,"empty","","Creates an empty texture.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",181,{"inputs":[{"name":"unsignedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",181,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"clone","","",182,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",182,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2d"}}],[11,"get_level","","Returns the layer index.",182,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",183,{"inputs":[{"name":"depthtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"to_depth_attachment","glium::texture","",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"depthattachment"}}],[11,"new","","Builds a new texture by uploading data.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"depthtexture2d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"depthtexture2d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2d"}}],[11,"empty","","Creates an empty texture.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",183,{"inputs":[{"name":"depthtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",183,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"clone","","",184,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",184,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2d"}}],[11,"get_level","","Returns the layer index.",184,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_stencil_attachment","","",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"stencilattachment"}}],[11,"new","","Builds a new texture by uploading data.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"stenciltexture2d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"stenciltexture2d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2d"}}],[11,"empty","","Creates an empty texture.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",185,{"inputs":[{"name":"stenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",185,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"clone","","",186,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",186,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2d"}}],[11,"get_level","","Returns the layer index.",186,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_depth_stencil_attachment","","",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"depthstencilattachment"}}],[11,"new","","Builds a new texture by uploading data.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"depthstenciltexture2d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"depthstenciltexture2d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2d"}}],[11,"empty","","Creates an empty texture.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2d"}}],[11,"empty_if_supported","","Creates an empty texture.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",187,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",187,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"clone","","",188,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",188,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2d"}}],[11,"get_level","","Returns the layer index.",188,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"to_color_attachment","glium::texture","",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"colorattachment"}}],[11,"new_empty","","Creates an empty texture.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2dmultisample"}}],[11,"empty","","Creates an empty texture.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"as_surface","","Starts drawing on the texture.",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"texturesurface"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",189,{"inputs":[{"name":"texture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",189,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"clone","","",190,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",190,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisample"}}],[11,"get_level","","Returns the layer index.",190,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"empty","","Creates an empty texture.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",191,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",191,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",192,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",192,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the layer index.",192,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"to_color_attachment","glium::texture","",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"colorattachment"}}],[11,"new_empty","","Creates an empty texture.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"empty","","Creates an empty texture.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",193,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",193,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",194,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",194,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the layer index.",194,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"empty","","Creates an empty texture.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",195,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",196,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",196,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the layer index.",196,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"to_depth_attachment","glium::texture","",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"depthattachment"}}],[11,"new_empty","","Creates an empty texture.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"empty","","Creates an empty texture.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",197,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",197,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",198,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",198,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the layer index.",198,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_stencil_attachment","","",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"stencilattachment"}}],[11,"new_empty","","Creates an empty texture.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"empty","","Creates an empty texture.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",199,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",199,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",200,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",200,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the layer index.",200,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_depth_stencil_attachment","","",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"depthstencilattachment"}}],[11,"new_empty","","Creates an empty texture.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"empty","","Creates an empty texture.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"empty_if_supported","","Creates an empty texture.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",201,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",202,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",202,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the layer index.",202,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",203,{"inputs":[{"name":"texture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"texture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"texture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture3d"}}],[11,"empty","","Creates an empty texture.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",203,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",203,{"inputs":[{"name":"texture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",203,{"inputs":[{"name":"texture3d"}],"output":{"name":"texture3dmipmap"}}],[11,"clone","","",204,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",204,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3d"}}],[11,"get_level","","Returns the layer index.",204,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"compressedtexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"compressedtexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",205,{"inputs":[{"name":"compressedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",205,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"clone","","",206,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",206,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3d"}}],[11,"get_level","","Returns the layer index.",206,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"srgbtexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"srgbtexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture3d"}}],[11,"empty","","Creates an empty texture.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",207,{"inputs":[{"name":"srgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",207,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"clone","","",208,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",208,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3d"}}],[11,"get_level","","Returns the layer index.",208,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",209,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",209,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",210,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",210,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the layer index.",210,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",211,{"inputs":[{"name":"integraltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"integraltexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"integraltexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture3d"}}],[11,"empty","","Creates an empty texture.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",211,{"inputs":[{"name":"integraltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",211,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"clone","","",212,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",212,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3d"}}],[11,"get_level","","Returns the layer index.",212,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"unsignedtexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"unsignedtexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture3d"}}],[11,"empty","","Creates an empty texture.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",213,{"inputs":[{"name":"unsignedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",213,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"clone","","",214,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",214,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3d"}}],[11,"get_level","","Returns the layer index.",214,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",215,{"inputs":[{"name":"depthtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"depthtexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"depthtexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture3d"}}],[11,"empty","","Creates an empty texture.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",215,{"inputs":[{"name":"depthtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",215,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"clone","","",216,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",216,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3d"}}],[11,"get_level","","Returns the layer index.",216,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"stenciltexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"stenciltexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture3d"}}],[11,"empty","","Creates an empty texture.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",217,{"inputs":[{"name":"stenciltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",217,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"stenciltexture3dmipmap"}}],[11,"clone","","",218,{"inputs":[{"name":"stenciltexture3dmipmap"}],"output":{"name":"stenciltexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",218,{"inputs":[{"name":"stenciltexture3dmipmap"}],"output":{"name":"stenciltexture3d"}}],[11,"get_level","","Returns the layer index.",218,{"inputs":[{"name":"stenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"depthstenciltexture3d"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"depthstenciltexture3d"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture3d"}}],[11,"empty","","Creates an empty texture.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture3d"}}],[11,"empty_if_supported","","Creates an empty texture.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture3d"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",219,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",219,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"clone","","",220,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",220,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3d"}}],[11,"get_level","","Returns the layer index.",220,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",221,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",221,{"inputs":[{"name":"texture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",221,{"inputs":[{"name":"texture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",221,{"inputs":[{"name":"texture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",221,{"inputs":[{"name":"texture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",221,{"inputs":[{"name":"texture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"texture1darray"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"texture1darray"}}],[11,"with_format","","Builds a new texture with a specific format.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture1darray"}}],[11,"empty","","Creates an empty texture.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",221,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",221,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",221,{"inputs":[{"name":"texture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",222,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",222,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",222,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",222,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",222,{"inputs":[{"name":"texture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",222,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraymipmap"}}],[11,"clone","","",223,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",223,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darray"}}],[11,"get_level","","Returns the layer index.",223,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",223,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",224,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",224,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",224,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",224,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",224,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",224,{"inputs":[{"name":"compressedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",224,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"compressedtexture1darray"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",224,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"compressedtexture1darray"}}],[11,"with_format","","Builds a new texture with a specific format.",224,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",224,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",224,{"inputs":[{"name":"compressedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",225,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",225,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",225,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",225,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",225,{"inputs":[{"name":"compressedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",225,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"clone","","",226,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",226,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_level","","Returns the layer index.",226,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",226,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",227,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",227,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",227,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",227,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",227,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"srgbtexture1darray"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"srgbtexture1darray"}}],[11,"with_format","","Builds a new texture with a specific format.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture1darray"}}],[11,"empty","","Creates an empty texture.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",227,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",227,{"inputs":[{"name":"srgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",228,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",228,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",228,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",228,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",228,{"inputs":[{"name":"srgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",228,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"clone","","",229,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",229,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_level","","Returns the layer index.",229,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",229,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",230,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",230,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",230,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",230,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",230,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",230,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",230,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",230,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"with_format","","Builds a new texture with a specific format.",230,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",230,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",230,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",231,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",231,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",231,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",231,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",231,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",231,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",232,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",232,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the layer index.",232,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",232,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",233,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",233,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",233,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",233,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",233,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"integraltexture1darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"integraltexture1darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture1darray"}}],[11,"empty","","Creates an empty texture.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",233,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",233,{"inputs":[{"name":"integraltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",234,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",234,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",234,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",234,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",234,{"inputs":[{"name":"integraltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",234,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"clone","","",235,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",235,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darray"}}],[11,"get_level","","Returns the layer index.",235,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",235,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",236,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",236,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",236,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",236,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",236,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"unsignedtexture1darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"unsignedtexture1darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture1darray"}}],[11,"empty","","Creates an empty texture.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",236,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",236,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",237,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",237,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",237,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",237,{"inputs":[{"name":"unsignedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",237,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"clone","","",238,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",238,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_level","","Returns the layer index.",238,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",238,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",239,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",239,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",239,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",239,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",239,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"depthtexture1darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"depthtexture1darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture1darray"}}],[11,"empty","","Creates an empty texture.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",239,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",239,{"inputs":[{"name":"depthtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",240,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",240,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",240,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",240,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",240,{"inputs":[{"name":"depthtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",240,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"clone","","",241,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",241,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darray"}}],[11,"get_level","","Returns the layer index.",241,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",241,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",242,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",242,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",242,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",242,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",242,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"stenciltexture1darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"stenciltexture1darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture1darray"}}],[11,"empty","","Creates an empty texture.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",242,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",242,{"inputs":[{"name":"stenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",243,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",243,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",243,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",243,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",243,{"inputs":[{"name":"stenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",243,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"clone","","",244,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",244,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_level","","Returns the layer index.",244,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",244,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",245,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",245,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",245,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",245,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",245,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"empty","","Creates an empty texture.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"empty_if_supported","","Creates an empty texture.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",245,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",245,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",246,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",246,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",246,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",246,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",246,{"inputs":[{"name":"depthstenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",246,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",247,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",247,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the layer index.",247,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",247,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",248,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",248,{"inputs":[{"name":"texture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",248,{"inputs":[{"name":"texture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",248,{"inputs":[{"name":"texture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",248,{"inputs":[{"name":"texture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",248,{"inputs":[{"name":"texture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"texture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"texture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2darray"}}],[11,"empty","","Creates an empty texture.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",248,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",248,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",248,{"inputs":[{"name":"texture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",249,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",249,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",249,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",249,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",249,{"inputs":[{"name":"texture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",249,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraymipmap"}}],[11,"clone","","",250,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",250,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darray"}}],[11,"get_level","","Returns the layer index.",250,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",250,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",251,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",251,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",251,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",251,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",251,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"compressedtexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"compressedtexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",251,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",251,{"inputs":[{"name":"compressedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",252,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",252,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",252,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",252,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",252,{"inputs":[{"name":"compressedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",252,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"clone","","",253,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",253,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_level","","Returns the layer index.",253,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",253,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",254,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",254,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",254,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",254,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",254,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"srgbtexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"srgbtexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2darray"}}],[11,"empty","","Creates an empty texture.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",254,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",254,{"inputs":[{"name":"srgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",255,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",255,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",255,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",255,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",255,{"inputs":[{"name":"srgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",255,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"clone","","",256,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",256,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_level","","Returns the layer index.",256,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",256,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",257,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",257,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",257,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",257,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",257,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",257,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",258,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",258,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",258,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",258,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",258,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",258,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",259,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",259,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the layer index.",259,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",259,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",260,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",260,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",260,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",260,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",260,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"integraltexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"integraltexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2darray"}}],[11,"empty","","Creates an empty texture.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",260,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",260,{"inputs":[{"name":"integraltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",261,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",261,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",261,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",261,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",261,{"inputs":[{"name":"integraltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",261,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"clone","","",262,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",262,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darray"}}],[11,"get_level","","Returns the layer index.",262,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",262,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",263,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",263,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",263,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",263,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",263,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"unsignedtexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"unsignedtexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2darray"}}],[11,"empty","","Creates an empty texture.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",263,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",263,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",264,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",264,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",264,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",264,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",264,{"inputs":[{"name":"unsignedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",264,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"clone","","",265,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",265,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_level","","Returns the layer index.",265,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",265,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",266,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",266,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",266,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",266,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",266,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new","glium::texture","Builds a new texture by uploading data.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"depthtexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"depthtexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2darray"}}],[11,"empty","","Creates an empty texture.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",266,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",266,{"inputs":[{"name":"depthtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",267,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",267,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",267,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",267,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",267,{"inputs":[{"name":"depthtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",267,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"clone","","",268,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",268,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darray"}}],[11,"get_level","","Returns the layer index.",268,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",268,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",269,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",269,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",269,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",269,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",269,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"stenciltexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"stenciltexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2darray"}}],[11,"empty","","Creates an empty texture.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",269,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",269,{"inputs":[{"name":"stenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",270,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",270,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",270,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",270,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",270,{"inputs":[{"name":"stenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",270,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"clone","","",271,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",271,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_level","","Returns the layer index.",271,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",271,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",272,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",272,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",272,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",272,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",272,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"new_if_supported","","Builds a new texture by uploading data.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"option"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"bool"}],"output":{"name":"option"}}],[11,"with_format","","Builds a new texture with a specific format.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"with_format_if_supported","","Builds a new texture with a specific format.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"empty","","Creates an empty texture.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"empty_if_supported","","Creates an empty texture.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",272,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"layer","","Access a single layer of this texture.",272,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",273,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",273,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",273,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",273,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",273,{"inputs":[{"name":"depthstenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",273,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",274,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",274,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the layer index.",274,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",274,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",275,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",275,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",276,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",276,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",276,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",277,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",278,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",278,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",278,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",279,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",280,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",280,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",280,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",281,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",282,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",282,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",282,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_uniform_value","glium::uniforms","",84,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"new_empty","glium::texture","Creates an empty texture.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",283,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",284,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",284,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",284,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",285,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",286,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",286,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",286,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","","",null,null],[11,"get_id","","",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_empty","","Creates an empty texture.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"empty","","Creates an empty texture.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"empty_if_supported","","Creates an empty texture.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"bool"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this texture.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",287,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",288,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",288,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the layer index.",288,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[6,"Data","","",null,null],[11,"into_raw","collections::vec","",289,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage1d"}}],[6,"Data","glium::texture","",null,null],[11,"get_preferred_formats","collections::vec","",289,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"from_raw","","",289,{"inputs":[{"name":"vec"},{"name":"rawimage1d"}],"output":{"name":"vec"}}],[6,"Data","glium::texture","",null,null],[6,"Data","","",null,null],[11,"into_raw","collections::vec","",289,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage2d"}}],[6,"Data","glium::texture","",null,null],[11,"get_preferred_formats","collections::vec","",289,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"from_raw","","",289,{"inputs":[{"name":"vec"},{"name":"rawimage2d"}],"output":{"name":"vec"}}],[6,"Data","glium::texture","",null,null],[11,"into_raw","image::buffer","",290,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"rawimage2d"}}],[6,"Data","glium::texture","",null,null],[11,"get_preferred_formats","image::buffer","",290,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"from_raw","","",290,{"inputs":[{"name":"imagebuffer"},{"name":"rawimage2d"}],"output":{"name":"imagebuffer"}}],[6,"Data","glium::texture","",null,null],[11,"into_raw","image::dynimage","",291,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rawimage2d"}}],[6,"Data","glium::texture","",null,null],[11,"get_preferred_formats","image::dynimage","",291,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"from_raw","","",291,{"inputs":[{"name":"dynamicimage"},{"name":"rawimage2d"}],"output":{"name":"dynamicimage"}}],[6,"Data","glium::texture","",null,null],[11,"into_raw","collections::vec","",289,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage3d"}}],[6,"Data","glium::texture","",null,null],[11,"get_preferred_formats","collections::vec","",289,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"from_raw","","",289,{"inputs":[{"name":"vec"},{"name":"rawimage3d"}],"output":{"name":"vec"}}],[11,"clear","glium::texture","",292,{"inputs":[{"name":"texturesurface"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",292,null],[11,"get_depth_buffer_bits","","",292,{"inputs":[{"name":"texturesurface"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",292,{"inputs":[{"name":"texturesurface"}],"output":{"name":"option"}}],[11,"draw","","",292,{"inputs":[{"name":"texturesurface"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",292,{"inputs":[{"name":"texturesurface"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",292,{"inputs":[{"name":"texturesurface"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",292,{"inputs":[{"name":"texturesurface"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",292,{"inputs":[{"name":"texturesurface"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"eq","","",139,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",139,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"texturemaybesupportedcreationerror"},{"name":"texturemaybesupportedcreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"texturemaybesupportedcreationerror"},{"name":"texturemaybesupportedcreationerror"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"texturemaybesupportedcreationerror"}],"output":{"name":"texturemaybesupportedcreationerror"}}],[11,"fmt","","",140,{"inputs":[{"name":"texturemaybesupportedcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",140,{"inputs":[{"name":"texturemaybesupportedcreationerror"},{"name":"formatnotsupportederror"}],"output":{"name":"texturemaybesupportedcreationerror"}}],[11,"new","glium::backend","Builds a new context.",15,{"inputs":[{"name":"context"},{"name":"b"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",15,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",15,{"inputs":[{"name":"context"},{"name":"b"}],"output":{"name":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",15,{"inputs":[{"name":"context"}],"output":null}],[11,"capabilities","","",15,{"inputs":[{"name":"context"}],"output":{"name":"capabilities"}}],[11,"get_version","","Returns the OpenGL version detected by this context.",15,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_extensions","","",15,{"inputs":[{"name":"context"}],"output":{"name":"extensionslist"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",15,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",15,{"inputs":[{"name":"context"},{"name":"version"}],"output":{"name":"bool"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",15,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",15,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",15,{"inputs":[{"name":"context"}],"output":null}],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",15,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",15,{"inputs":[{"name":"context"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another\ncomponent needs to directly manipulate OpenGL state.",15,{"inputs":[{"name":"context"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",15,{"inputs":[{"name":"context"}],"output":null}],[11,"synchronize","","Waits until all the previous commands have finished being executed.",15,{"inputs":[{"name":"context"}],"output":null}],[11,"drop","","",15,{"inputs":[{"name":"context"}],"output":null}],[11,"eq","glium","",3,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"blendingfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"blendingfunction"}],"output":{"name":"blendingfunction"}}],[11,"eq","","",4,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"linearblendingfactor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"linearblendingfactor"}],"output":{"name":"linearblendingfactor"}}],[11,"eq","","",5,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"backfacecullingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"backfacecullingmode"}],"output":{"name":"backfacecullingmode"}}],[11,"eq","","",6,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"depthtest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"depthtest"}],"output":{"name":"depthtest"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",6,{"inputs":[{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"stenciltest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"stenciltest"}],"output":{"name":"stenciltest"}}],[11,"eq","","",9,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"stenciloperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"stenciloperation"}],"output":{"name":"stenciloperation"}}],[11,"eq","","",7,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"polygonmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"polygonmode"}],"output":{"name":"polygonmode"}}],[11,"eq","","",0,{"inputs":[{"name":"drawparameters"},{"name":"drawparameters"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"drawparameters"},{"name":"drawparameters"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"drawparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"default","","",0,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"eq","glium::texture","",129,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"clientformat"}],"output":{"name":"clientformat"}}],[11,"fmt","","",129,{"inputs":[{"name":"clientformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",129,{"inputs":[{"name":"clientformat"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",129,{"inputs":[{"name":"clientformat"}],"output":{"name":"u8"}}],[11,"eq","","",131,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"uncompressedfloatformat"}}],[11,"fmt","","",131,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",131,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",138,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"srgbformat"}],"output":{"name":"srgbformat"}}],[11,"fmt","","",138,{"inputs":[{"name":"srgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",138,{"inputs":[{"name":"srgbformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",132,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"uncompressedintformat"}}],[11,"fmt","","",132,{"inputs":[{"name":"uncompressedintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",132,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",133,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"uncompresseduintformat"}}],[11,"fmt","","",133,{"inputs":[{"name":"uncompresseduintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",133,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",134,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"compressedformat"}],"output":{"name":"compressedformat"}}],[11,"fmt","","",134,{"inputs":[{"name":"compressedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",134,{"inputs":[{"name":"compressedformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",293,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"clone","","",293,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"compressedsrgbformat"}}],[11,"fmt","","",293,{"inputs":[{"name":"compressedsrgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",293,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",135,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"depthformat"}],"output":{"name":"depthformat"}}],[11,"fmt","","",135,{"inputs":[{"name":"depthformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",135,{"inputs":[{"name":"depthformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",136,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"depthstencilformat"}}],[11,"fmt","","",136,{"inputs":[{"name":"depthstencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",136,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",137,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"stencilformat"}],"output":{"name":"stencilformat"}}],[11,"fmt","","",137,{"inputs":[{"name":"stencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",137,{"inputs":[{"name":"stencilformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",130,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"textureformat"}],"output":{"name":"textureformat"}}],[11,"fmt","","",130,{"inputs":[{"name":"textureformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","glium","Builds a new `SyncFence` that is injected in the server.",294,{"inputs":[{"name":"syncfence"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"new_if_supported","","Builds a new `SyncFence` that is injected in the server.",294,{"inputs":[{"name":"syncfence"},{"name":"f"}],"output":{"name":"option"}}],[11,"wait","","Blocks until the operation has finished on the server.",294,{"inputs":[{"name":"syncfence"}],"output":null}],[11,"drop","","",294,{"inputs":[{"name":"syncfence"}],"output":null}],[11,"into_sync_fence","","Turns the prototype into a real fence.",295,{"inputs":[{"name":"linearsyncfence"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"drop","","",295,{"inputs":[{"name":"linearsyncfence"}],"output":null}],[11,"eq","","",296,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",296,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"fmt","","",296,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",11,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",296,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[6,"Display","","The main object of this library. Controls the whole display.",null,null],[8,"GlObject","","Trait for objects that are OpenGL objects.",null,null],[16,"Id","glium::GlObject","The type of identifier for this object.",null,null],[10,"get_id","glium","Returns the id of the object.",297,{"inputs":[{"name":"globject"}],"output":{"name":"id"}}],[8,"Surface","","Object that can be drawn upon.",null,null],[10,"clear","","Clears some attachments of the target.",298,{"inputs":[{"name":"surface"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"clear_color","","Clears the color attachment of the target.",298,{"inputs":[{"name":"surface"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_depth","","Clears the depth attachment of the target.",298,{"inputs":[{"name":"surface"},{"name":"f32"}],"output":null}],[11,"clear_stencil","","Clears the stencil attachment of the target.",298,{"inputs":[{"name":"surface"},{"name":"i32"}],"output":null}],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",298,null],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",298,null],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",298,{"inputs":[{"name":"surface"},{"name":"f32"},{"name":"i32"}],"output":null}],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",298,null],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",298,null],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",298,{"inputs":[{"name":"surface"}],"output":{"name":"option"}}],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",298,{"inputs":[{"name":"surface"}],"output":{"name":"bool"}}],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",298,{"inputs":[{"name":"surface"}],"output":{"name":"option"}}],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",298,{"inputs":[{"name":"surface"}],"output":{"name":"bool"}}],[10,"draw","","Draws.",298,{"inputs":[{"name":"surface"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[10,"blit_from_frame","","Blits from the default framebuffer.",298,{"inputs":[{"name":"surface"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_simple_framebuffer","","Blits from a simple framebuffer.",298,{"inputs":[{"name":"surface"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_multioutput_framebuffer","","Blits from a multi-output framebuffer.",298,{"inputs":[{"name":"surface"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",298,{"inputs":[{"name":"surface"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",298,{"inputs":[{"name":"surface"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",298,{"inputs":[{"name":"surface"},{"name":"s"},{"name":"magnifysamplerfilter"}],"output":null}],[8,"DisplayBuild","","Objects that can build a facade object.",null,null],[16,"Facade","glium::DisplayBuild","The object that this `DisplayBuild` builds.",null,null],[10,"build_glium","glium","Build a context and a facade to draw on it.",299,{"inputs":[{"name":"displaybuild"}],"output":{"name":"result"}}],[10,"build_glium_unchecked","","Build a context and a facade to draw on it",299,{"inputs":[{"name":"displaybuild"}],"output":{"name":"result"}}],[10,"rebuild_glium","","Changes the settings of an existing facade.",299,{"inputs":[{"name":"displaybuild"},{"name":"facade"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"handle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",12,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",1,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"fmt","","",1,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"clone","","",2,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"fmt","","",2,{"inputs":[{"name":"blittarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"drawerror"}],"output":{"name":"drawerror"}}],[11,"fmt","","",13,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",300,null],[11,"finish","","Stop drawing, and swap the buffers.",300,{"inputs":[{"name":"frame"}],"output":null}],[11,"clear","","",300,{"inputs":[{"name":"frame"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",300,null],[11,"get_depth_buffer_bits","","",300,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",300,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"draw","","",300,{"inputs":[{"name":"frame"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",300,{"inputs":[{"name":"frame"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",300,{"inputs":[{"name":"frame"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",300,{"inputs":[{"name":"frame"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",300,{"inputs":[{"name":"frame"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"drop","","",300,{"inputs":[{"name":"frame"}],"output":null}],[11,"eq","","",14,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"gliumcreationerror"}}],[11,"fmt","","",14,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"option"}}],[11,"from","","",14,{"inputs":[{"name":"gliumcreationerror"},{"name":"creationerror"}],"output":{"name":"gliumcreationerror"}}],[14,"uniform!","","Returns an implementation-defined type which implements the `Uniform` trait.",null,null],[14,"implement_vertex!","","Implements the `glium::vertex::Vertex` trait for the given type.",null,null],[14,"program!","","Builds a program depending on the GLSL version supported by the backend.",null,null]],"paths":[[3,"DrawParameters"],[3,"Rect"],[3,"BlitTarget"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"BackfaceCullingMode"],[4,"DepthTest"],[4,"PolygonMode"],[4,"StencilTest"],[4,"StencilOperation"],[4,"ProgramCreationError"],[4,"Api"],[4,"Handle"],[4,"DrawError"],[4,"GliumCreationError"],[3,"Context"],[3,"GlutinFacade"],[3,"PollEventsIter"],[3,"WaitEventsIter"],[3,"WinRef"],[3,"WindowBuilder"],[3,"HeadlessRendererBuilder"],[3,"GlutinWindowBackend"],[3,"GlutinHeadlessBackend"],[8,"Backend"],[8,"Facade"],[3,"Rc"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[8,"ToColorAttachment"],[8,"ToDepthAttachment"],[8,"ToStencilAttachment"],[8,"ToDepthStencilAttachment"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[4,"IndicesSource"],[4,"PrimitiveType"],[4,"IndexType"],[3,"IndexBuffer"],[3,"PointsList"],[3,"LinesList"],[3,"LinesListAdjacency"],[3,"LineStrip"],[3,"LineStripAdjacency"],[3,"TrianglesList"],[3,"TrianglesListAdjacency"],[3,"TriangleStrip"],[3,"TriangleStripAdjacency"],[3,"TriangleFan"],[3,"Patches"],[8,"ToIndicesSource"],[8,"Index"],[8,"IntoIndexBuffer"],[3,"NoIndices"],[3,"PixelBuffer"],[3,"Uniform"],[3,"UniformBlock"],[3,"UniformBlockMember"],[3,"Attribute"],[3,"TransformFeedbackVarying"],[3,"TransformFeedbackBuffer"],[3,"SourceCode"],[3,"Binary"],[4,"TransformFeedbackMode"],[4,"ProgramCreationInput"],[3,"Program"],[8,"IntoProgramCreationInput"],[3,"RenderBuffer"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"SamplerBehavior"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[4,"UniformValue"],[4,"UniformType"],[3,"UniformBuffer"],[3,"Sampler"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Ortho3"],[3,"OrthoMat3"],[3,"Persp3"],[3,"PerspMat3"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Quat"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"UnitQuat"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[8,"IntoUniformValue"],[8,"Uniforms"],[8,"UniformBlock"],[4,"AttributeType"],[4,"VerticesSource"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"VertexBufferAnySlice"],[3,"Mapping"],[8,"IntoVerticesSource"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[3,"PerInstance"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"ClientFormat"],[4,"TextureFormat"],[4,"UncompressedFloatFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"SrgbFormat"],[4,"TextureCreationError"],[4,"TextureMaybeSupportedCreationError"],[3,"Rgb"],[3,"Rgba"],[3,"Luma"],[3,"LumaA"],[8,"PixelValue"],[8,"Texture"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"StencilTexture3d"],[3,"StencilTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"Vec"],[3,"ImageBuffer"],[4,"DynamicImage"],[3,"TextureSurface"],[4,"CompressedSrgbFormat"],[3,"SyncFence"],[3,"LinearSyncFence"],[3,"Version"],[8,"GlObject"],[8,"Surface"],[8,"DisplayBuild"],[3,"Frame"]]};
searchIndex['glutin'] = {"items":[[0,"","glutin","The purpose of this library is to provide an OpenGL context on as many\n platforms as possible.",null,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[3,"Window","","Represents an OpenGL context and the Window or environment around it.",null,null],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads.",null,null],[3,"PollEventsIterator","","An iterator for the `poll_events` function.",null,null],[3,"WaitEventsIterator","","An iterator for the `wait_events` function.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorID","","Identifier for a monitor.",null,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",0,null],[12,"red_bits","","",0,null],[12,"green_bits","","",0,null],[12,"blue_bits","","",0,null],[12,"alpha_bits","","",0,null],[12,"depth_bits","","",0,null],[12,"stencil_bits","","",0,null],[12,"stereoscopy","","",0,null],[12,"double_buffer","","",0,null],[12,"multisampling","","",0,null],[12,"srgb","","",0,null],[4,"Event","","",null,null],[13,"Resized","","The size of the window has changed.",1,null],[13,"Moved","","The position of the window has changed.",1,null],[13,"Closed","","The window has been closed.",1,null],[13,"ReceivedCharacter","","The window received a unicode character.",1,null],[13,"Focused","","The window gained or lost focus.",1,null],[13,"KeyboardInput","","An event from the keyboard has been received.",1,null],[13,"MouseMoved","","The cursor has moved on the window.",1,null],[13,"MouseWheel","","A positive value indicates that the wheel was rotated forward, away from the user;\na negative value indicates that the wheel was rotated backward, toward the user.",1,null],[13,"MouseInput","","An event from the mouse has been received.",1,null],[13,"Awakened","","The event loop was woken up by another thread.",1,null],[4,"ElementState","","",null,null],[13,"Pressed","","",2,null],[13,"Released","","",2,null],[4,"MouseButton","","",null,null],[13,"Left","","",3,null],[13,"Right","","",3,null],[13,"Middle","","",3,null],[13,"Other","","",3,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",4,null],[13,"Key2","","The '2' key over the letters.",4,null],[13,"Key3","","The '3' key over the letters.",4,null],[13,"Key4","","The '4' key over the letters.",4,null],[13,"Key5","","The '5' key over the letters.",4,null],[13,"Key6","","The '6' key over the letters.",4,null],[13,"Key7","","The '7' key over the letters.",4,null],[13,"Key8","","The '8' key over the letters.",4,null],[13,"Key9","","The '9' key over the letters.",4,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",4,null],[13,"A","","",4,null],[13,"B","","",4,null],[13,"C","","",4,null],[13,"D","","",4,null],[13,"E","","",4,null],[13,"F","","",4,null],[13,"G","","",4,null],[13,"H","","",4,null],[13,"I","","",4,null],[13,"J","","",4,null],[13,"K","","",4,null],[13,"L","","",4,null],[13,"M","","",4,null],[13,"N","","",4,null],[13,"O","","",4,null],[13,"P","","",4,null],[13,"Q","","",4,null],[13,"R","","",4,null],[13,"S","","",4,null],[13,"T","","",4,null],[13,"U","","",4,null],[13,"V","","",4,null],[13,"W","","",4,null],[13,"X","","",4,null],[13,"Y","","",4,null],[13,"Z","","",4,null],[13,"Escape","","The Escape key, next to F1.",4,null],[13,"F1","","",4,null],[13,"F2","","",4,null],[13,"F3","","",4,null],[13,"F4","","",4,null],[13,"F5","","",4,null],[13,"F6","","",4,null],[13,"F7","","",4,null],[13,"F8","","",4,null],[13,"F9","","",4,null],[13,"F10","","",4,null],[13,"F11","","",4,null],[13,"F12","","",4,null],[13,"F13","","",4,null],[13,"F14","","",4,null],[13,"F15","","",4,null],[13,"Snapshot","","Print Screen/SysRq.",4,null],[13,"Scroll","","Scroll Lock.",4,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",4,null],[13,"Insert","","`Insert`, next to Backspace.",4,null],[13,"Home","","",4,null],[13,"Delete","","",4,null],[13,"End","","",4,null],[13,"PageDown","","",4,null],[13,"PageUp","","",4,null],[13,"Left","","",4,null],[13,"Up","","",4,null],[13,"Right","","",4,null],[13,"Down","","",4,null],[13,"Back","","The Backspace key, right over Enter.",4,null],[13,"Return","","The Enter key.",4,null],[13,"Space","","The space bar.",4,null],[13,"Numlock","","",4,null],[13,"Numpad0","","",4,null],[13,"Numpad1","","",4,null],[13,"Numpad2","","",4,null],[13,"Numpad3","","",4,null],[13,"Numpad4","","",4,null],[13,"Numpad5","","",4,null],[13,"Numpad6","","",4,null],[13,"Numpad7","","",4,null],[13,"Numpad8","","",4,null],[13,"Numpad9","","",4,null],[13,"AbntC1","","",4,null],[13,"AbntC2","","",4,null],[13,"Add","","",4,null],[13,"Apostrophe","","",4,null],[13,"Apps","","",4,null],[13,"At","","",4,null],[13,"Ax","","",4,null],[13,"Backslash","","",4,null],[13,"Calculator","","",4,null],[13,"Capital","","",4,null],[13,"Colon","","",4,null],[13,"Comma","","",4,null],[13,"Convert","","",4,null],[13,"Decimal","","",4,null],[13,"Divide","","",4,null],[13,"Equals","","",4,null],[13,"Grave","","",4,null],[13,"Kana","","",4,null],[13,"Kanji","","",4,null],[13,"LAlt","","",4,null],[13,"LBracket","","",4,null],[13,"LControl","","",4,null],[13,"LMenu","","",4,null],[13,"LShift","","",4,null],[13,"LWin","","",4,null],[13,"Mail","","",4,null],[13,"MediaSelect","","",4,null],[13,"MediaStop","","",4,null],[13,"Minus","","",4,null],[13,"Multiply","","",4,null],[13,"Mute","","",4,null],[13,"MyComputer","","",4,null],[13,"NextTrack","","",4,null],[13,"NoConvert","","",4,null],[13,"NumpadComma","","",4,null],[13,"NumpadEnter","","",4,null],[13,"NumpadEquals","","",4,null],[13,"OEM102","","",4,null],[13,"Period","","",4,null],[13,"Playpause","","",4,null],[13,"Power","","",4,null],[13,"Prevtrack","","",4,null],[13,"RAlt","","",4,null],[13,"RBracket","","",4,null],[13,"RControl","","",4,null],[13,"RMenu","","",4,null],[13,"RShift","","",4,null],[13,"RWin","","",4,null],[13,"Semicolon","","",4,null],[13,"Slash","","",4,null],[13,"Sleep","","",4,null],[13,"Stop","","",4,null],[13,"Subtract","","",4,null],[13,"Sysrq","","",4,null],[13,"Tab","","",4,null],[13,"Underline","","",4,null],[13,"Unlabeled","","",4,null],[13,"VolumeDown","","",4,null],[13,"VolumeUp","","",4,null],[13,"Wake","","",4,null],[13,"Webback","","",4,null],[13,"WebFavorites","","",4,null],[13,"WebForward","","",4,null],[13,"WebHome","","",4,null],[13,"WebRefresh","","",4,null],[13,"WebSearch","","",4,null],[13,"WebStop","","",4,null],[13,"Yen","","",4,null],[4,"NativeMonitorId","","Native platform identifier for a monitor. Different platforms use fundamentally different types\nto represent a monitor ID.",null,null],[13,"Numeric","","Cocoa and X11 use a numeric identifier to represent a monitor.",5,null],[13,"Name","","Win32 uses a Unicode string to represent a monitor.",5,null],[13,"Unavailable","","Other platforms (Android) don't support monitor identification.",5,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",6,null],[13,"NotSupported","","",6,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",7,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",7,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",7,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",8,null],[13,"Specific","","Request a specific version of a specific API.",8,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`.\nElse if OpenGL ES or WebGL is available, create a context with the\nspecified `opengles_version`.",8,null],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",8,null],[12,"opengles_version","","The version to use for OpenGL ES.",8,null],[4,"MouseCursor","glutin","",null,null],[13,"Default","","The platform-dependent default cursor.",9,null],[13,"Crosshair","","A simple crosshair.",9,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",9,null],[13,"Arrow","","Self explanatory.",9,null],[13,"Move","","Indicates something is to be moved.",9,null],[13,"Text","","Indicates text that may be selected or edited.",9,null],[13,"Wait","","Program busy indicator.",9,null],[13,"Help","","Help indicator (often rendered as a \"?\")",9,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast\nwith \"Wait\" the user may still interact with the program. Often rendered\nas a spinning beach ball, or an arrow with a watch or hourglass.",9,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",9,null],[13,"ContextMenu","","",9,null],[13,"NoneCursor","","",9,null],[13,"Cell","","",9,null],[13,"VerticalText","","",9,null],[13,"Alias","","",9,null],[13,"Copy","","",9,null],[13,"NoDrop","","",9,null],[13,"Grab","","",9,null],[13,"Grabbing","","",9,null],[13,"AllScroll","","",9,null],[13,"ZoomIn","","",9,null],[13,"ZoomOut","","",9,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor\nis used when the movement starts from the south-east corner of the box.",9,null],[13,"NResize","","",9,null],[13,"NeResize","","",9,null],[13,"NwResize","","",9,null],[13,"SResize","","",9,null],[13,"SeResize","","",9,null],[13,"SwResize","","",9,null],[13,"WResize","","",9,null],[13,"EwResize","","",9,null],[13,"NsResize","","",9,null],[13,"NeswResize","","",9,null],[13,"NwseResize","","",9,null],[13,"ColResize","","",9,null],[13,"RowResize","","",9,null],[4,"CursorState","","Describes how glutin handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",10,null],[13,"Hide","","The cursor will be invisible when over the window.",10,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this\nwindow and the window has exclusive access to further events regarding\nthe cursor.",10,null],[5,"get_available_monitors","","Returns the list of all available monitors.",null,{"inputs":[],"output":{"name":"availablemonitorsiter"}}],[5,"get_primary_monitor","","Returns the primary monitor of the system.",null,{"inputs":[],"output":{"name":"monitorid"}}],[11,"fmt","","",1,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",2,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",2,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",3,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",4,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",11,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_version","","THIS FUNCTION IS DEPRECATED",11,null],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",11,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",11,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",11,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",11,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",12,{"inputs":[{"name":"headlesscontext"}],"output":null}],[11,"is_current","","Returns true if this context is the current one in this thread.",12,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",12,null],[11,"get_api","","Returns the API that is currently provided by this window.",12,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",12,{"inputs":[{"name":"headlesscontext"},{"name":"option"}],"output":null}],[11,"get_proc_addr","","",12,null],[11,"new","","Initializes a new `WindowBuilder` with default values.",13,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",13,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",13,{"inputs":[{"name":"windowbuilder"},{"name":"string"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",13,{"inputs":[{"name":"windowbuilder"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",13,{"inputs":[{"name":"windowbuilder"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_version","","THIS FUNCTION IS DEPRECATED",13,null],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",13,{"inputs":[{"name":"windowbuilder"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",13,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",13,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",13,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request.",13,{"inputs":[{"name":"windowbuilder"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",13,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",13,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",13,{"inputs":[{"name":"windowbuilder"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",13,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means \"I don't care\".",13,{"inputs":[{"name":"windowbuilder"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",13,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",13,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",14,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_closed","","Returns true if the window has previously been closed by the user.",14,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"should_close","","Returns true if the window has previously been closed by the user.",14,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"set_title","","Modifies the title of the window.",14,{"inputs":[{"name":"window"},{"name":"str"}],"output":null}],[11,"show","","Shows the window if it was hidden.",14,{"inputs":[{"name":"window"}],"output":null}],[11,"hide","","Hides the window if it was visible.",14,{"inputs":[{"name":"window"}],"output":null}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",14,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",14,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",14,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",14,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",14,{"inputs":[{"name":"window"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",14,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",14,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",14,{"inputs":[{"name":"window"}],"output":null}],[11,"is_current","","Returns true if this context is the current one in this thread.",14,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",14,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",14,{"inputs":[{"name":"window"}],"output":null}],[11,"platform_display","","Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",14,null],[11,"platform_window","","Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",14,null],[11,"get_api","","Returns the API that is currently provided by this window.",14,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",14,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",14,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",14,{"inputs":[{"name":"window"},{"name":"option"}],"output":null}],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",14,{"inputs":[{"name":"window"},{"name":"mousecursor"}],"output":null}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",14,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",14,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",14,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"get_proc_addr","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",15,{"inputs":[{"name":"windowproxy"}],"output":null}],[11,"next","","",16,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next","","",18,{"inputs":[{"name":"availablemonitorsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"get_name","","Returns a human-readable name of the monitor.",19,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",19,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",19,null],[11,"eq","","",5,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[6,"ScanCode","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",2,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",2,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",3,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",4,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"eq","","",7,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",7,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"glrequest"}],"output":{"name":"glrequest"}}],[11,"fmt","","",8,{"inputs":[{"name":"glrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"mousecursor"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",9,{"inputs":[{"name":"mousecursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"cursorstate"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",10,{"inputs":[{"name":"cursorstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",0,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"PixelFormat"],[4,"Event"],[4,"ElementState"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"NativeMonitorId"],[4,"CreationError"],[4,"Api"],[4,"GlRequest"],[4,"MouseCursor"],[4,"CursorState"],[3,"HeadlessRendererBuilder"],[3,"HeadlessContext"],[3,"WindowBuilder"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorID"]]};
searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions.",null,null],[3,"Luma","","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Hold the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image Errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",6,null],[13,"JPEG","","An Image in JPEG Format",6,null],[13,"GIF","","An Image in GIF Format",6,null],[13,"WEBP","","An Image in WEBP Format",6,null],[13,"PPM","","An Image in PPM Format",6,null],[13,"TIFF","","An Image in TIFF Format",6,null],[13,"TGA","","An Image in TGA Format",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",8,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",8,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",8,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",8,null],[5,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice\nMakes an educated guess about the image format.\nTGA is not supported by this function.",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee \"Kohonen neural networks for optimal colour quantization\"\nin \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",9,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",9,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",9,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",9,null],[0,"imageops","image","Image Processing Functions",null,null],[5,"rotate90","image::imageops","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image\nThis function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","image::imageops::colorops::ColorMap","The color type on which the map operates on",null,null],[10,"index_of","image::imageops::colorops","Returns the index of the closed match of `color`\nin the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":{"name":"usize"}}],[10,"map_color","","Maps `color` to the closes color in the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[6,"Color","","",null,null],[11,"index_of","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":null}],[6,"Color","","",null,null],[11,"index_of","image::math::nq","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",12,{"inputs":[{"name":"webpdecoder"},{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",12,null],[11,"read_image","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",13,null],[12,"height","","The height of the luma plane",13,null],[12,"ybuf","","The luma plane of the frame",13,null],[12,"keyframe","","Indicates whether this frame is a keyframe",13,null],[12,"for_display","","Indicates whether this frame is intended for display",13,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",13,null],[3,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes",null,null],[11,"clone","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",13,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",14,{"inputs":[{"name":"vp8decoder"},{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",14,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",15,{"inputs":[{"name":"ppmencoder"},{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",15,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","The representation of a PNG decoder",null,null],[3,"PNGEncoder","","The representation of a PNG encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",16,{"inputs":[{"name":"pngdecoder"},{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",16,null],[11,"dimensions","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",16,null],[11,"read_image","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",17,{"inputs":[{"name":"pngencoder"},{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",17,null],[0,"zlib","","An Implementation of RFC 1950",null,null],[3,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder.",null,null],[3,"ZlibEncoder","","A Zlib compressed stream encoder.",null,null],[11,"new","","Create a new decoder that decodes from a Reader",18,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"inner","","Return a mutable reference to the wrapped Reader",18,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","Builds a new encoder.",19,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"into_inner","","Finish writing and returns the underlying writer.",19,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"drop","","",19,{"inputs":[{"name":"zlibencoder"}],"output":null}],[0,"deflate","image::png","A DEFLATE encoder (RFC 1951).",null,null],[3,"Deflater","image::png::deflate","A DEFLATE encoder (RFC 1951).",null,null],[11,"new","","Creates a new encoder that writes to the underlying writer.",20,{"inputs":[{"name":"deflater"},{"name":"w"}],"output":{"name":"deflater"}}],[11,"into_inner","","Stops encoding and returns the underlying writer.",20,{"inputs":[{"name":"deflater"}],"output":{"name":"result"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"deflater"}],"output":{"name":"result"}}],[11,"drop","","",20,{"inputs":[{"name":"deflater"}],"output":null}],[0,"inflate","image::png","An Implementation of RFC 1951",null,null],[3,"Inflater","image::png::inflate","A DEFLATE compressed stream decoder.",null,null],[11,"new","","Create a new decoder that decodes from a Reader",21,{"inputs":[{"name":"inflater"},{"name":"r"}],"output":{"name":"inflater"}}],[11,"eof","","Indicate whether the end of the stream has been reached.",21,{"inputs":[{"name":"inflater"}],"output":{"name":"bool"}}],[11,"inner","","Return a mutable reference to the wrapped Reader",21,{"inputs":[{"name":"inflater"}],"output":{"name":"r"}}],[11,"read","","",21,null],[0,"hash","image::png","This module provides implementations of common hashing algorithms.",null,null],[3,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum",null,null],[3,"Crc32","","An Implementation of the Crc-32 checksum",null,null],[11,"clone","","",22,{"inputs":[{"name":"adler32"}],"output":{"name":"adler32"}}],[11,"new","","Create a new hasher.",22,{"inputs":[{"name":"adler32"}],"output":{"name":"adler32"}}],[11,"update","","Update the internal hasher with the bytes from ```buf```",22,null],[11,"checksum","","Return the computed hash.",22,{"inputs":[{"name":"adler32"}],"output":{"name":"u32"}}],[11,"reset","","Reset this hasher to its initial state.",22,{"inputs":[{"name":"adler32"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"crc32"}],"output":{"name":"crc32"}}],[11,"new","","Create a new hasher.",23,{"inputs":[{"name":"crc32"}],"output":{"name":"crc32"}}],[11,"update","","Update the internal hasher with the bytes from ```buf```",23,null],[11,"checksum","","Return the computed hash.",23,{"inputs":[{"name":"crc32"}],"output":{"name":"u32"}}],[11,"reset","","Reset this hasher to its initial state.",23,{"inputs":[{"name":"crc32"}],"output":null}],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[3,"Component","","A representation of a JPEG component",null,null],[12,"id","","The Component's identifier",24,null],[12,"h","","Horizontal sampling factor",24,null],[12,"v","","Vertical sampling factor",24,null],[12,"tq","","The quantization table selector",24,null],[12,"dc_table","","Index to the Huffman DC Table",24,null],[12,"ac_table","","Index to the AC Huffman Table",24,null],[12,"dc_pred","","The dc prediction of the component",24,null],[11,"new","","Create a new encoder that writes its output to ```w```",25,{"inputs":[{"name":"jpegencoder"},{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",25,null],[11,"clone","","",24,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",26,{"inputs":[{"name":"jpegdecoder"},{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",26,null],[11,"read_image","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[0,"gif","image","Decoding of GIF Images",null,null],[3,"GIFDecoder","image::gif","A gif decoder",null,null],[3,"GIFEncoder","","A GIF encoder.",null,null],[4,"ColorMode","","The color mode the encoder will use to encode the image.",null,null],[13,"TrueColor","","Image will be encoded in multiple frames if more than 256 colors are present",27,null],[13,"Indexed","","Number of colors will be reduced",27,null],[11,"new","","Creates a new GIF decoder",28,{"inputs":[{"name":"gifdecoder"},{"name":"r"}],"output":{"name":"gifdecoder"}}],[11,"dimensions","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",28,null],[11,"read_image","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"clone","","",27,{"inputs":[{"name":"colormode"}],"output":{"name":"colormode"}}],[11,"fmt","","",27,{"inputs":[{"name":"colormode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new GIF encoder",29,{"inputs":[{"name":"gifencoder"},{"name":"imagebuffer"},{"name":"option"},{"name":"colormode"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes the image",29,{"inputs":[{"name":"gifencoder"},{"name":"w"}],"output":{"name":"result"}}],[0,"tiff","image","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a PNG decoder",null,null],[4,"ByteOrder","","Byte order of the TIFF file.",null,null],[13,"LittleEndian","","little endian byte order",30,null],[13,"BigEndian","","big endian byte order",30,null],[11,"fmt","","",31,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",31,{"inputs":[{"name":"tiffdecoder"},{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",31,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",31,null],[11,"read_image","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","","",30,{"inputs":[{"name":"byteorder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"byteorder"}],"output":{"name":"byteorder"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",32,{"inputs":[{"name":"tgadecoder"},{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",32,null],[11,"read_image","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","image","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",33,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",35,{"inputs":[{"name":"subimage"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",35,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",35,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",35,null],[11,"bounds","","",35,null],[11,"get_pixel","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i"}}],[11,"put_pixel","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"i"}],"output":null}],[11,"blend_pixel","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"i"}],"output":null}],[11,"get_pixel_mut","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",8,{"inputs":[{"name":"dynamicimage"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",8,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",8,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",8,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"result"}}],[11,"dimensions","","",8,null],[11,"bounds","","",8,null],[11,"get_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"rgb"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"luma"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"rgba"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"lumaa"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_color","","",0,{"inputs":[{"name":"luma"},{"name":"rgba"}],"output":null}],[11,"from_color","","",0,{"inputs":[{"name":"luma"},{"name":"rgb"}],"output":null}],[11,"from_color","","",0,{"inputs":[{"name":"luma"},{"name":"lumaa"}],"output":null}],[11,"from_color","","",1,{"inputs":[{"name":"lumaa"},{"name":"rgba"}],"output":null}],[11,"from_color","","",1,{"inputs":[{"name":"lumaa"},{"name":"rgb"}],"output":null}],[11,"from_color","","",1,{"inputs":[{"name":"lumaa"},{"name":"luma"}],"output":null}],[11,"from_color","","",3,{"inputs":[{"name":"rgba"},{"name":"rgb"}],"output":null}],[11,"from_color","","",3,{"inputs":[{"name":"rgba"},{"name":"lumaa"}],"output":null}],[11,"from_color","","",3,{"inputs":[{"name":"rgba"},{"name":"luma"}],"output":null}],[11,"from_color","","",2,{"inputs":[{"name":"rgb"},{"name":"rgba"}],"output":null}],[11,"from_color","","",2,{"inputs":[{"name":"rgb"},{"name":"lumaa"}],"output":null}],[11,"from_color","","",2,{"inputs":[{"name":"rgb"},{"name":"luma"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",36,null],[11,"width","","The width of this image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",36,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",36,null],[11,"deref_mut","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",36,null],[11,"bounds","","",36,null],[11,"get_pixel","","",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"convert","","",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",37,{"inputs":[{"name":"frames"},{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",38,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",38,{"inputs":[{"name":"frame"},{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",38,{"inputs":[{"name":"frame"},{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",38,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",38,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",38,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",38,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the x offset",38,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",37,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"Primitive","","Primitive trait from old stdlib, added max_value",null,null],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","image::Pixel","The underlying subpixel type.",null,null],[10,"channel_count","image","Returns the number of channels of this pixel type.",39,{"inputs":[{"name":"pixel"}],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",39,null],[10,"channels_mut","","Returns the components as a mutable slice",39,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",39,{"inputs":[{"name":"pixel"}],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",39,{"inputs":[{"name":"pixel"}],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",39,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",39,{"inputs":[{"name":"pixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"}],"output":{"name":"self"}}],[10,"from_slice","","Returns a view into a slice.",39,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",39,null],[10,"to_rgb","","Convert this pixel to RGB",39,{"inputs":[{"name":"pixel"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",39,{"inputs":[{"name":"pixel"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",39,{"inputs":[{"name":"pixel"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",39,{"inputs":[{"name":"pixel"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",39,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",39,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",39,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",39,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",39,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",39,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",39,{"inputs":[{"name":"pixel"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",39,{"inputs":[{"name":"pixel"},{"name":"self"}],"output":null}],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into buf and returns the row index",40,null],[10,"read_image","","Decodes the entire image and return it as a Vector",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",40,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","image::GenericImage","The type of pixel.",null,null],[10,"dimensions","image","The width and height of this image.",41,null],[11,"width","","The width of this image.",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",41,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"put_pixel","","Put a pixel at location (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",41,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"is_animated","","Returns true if the image is animated",40,null],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",40,null],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",40,null],[11,"width","","The width of this image.",41,null],[11,"height","","The height of this image.",41,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",41,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",41,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",41,null],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",41,null],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",41,null],[11,"copy_from","","Copies all of the pixels from another image into this image.",41,null],[11,"sub_image","","Returns a subimage that is a view into this image.",41,null],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",42,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"ImageFormat"],[4,"FilterType"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"Deflater"],[3,"Inflater"],[3,"Adler32"],[3,"Crc32"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[4,"ColorMode"],[3,"GIFDecoder"],[3,"GIFEncoder"],[4,"ByteOrder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"Pixel"],[8,"ImageDecoder"],[8,"GenericImage"],[6,"GrayImage"]]};
searchIndex['enum_primitive'] = {"items":[[0,"","enum_primitive","This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.",null,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[10,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[10,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[10,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[10,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[10,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[10,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[10,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[10,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[10,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[10,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[8,"FromPrimitive"]]};
searchIndex['cgmath'] = {"items":[[0,"","cgmath","Computer graphics-centric math.",null,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",0,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[3,"Matrix2","","A 2 x 2, column major matrix",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Matrix3","","A 3 x 3, column major matrix",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[12,"z","","",3,null],[3,"Matrix4","","A 4 x 4, column major matrix",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[12,"z","","",4,null],[12,"w","","",4,null],[3,"Quaternion","","A [quaternion](https://en.wikipedia.org/wiki/Quaternion) in scalar/vector\nform.",null,null],[12,"s","","",5,null],[12,"v","","",5,null],[3,"Vector2","","",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"Vector3","","",null,null],[12,"x","","",7,null],[12,"y","","",7,null],[12,"z","","",7,null],[3,"Vector4","","",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[12,"z","","",8,null],[12,"w","","",8,null],[3,"Rad","","An angle, in radians",null,null],[12,"s","","",9,null],[3,"Deg","","An angle, in degrees",null,null],[12,"s","","",10,null],[3,"Plane","","A 3-dimensional plane formed from the equation: `A*x + B*y + C*z - D = 0`.",null,null],[12,"n","","",11,null],[12,"d","","",11,null],[3,"Point2","","A point in 2-dimensional space.",null,null],[12,"x","","",12,null],[12,"y","","",12,null],[3,"Point3","","A point in 3-dimensional space.",null,null],[12,"x","","",13,null],[12,"y","","",13,null],[12,"z","","",13,null],[3,"Line","","A generic directed line segment from `origin` to `dest`.",null,null],[12,"origin","","",14,null],[12,"dest","","",14,null],[3,"Ray","","A generic ray starting at `origin` and extending infinitely in\n`direction`.",null,null],[12,"origin","","",15,null],[12,"direction","","",15,null],[3,"Basis2","","A two-dimensional rotation matrix.",null,null],[3,"Basis3","","A three-dimensional rotation matrix.",null,null],[3,"Decomposed","","A generic transformation consisting of a rotation,\ndisplacement vector and scale amount.",null,null],[12,"scale","","",16,null],[12,"rot","","",16,null],[12,"disp","","",16,null],[3,"AffineMatrix3","","A homogeneous transformation matrix.",null,null],[12,"mat","","",17,null],[3,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle.",null,null],[12,"fovy","","",18,null],[12,"aspect","","",18,null],[12,"near","","",18,null],[12,"far","","",18,null],[3,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",19,null],[12,"right","","",19,null],[12,"bottom","","",19,null],[12,"top","","",19,null],[12,"near","","",19,null],[12,"far","","",19,null],[3,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",20,null],[12,"right","","",20,null],[12,"bottom","","",20,null],[12,"top","","",20,null],[12,"near","","",20,null],[12,"far","","",20,null],[3,"Aabb2","","A two-dimensional AABB, aka a rectangle.",null,null],[12,"min","","",21,null],[12,"max","","",21,null],[3,"Aabb3","","A three-dimensional AABB, aka a rectangular prism.",null,null],[12,"min","","",22,null],[12,"max","","",22,null],[3,"Cylinder","","",null,null],[12,"center","","",23,null],[12,"axis","","",23,null],[12,"radius","","",23,null],[3,"Frustum","","",null,null],[12,"left","","",24,null],[12,"right","","",24,null],[12,"bottom","","",24,null],[12,"top","","",24,null],[12,"near","","",24,null],[12,"far","","",24,null],[3,"FrustumPoints","","",null,null],[12,"near_top_left","","",25,null],[12,"near_top_right","","",25,null],[12,"near_bottom_left","","",25,null],[12,"near_bottom_right","","",25,null],[12,"far_top_left","","",25,null],[12,"far_top_right","","",25,null],[12,"far_bottom_left","","",25,null],[12,"far_bottom_right","","",25,null],[3,"Obb2","","",null,null],[12,"center","","",26,null],[12,"axis","","",26,null],[12,"extents","","",26,null],[3,"Obb3","","",null,null],[12,"center","","",27,null],[12,"axis","","",27,null],[12,"extents","","",27,null],[3,"Sphere","","",null,null],[12,"center","","",28,null],[12,"radius","","",28,null],[4,"Relation","","Spatial relation between two objects.",null,null],[13,"In","","Completely inside.",29,null],[13,"Cross","","Crosses the boundary.",29,null],[13,"Out","","Completely outside.",29,null],[5,"dot","","Dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"s"}}],[5,"vec2","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[5,"vec3","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[5,"vec4","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[5,"rad","","Create a new angle, in radians",null,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[5,"deg","","Create a new angle, in degrees",null,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[5,"bisect","","",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"a"}}],[5,"sin","","",null,{"inputs":[{"name":"rad"}],"output":{"name":"s"}}],[5,"cos","","",null,{"inputs":[{"name":"rad"}],"output":{"name":"s"}}],[5,"tan","","",null,{"inputs":[{"name":"rad"}],"output":{"name":"s"}}],[5,"sin_cos","","",null,null],[5,"cot","","",null,{"inputs":[{"name":"rad"}],"output":{"name":"s"}}],[5,"sec","","",null,{"inputs":[{"name":"rad"}],"output":{"name":"s"}}],[5,"csc","","",null,{"inputs":[{"name":"rad"}],"output":{"name":"s"}}],[5,"asin","","",null,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[5,"acos","","",null,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[5,"atan","","",null,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[5,"atan2","","",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"rad"}}],[5,"perspective","","Create a perspective projection matrix.",null,{"inputs":[{"name":"a"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"frustum","","Create a perspective matrix from a view frustrum.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"ortho","","Create an orthographic projection matrix.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"decode","","",2,{"inputs":[{"name":"matrix2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"matrix2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"decode","","",3,{"inputs":[{"name":"matrix3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"matrix3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"decode","","",4,{"inputs":[{"name":"matrix4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"matrix4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"new","","Create a new matrix, providing values for each index.",2,{"inputs":[{"name":"matrix2"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_cols","","Create a new matrix, providing columns.",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"zero","","Create a zero matrix (all zeros).",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_angle","","",2,{"inputs":[{"name":"matrix2"},{"name":"rad"}],"output":{"name":"matrix2"}}],[11,"neg_self","","Negate this `Matrix2` in-place.",2,{"inputs":[{"name":"matrix2"}],"output":null}],[11,"new","","Create a new matrix, providing values for each index.",3,{"inputs":[{"name":"matrix3"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_cols","","Create a new matrix, providing columns.",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"zero","","Create a zero matrix (all zeros).",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_angle_x","","Create a matrix from a rotation around the `x` axis (pitch).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_angle_y","","Create a matrix from a rotation around the `y` axis (yaw).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_angle_z","","Create a matrix from a rotation around the `z` axis (roll).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_euler","","Create a matrix from a set of euler angles.",3,{"inputs":[{"name":"matrix3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_axis_angle","","Create a matrix from a rotation around an arbitrary axis",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_diagonal","","Create a matrix from a non-uniform scale",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"neg_self","","Negate this `Matrix3` in-place.",3,{"inputs":[{"name":"matrix3"}],"output":null}],[11,"new","","Create a new matrix, providing values for each index.",4,{"inputs":[{"name":"matrix4"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_cols","","Create a new matrix, providing columns.",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"zero","","Create a zero matrix (all zeros).",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"from_translation","","Create a translation matrix from a Vector3",4,{"inputs":[{"name":"matrix4"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",4,{"inputs":[{"name":"matrix4"},{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"neg_self","","Negate this `Matrix4` in-place.",4,{"inputs":[{"name":"matrix4"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"neg","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"neg","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"neg","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"zero","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"is_zero","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"zero","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"is_zero","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"zero","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"is_zero","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"mul","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"one","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"one","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"one","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"into_fixed","","",2,null],[11,"as_fixed","","",2,null],[11,"as_mut_fixed","","",2,null],[11,"from_fixed","","",2,null],[11,"from_fixed_ref","","",2,null],[11,"from_fixed_mut","","",2,null],[11,"index","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index_mut","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"row","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"swap_rows","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"map","","",2,{"inputs":[{"name":"matrix2"},{"name":"f"}],"output":{"name":"matrix2"}}],[11,"into_fixed","","",3,null],[11,"as_fixed","","",3,null],[11,"as_mut_fixed","","",3,null],[11,"from_fixed","","",3,null],[11,"from_fixed_ref","","",3,null],[11,"from_fixed_mut","","",3,null],[11,"index","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index_mut","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"row","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"swap_rows","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"map","","",3,{"inputs":[{"name":"matrix3"},{"name":"f"}],"output":{"name":"matrix3"}}],[11,"into_fixed","","",4,null],[11,"as_fixed","","",4,null],[11,"as_mut_fixed","","",4,null],[11,"from_fixed","","",4,null],[11,"from_fixed_ref","","",4,null],[11,"from_fixed_mut","","",4,null],[11,"index","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"index_mut","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"row","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"swap_rows","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"map","","",4,{"inputs":[{"name":"matrix4"},{"name":"f"}],"output":{"name":"matrix4"}}],[11,"mul_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"div_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"rem_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"add_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul_v","","",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"add_self_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":null}],[11,"sub_self_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":null}],[11,"transpose","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"transpose_self","","",2,{"inputs":[{"name":"matrix2"}],"output":null}],[11,"determinant","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"s"}}],[11,"diagonal","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"vector2"}}],[11,"invert","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"option"}}],[11,"is_diagonal","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"mul_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"div_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"rem_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"add_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul_v","","",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"add_self_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":null}],[11,"sub_self_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":null}],[11,"transpose","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"transpose_self","","",3,{"inputs":[{"name":"matrix3"}],"output":null}],[11,"determinant","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"s"}}],[11,"diagonal","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"vector3"}}],[11,"invert","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"option"}}],[11,"is_diagonal","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"mul_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"div_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"rem_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"add_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_v","","",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"div_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"add_self_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":null}],[11,"sub_self_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":null}],[11,"transpose","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"transpose_self","","",4,{"inputs":[{"name":"matrix4"}],"output":null}],[11,"determinant","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"s"}}],[11,"diagonal","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"vector4"}}],[11,"invert","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"option"}}],[11,"is_diagonal","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"s"}],"output":{"name":"bool"}}],[11,"to_matrix3","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 3-dimensional identity matrix.",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix3"}}],[11,"to_matrix4","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix4"}}],[11,"to_matrix4","","Clone the elements of a 3-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix4"}}],[11,"to_quaternion","","Convert the matrix to a quaternion",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"quaternion"}}],[11,"fmt","","",2,{"inputs":[{"name":"matrix2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"matrix3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"matrix4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",2,{"inputs":[{"name":"matrix2"},{"name":"r"}],"output":{"name":"matrix2"}}],[11,"rand","","",3,{"inputs":[{"name":"matrix3"},{"name":"r"}],"output":{"name":"matrix3"}}],[11,"rand","","",4,{"inputs":[{"name":"matrix4"},{"name":"r"}],"output":{"name":"matrix4"}}],[11,"decode","","",5,{"inputs":[{"name":"quaternion"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"quaternion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"map","","",5,{"inputs":[{"name":"quaternion"},{"name":"f"}],"output":{"name":"quaternion"}}],[11,"index","","",5,{"inputs":[{"name":"quaternion"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",5,{"inputs":[{"name":"quaternion"},{"name":"usize"}],"output":{"name":"s"}}],[11,"new","","Construct a new quaternion from one scalar component and three\nimaginary components",5,{"inputs":[{"name":"quaternion"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"from_sv","","Construct a new quaternion from a scalar and a vector",5,{"inputs":[{"name":"quaternion"},{"name":"s"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"zero","","The additive identity, ie: `q = 0 + 0i + 0j + 0i`",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"identity","","The multiplicative identity, ie: `q = 1 + 0i + 0j + 0i`",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_s","","The result of multiplying the quaternion a scalar",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"div_s","","The result of dividing the quaternion a scalar",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"mul_v","","The result of multiplying the quaternion by a vector",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_q","","The sum of this quaternion and `other`",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub_q","","The difference between this quaternion and `other`",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_q","","The result of multipliplying the quaternion by `other`",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_self_s","","Multiply this quaternion by a scalar, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":null}],[11,"div_self_s","","Divide this quaternion by a scalar, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":null}],[11,"add_self_q","","Add this quaternion by another, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"sub_self_q","","Subtract another quaternion from this one, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"mul_self_q","","Multiply this quaternion by another, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"dot","","The dot product of the quaternion and `q`.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"s"}}],[11,"conjugate","","The conjugate of the quaternion.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"magnitude2","","The squared magnitude of the quaternion. This is useful for\nmagnitude comparisons where the exact magnitude does not need to be\ncalculated.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"s"}}],[11,"magnitude","","The magnitude of the quaternion",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"s"}}],[11,"normalize","","Normalize this quaternion, returning the new quaternion.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"bool"}}],[11,"slerp","","Spherical Linear Intoperlation",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"to_euler","","Convert a Quaternion to Eular angles\n    This is a polar singularity aware conversion",5,null],[11,"to_matrix3","","Convert the quaternion to a 3 x 3 rotation matrix",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix3"}}],[11,"to_matrix4","","Convert the quaternion to a 4 x 4 rotation matrix",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix4"}}],[11,"neg","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"fmt","","",5,{"inputs":[{"name":"quaternion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_rot3","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"to_quaternion","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"identity","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"look_at","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"between_vectors","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"rotate_vector","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"concat","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"concat_self","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"invert","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"invert_self","","",5,{"inputs":[{"name":"quaternion"}],"output":null}],[11,"from_axis_angle","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"quaternion"}}],[11,"from_euler","","- [Maths - Conversion Euler to Quaternion]\n(http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm)",5,{"inputs":[{"name":"quaternion"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"quaternion"}}],[11,"rand","","",5,{"inputs":[{"name":"quaternion"},{"name":"r"}],"output":{"name":"quaternion"}}],[11,"decode","","",6,{"inputs":[{"name":"vector2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"vector2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"eq","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",6,{"inputs":[{"name":"vector2"},{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",6,{"inputs":[{"name":"vector2"}],"output":null}],[11,"zero","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"is_zero","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"cast","","Component-wise casting to another type",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"into_fixed","","",6,null],[11,"as_fixed","","",6,null],[11,"as_mut_fixed","","",6,null],[11,"from_fixed","","",6,null],[11,"from_fixed_ref","","",6,null],[11,"from_fixed_mut","","",6,null],[11,"index","","",6,{"inputs":[{"name":"vector2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",6,{"inputs":[{"name":"vector2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",6,{"inputs":[{"name":"vector2"},{"name":"f"}],"output":{"name":"vector2"}}],[11,"from_value","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"sub_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rem_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"add_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"sub_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"mul_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"div_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"rem_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"comp_add","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_mul","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_min","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_max","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"add","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"neg","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rem","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",6,{"inputs":[{"name":"vector2"},{"name":"r"}],"output":{"name":"vector2"}}],[11,"decode","","",7,{"inputs":[{"name":"vector3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"vector3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"eq","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",7,{"inputs":[{"name":"vector3"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",7,{"inputs":[{"name":"vector3"}],"output":null}],[11,"zero","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"is_zero","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cast","","Component-wise casting to another type",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"into_fixed","","",7,null],[11,"as_fixed","","",7,null],[11,"as_mut_fixed","","",7,null],[11,"from_fixed","","",7,null],[11,"from_fixed_ref","","",7,null],[11,"from_fixed_mut","","",7,null],[11,"index","","",7,{"inputs":[{"name":"vector3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vector3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",7,{"inputs":[{"name":"vector3"},{"name":"f"}],"output":{"name":"vector3"}}],[11,"from_value","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"sub_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rem_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"add_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"sub_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"mul_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"div_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"rem_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"comp_add","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_mul","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_min","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_max","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"add","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"neg","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rem","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",7,{"inputs":[{"name":"vector3"},{"name":"r"}],"output":{"name":"vector3"}}],[11,"decode","","",8,{"inputs":[{"name":"vector4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"vector4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"eq","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",8,{"inputs":[{"name":"vector4"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",8,{"inputs":[{"name":"vector4"}],"output":null}],[11,"zero","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"is_zero","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"cast","","Component-wise casting to another type",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"into_fixed","","",8,null],[11,"as_fixed","","",8,null],[11,"as_mut_fixed","","",8,null],[11,"from_fixed","","",8,null],[11,"from_fixed_ref","","",8,null],[11,"from_fixed_mut","","",8,null],[11,"index","","",8,{"inputs":[{"name":"vector4"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",8,{"inputs":[{"name":"vector4"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",8,{"inputs":[{"name":"vector4"},{"name":"f"}],"output":{"name":"vector4"}}],[11,"from_value","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"sub_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rem_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"div_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"add_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"sub_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"mul_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"div_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"rem_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"comp_add","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_mul","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_min","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_max","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"add","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"neg","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rem","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",8,{"inputs":[{"name":"vector4"},{"name":"r"}],"output":{"name":"vector4"}}],[11,"unit_x","","A unit vector in the `x` direction.",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"unit_y","","A unit vector in the `y` direction.",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the\nprovided `z`.",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"unit_x","","A unit vector in the `x` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"unit_y","","A unit vector in the `y` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"unit_z","","A unit vector in the `w` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross","","Returns the cross product of the vector and `other`.",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross_self","","Calculates the cross product of the vector and `other`, then stores the\nresult in `self`.",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the\nprovided `w`.",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector2"}}],[11,"unit_x","","A unit vector in the `x` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_y","","A unit vector in the `y` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_z","","A unit vector in the `z` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_w","","A unit vector in the `w` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector3"}}],[11,"truncate_n","","Create a `Vector3`, dropping the nth element",8,{"inputs":[{"name":"vector4"},{"name":"isize"}],"output":{"name":"vector3"}}],[11,"angle","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"rad"}}],[11,"angle","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rad"}}],[11,"angle","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"rad"}}],[11,"fmt","","",6,{"inputs":[{"name":"vector2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"vector3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"vector4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"rad"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"rad"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"decode","","",10,{"inputs":[{"name":"deg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"deg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"to_rad","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"to_rad","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"rad"}}],[11,"to_deg","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"deg"}}],[11,"to_deg","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"full_turn","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_2","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_3","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_4","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_6","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"full_turn","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_2","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_3","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_4","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_6","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"add","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"add","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"sub","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"sub","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"neg","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"neg","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"is_zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"bool"}}],[11,"zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"is_zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"bool"}}],[11,"mul","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"mul","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"one","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"one","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"from","","",9,{"inputs":[{"name":"rad"},{"name":"a"}],"output":{"name":"rad"}}],[11,"full_turn","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"from","","",10,{"inputs":[{"name":"deg"},{"name":"a"}],"output":{"name":"deg"}}],[11,"full_turn","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"fmt","","",9,{"inputs":[{"name":"rad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"deg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"rad"},{"name":"rad"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"deg"},{"name":"deg"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",9,{"inputs":[{"name":"rad"},{"name":"r"}],"output":{"name":"rad"}}],[11,"rand","","",10,{"inputs":[{"name":"deg"},{"name":"r"}],"output":{"name":"deg"}}],[11,"decode","","",11,{"inputs":[{"name":"plane"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"plane"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"new","","Construct a plane from a normal vector and a scalar distance. The\nplane will be perpendicular to `n`, and `d` units offset from the\norigin.",11,{"inputs":[{"name":"plane"},{"name":"vector3"},{"name":"s"}],"output":{"name":"plane"}}],[11,"from_abcd","","# Arguments",11,{"inputs":[{"name":"plane"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"plane"}}],[11,"from_vector4","","Construct a plane from the components of a four-dimensional vector",11,{"inputs":[{"name":"plane"},{"name":"vector4"}],"output":{"name":"plane"}}],[11,"from_vector4_alt","","Construct a plane from the components of a four-dimensional vector\nAssuming alternative representation: `A*x + B*y + C*z + D = 0`",11,{"inputs":[{"name":"plane"},{"name":"vector4"}],"output":{"name":"plane"}}],[11,"from_points","","Constructs a plane that passes through the the three points `a`, `b` and `c`",11,{"inputs":[{"name":"plane"},{"name":"point3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"option"}}],[11,"from_point_normal","","Construct a plane from a point and a normal vector.\nThe plane will contain the point `p` and be perpendicular to `n`.",11,{"inputs":[{"name":"plane"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"plane"}}],[11,"normalize","","Normalize a plane.",11,{"inputs":[{"name":"plane"}],"output":{"name":"option"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"plane"},{"name":"plane"},{"name":"s"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"point2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"point2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"eq","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"decode","","",13,{"inputs":[{"name":"point3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"point3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"eq","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"point2"},{"name":"s"},{"name":"s"}],"output":{"name":"point2"}}],[11,"new","","",13,{"inputs":[{"name":"point3"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"point3"}}],[11,"from_homogeneous","","",13,{"inputs":[{"name":"point3"},{"name":"vector4"}],"output":{"name":"point3"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"vector4"}}],[11,"into_fixed","","",12,null],[11,"as_fixed","","",12,null],[11,"as_mut_fixed","","",12,null],[11,"from_fixed","","",12,null],[11,"from_fixed_ref","","",12,null],[11,"from_fixed_mut","","",12,null],[11,"index","","",12,{"inputs":[{"name":"point2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",12,{"inputs":[{"name":"point2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",12,{"inputs":[{"name":"point2"},{"name":"f"}],"output":{"name":"point2"}}],[11,"origin","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"from_vec","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"to_vec","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"div_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"rem_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"add_v","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"sub_p","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"add_self_v","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":null}],[11,"dot","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"min","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"max","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"point2"},{"name":"point2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_fixed","","",13,null],[11,"as_fixed","","",13,null],[11,"as_mut_fixed","","",13,null],[11,"from_fixed","","",13,null],[11,"from_fixed_ref","","",13,null],[11,"from_fixed_mut","","",13,null],[11,"index","","",13,{"inputs":[{"name":"point3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",13,{"inputs":[{"name":"point3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",13,{"inputs":[{"name":"point3"},{"name":"f"}],"output":{"name":"point3"}}],[11,"origin","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"from_vec","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"to_vec","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"div_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"rem_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"add_v","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"sub_p","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"add_self_v","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":null}],[11,"dot","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"min","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"max","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"point2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"point3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate_plane","","",13,{"inputs":[{"name":"point3"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"relate_clip_space","","",13,{"inputs":[{"name":"point3"},{"name":"matrix4"}],"output":{"name":"relation"}}],[11,"decode","","",14,{"inputs":[{"name":"line"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"line"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"new","","",14,{"inputs":[{"name":"line"},{"name":"p"},{"name":"p"}],"output":{"name":"line"}}],[11,"decode","","",15,{"inputs":[{"name":"ray"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"ray"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ray"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"ray"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ray"}],"output":{"name":"ray"}}],[11,"new","","",15,{"inputs":[{"name":"ray"},{"name":"p"},{"name":"v"}],"output":{"name":"ray"}}],[11,"decode","","",30,{"inputs":[{"name":"basis2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"basis2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"eq","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"as_matrix2","","Coerce to a `Matrix2`",30,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"to_rot2","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"to_matrix2","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"identity","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"look_at","","",30,{"inputs":[{"name":"basis2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"between_vectors","","",30,{"inputs":[{"name":"basis2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"rotate_vector","","",30,{"inputs":[{"name":"basis2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"concat","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"concat_self","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":null}],[11,"invert","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"invert_self","","",30,{"inputs":[{"name":"basis2"}],"output":null}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_angle","","",30,{"inputs":[{"name":"basis2"},{"name":"rad"}],"output":{"name":"basis2"}}],[11,"decode","","",31,{"inputs":[{"name":"basis3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"basis3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"eq","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",31,{"inputs":[{"name":"basis3"},{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"as_matrix3","","Coerce to a `Matrix3`",31,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"to_rot3","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"to_matrix3","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"to_quaternion","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"quaternion"}}],[11,"identity","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"look_at","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"between_vectors","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"rotate_vector","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"concat","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"concat_self","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":null}],[11,"invert","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"invert_self","","",31,{"inputs":[{"name":"basis3"}],"output":null}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_axis_angle","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_euler","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_x","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_y","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_z","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"decode","","",16,{"inputs":[{"name":"decomposed"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"decomposed"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"identity","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"look_at","","",16,{"inputs":[{"name":"decomposed"},{"name":"p"},{"name":"p"},{"name":"v"}],"output":{"name":"decomposed"}}],[11,"transform_vector","","",16,{"inputs":[{"name":"decomposed"},{"name":"v"}],"output":{"name":"v"}}],[11,"transform_point","","",16,{"inputs":[{"name":"decomposed"},{"name":"p"}],"output":{"name":"p"}}],[11,"concat","","",16,{"inputs":[{"name":"decomposed"},{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"invert","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"option"}}],[11,"to_matrix3","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix3"}}],[11,"to_matrix4","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix4"}}],[11,"fmt","","",16,{"inputs":[{"name":"decomposed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"identity","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"look_at","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"affinematrix3"}}],[11,"transform_vector","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"invert","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"option"}}],[11,"to_matrix4","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"matrix4"}}],[11,"decompose","","",16,null],[11,"decode","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"perspectivefov"}}],[11,"to_perspective","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"perspective"}}],[11,"to_frustum","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"frustum"}}],[11,"to_matrix4","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"matrix4"}}],[11,"decode","","",19,{"inputs":[{"name":"perspective"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"perspective"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"perspective"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"perspective"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"perspective"}}],[11,"to_frustum","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"frustum"}}],[11,"to_matrix4","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"matrix4"}}],[11,"decode","","",20,{"inputs":[{"name":"ortho"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"ortho"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"ortho"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"ortho"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"ortho"}}],[11,"to_frustum","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"frustum"}}],[11,"to_matrix4","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"matrix4"}}],[11,"decode","","",21,{"inputs":[{"name":"aabb2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"aabb2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"aabb2"},{"name":"aabb2"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"aabb2"},{"name":"aabb2"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"aabb2"}}],[11,"new","","Construct a new axis-aligned bounding box from two points.",21,{"inputs":[{"name":"aabb2"},{"name":"point2"},{"name":"point2"}],"output":{"name":"aabb2"}}],[11,"to_corners","","Compute corners.",21,null],[11,"new","","",21,{"inputs":[{"name":"aabb2"},{"name":"point2"},{"name":"point2"}],"output":{"name":"aabb2"}}],[11,"min","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"point2"}}],[11,"max","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"point2"}}],[11,"contains","","",21,{"inputs":[{"name":"aabb2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"aabb2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"aabb3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"aabb3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"aabb3"},{"name":"aabb3"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"aabb3"},{"name":"aabb3"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"aabb3"}}],[11,"new","","Construct a new axis-aligned bounding box from two points.",22,{"inputs":[{"name":"aabb3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"aabb3"}}],[11,"to_corners","","Compute corners.",22,null],[11,"new","","",22,{"inputs":[{"name":"aabb3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"aabb3"}}],[11,"min","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"max","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"contains","","",22,{"inputs":[{"name":"aabb3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"aabb3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate_plane","","",22,{"inputs":[{"name":"aabb3"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"eq","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"relation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"relation"}],"output":{"name":"relation"}}],[11,"decode","","",23,{"inputs":[{"name":"cylinder"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"cylinder"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"cylinder"}],"output":{"name":"cylinder"}}],[11,"decode","","",24,{"inputs":[{"name":"frustum"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"frustum"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"frustum"},{"name":"frustum"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"frustum"},{"name":"frustum"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"frustum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"frustum"}],"output":{"name":"frustum"}}],[11,"new","","Construct a frustum.",24,{"inputs":[{"name":"frustum"},{"name":"plane"},{"name":"plane"},{"name":"plane"},{"name":"plane"},{"name":"plane"},{"name":"plane"}],"output":{"name":"frustum"}}],[11,"from_matrix4","","Extract frustum planes from a projection matrix.",24,{"inputs":[{"name":"frustum"},{"name":"matrix4"}],"output":{"name":"option"}}],[11,"contains","","Find the spatial relation of a bound inside this frustum.",24,{"inputs":[{"name":"frustum"},{"name":"b"}],"output":{"name":"relation"}}],[11,"decode","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"frustumpoints"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"frustumpoints"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"frustumpoints"}],"output":{"name":"frustumpoints"}}],[11,"decode","","",26,{"inputs":[{"name":"obb2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"obb2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"obb2"},{"name":"obb2"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"obb2"},{"name":"obb2"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"obb2"}],"output":{"name":"obb2"}}],[11,"decode","","",27,{"inputs":[{"name":"obb3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"obb3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"obb3"},{"name":"obb3"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"obb3"},{"name":"obb3"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"obb3"}],"output":{"name":"obb3"}}],[11,"decode","","",28,{"inputs":[{"name":"sphere"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"sphere"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"sphere"},{"name":"sphere"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"sphere"},{"name":"sphere"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"sphere"}],"output":{"name":"sphere"}}],[11,"relate_plane","","",28,{"inputs":[{"name":"sphere"},{"name":"plane"}],"output":{"name":"relation"}}],[6,"Line2","","",null,null],[6,"Line3","","",null,null],[6,"Ray2","","",null,null],[6,"Ray3","","",null,null],[8,"Array1","","An array containing elements of type `Element`",null,null],[11,"ptr","","Get the pointer to the first element of the array.",32,{"inputs":[{"name":"array1"}],"output":{"name":"element"}}],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",32,{"inputs":[{"name":"array1"}],"output":{"name":"element"}}],[11,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",32,{"inputs":[{"name":"array1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"replace_elem","","Replace an element in the array.",32,{"inputs":[{"name":"array1"},{"name":"usize"},{"name":"element"}],"output":{"name":"element"}}],[10,"map","","Apply a function to each element.",32,{"inputs":[{"name":"array1"},{"name":"f"}],"output":{"name":"self"}}],[8,"Array2","","A column-major array",null,null],[11,"ptr","","Get the pointer to the first element of the array.",33,{"inputs":[{"name":"array2"}],"output":{"name":"element"}}],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",33,{"inputs":[{"name":"array2"}],"output":{"name":"element"}}],[11,"swap_cols","","Swap two columns of this array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"replace_col","","Replace a column in the array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"column"}],"output":{"name":"column"}}],[10,"row","","Get a row from this array by-value.",33,{"inputs":[{"name":"array2"},{"name":"usize"}],"output":{"name":"row"}}],[10,"swap_rows","","Swap two rows of this array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elems","","Swap the values at index `a` and `b`",33,null],[10,"map","","Apply a function to each column.",33,{"inputs":[{"name":"array2"},{"name":"f"}],"output":{"name":"self"}}],[8,"FixedArray","","Homogeneous arrays of elements that can be converted to and from `[T, ..N]`\narrays.",null,null],[10,"into_fixed","","",34,{"inputs":[{"name":"fixedarray"}],"output":{"name":"v"}}],[10,"as_fixed","","",34,{"inputs":[{"name":"fixedarray"}],"output":{"name":"v"}}],[10,"as_mut_fixed","","",34,{"inputs":[{"name":"fixedarray"}],"output":{"name":"v"}}],[10,"from_fixed","","",34,{"inputs":[{"name":"fixedarray"},{"name":"v"}],"output":{"name":"self"}}],[10,"from_fixed_ref","","",34,{"inputs":[{"name":"fixedarray"},{"name":"v"}],"output":{"name":"self"}}],[10,"from_fixed_mut","","",34,{"inputs":[{"name":"fixedarray"},{"name":"v"}],"output":{"name":"self"}}],[8,"Matrix","","",null,null],[10,"mul_s","","Multiply this matrix by a scalar, returning the new matrix.",35,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"div_s","","Divide this matrix by a scalar, returning the new matrix.",35,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"rem_s","","Take the remainder of this matrix by a scalar, returning the new\nmatrix.",35,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_m","","Add this matrix with another matrix, returning the new metrix.",35,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub_m","","Subtract another matrix from this matrix, returning the new matrix.",35,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":{"name":"self"}}],[10,"mul_v","","Multiplay a vector by this matrix, returning a new vector.",35,{"inputs":[{"name":"matrix"},{"name":"v"}],"output":{"name":"v"}}],[10,"mul_m","","Multiply this matrix by another matrix, returning the new matrix.",35,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":{"name":"self"}}],[10,"mul_self_s","","Multiply this matrix by a scalar, in-place.",35,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":null}],[10,"div_self_s","","Divide this matrix by a scalar, in-place.",35,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":null}],[10,"rem_self_s","","Take the remainder of this matrix, in-place.",35,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":null}],[10,"add_self_m","","Add this matrix with another matrix, in-place.",35,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[10,"sub_self_m","","Subtract another matrix from this matrix, in-place.",35,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[11,"mul_self_m","","Multiply this matrix by another matrix, in-place.",35,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[10,"transpose","","Transpose this matrix, returning a new matrix.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[10,"transpose_self","","Transpose this matrix in-place.",35,{"inputs":[{"name":"matrix"}],"output":null}],[10,"determinant","","Take the determinant of this matrix.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"s"}}],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"v"}}],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"s"}}],[10,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is\nthe identity matrix. Returns `None` if this matrix is not invertible\n(has a determinant of zero).",35,{"inputs":[{"name":"matrix"}],"output":{"name":"option"}}],[11,"invert_self","","Invert this matrix in-place.",35,{"inputs":[{"name":"matrix"}],"output":null}],[11,"is_invertible","","Test if this matrix is invertible.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[10,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of\nthe diagonal is 0.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its\ntranspose.",35,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[8,"ToMatrix2","","Represents types which can be converted to a Matrix2",null,null],[10,"to_matrix2","","Convert this value to a Matrix2",36,{"inputs":[{"name":"tomatrix2"}],"output":{"name":"matrix2"}}],[8,"ToMatrix3","","Represents types which can be converted to a Matrix3",null,null],[10,"to_matrix3","","Convert this value to a Matrix3",37,{"inputs":[{"name":"tomatrix3"}],"output":{"name":"matrix3"}}],[8,"ToMatrix4","","Represents types which can be converted to a Matrix4",null,null],[10,"to_matrix4","","Convert this value to a Matrix4",38,{"inputs":[{"name":"tomatrix4"}],"output":{"name":"matrix4"}}],[8,"ToQuaternion","","Represents types which can be expressed as a quaternion.",null,null],[10,"to_quaternion","","Convert this value to a quaternion.",39,{"inputs":[{"name":"toquaternion"}],"output":{"name":"quaternion"}}],[8,"Vector","","A trait that specifies a range of numeric operations for vectors. Not all\nof these make sense from a linear algebra point of view, but are included\nfor pragmatic reasons.",null,null],[10,"from_value","","Construct a vector from a single value, replicating it.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_s","","Add a scalar to this vector, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"sub_s","","Subtract a scalar from this vector, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"mul_s","","Multiply this vector by a scalar, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"div_s","","Divide this vector by a scalar, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"rem_s","","Take the remainder of this vector by a scalar, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_v","","Add this vector to another, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub_v","","Subtract another vector from this one, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"mul_v","","Multiply this vector by another, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"div_v","","Divide this vector by another, returning a new vector.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"rem_v","","Take the remainder of this vector by another, returning a new scalar.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"add_self_s","","Add a scalar to this vector in-place.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"sub_self_s","","Subtract a scalar from this vector, in-place.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"mul_self_s","","Multiply this vector by a scalar, in-place.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"div_self_s","","Divide this vector by a scalar, in-place.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"rem_self_s","","Take the remainder of this vector by a scalar, in-place.",40,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"add_self_v","","Add another vector to this one, in-place.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"sub_self_v","","Subtract another vector from this one, in-place.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"mul_self_v","","Multiply this matrix by another, in-place.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"div_self_v","","Divide this matrix by anothor, in-place.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"rem_self_v","","Take the remainder of this vector by another, in-place.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"comp_add","","The sum of each component of the vector.",40,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[10,"comp_mul","","The product of each component of the vector.",40,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[11,"dot","","Vector dot product.",40,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"s"}}],[10,"comp_min","","The minimum component of the vector.",40,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[10,"comp_max","","The maximum component of the vector.",40,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[8,"EuclideanVector","","Specifies geometric operations for vectors. This is only implemented for\n2-dimensional and 3-dimensional vectors.",null,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",41,{"inputs":[{"name":"euclideanvector"},{"name":"self"}],"output":{"name":"bool"}}],[11,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",41,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"s"}}],[11,"length","","The norm of the vector.",41,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"s"}}],[10,"angle","","The angle between the vector and `other`, in radians.",41,{"inputs":[{"name":"euclideanvector"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",41,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given `length`.",41,{"inputs":[{"name":"euclideanvector"},{"name":"s"}],"output":{"name":"self"}}],[11,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",41,{"inputs":[{"name":"euclideanvector"},{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"normalize_self","","Normalises the vector to a length of `1`.",41,{"inputs":[{"name":"euclideanvector"}],"output":null}],[11,"normalize_self_to","","Normalizes the vector to `length`.",41,{"inputs":[{"name":"euclideanvector"},{"name":"s"}],"output":null}],[11,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",41,{"inputs":[{"name":"euclideanvector"},{"name":"self"},{"name":"s"}],"output":null}],[8,"ToRad","","Represents types that can be converted to radians.",null,null],[10,"to_rad","","Convert this value to radians.",42,{"inputs":[{"name":"torad"}],"output":{"name":"rad"}}],[8,"ToDeg","","Represents types that can be converted to degrees.",null,null],[10,"to_deg","","Convert this value to degrees.",43,{"inputs":[{"name":"todeg"}],"output":{"name":"deg"}}],[8,"Angle","","Operations on angles.",null,null],[10,"from","","Create a new angle from any other valid angle.",44,{"inputs":[{"name":"angle"},{"name":"a"}],"output":{"name":"self"}}],[11,"neg_self","","Negate this angle, in-place.",44,{"inputs":[{"name":"angle"}],"output":null}],[11,"add_a","","Add this angle with another, returning the new angle.",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub_a","","Subtract another angle from this one, returning the new angle.",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_a","","Divide this angle by another, returning the ratio.",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"s"}}],[11,"rem_a","","Take the remainder of this angle with another.",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"s"}}],[11,"mul_s","","Multiply this angle by a scalar, returning the new angle.",44,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"div_s","","Divide this angle by a scalar, returing the new angle.",44,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",44,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"add_self_a","","Add this angle with another, in-place.",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":null}],[11,"sub_self_a","","Subtract another angle from this one, in-place.",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":null}],[11,"mul_self_s","","Multiply this angle by a scalar, in-place.",44,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"div_self_s","","Divide this angle by a scalar, in-place.",44,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",44,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",44,{"inputs":[{"name":"angle"}],"output":null}],[11,"opposite","","Return the angle rotated by half a turn",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[10,"full_turn","","",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_2","","",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_3","","",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_4","","",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_6","","",44,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"equiv","","",44,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Point","","Specifies the numeric operations for point types.",null,null],[10,"origin","","Create a point at the origin.",45,{"inputs":[{"name":"point"}],"output":{"name":"self"}}],[10,"from_vec","","Create a point from a vector.",45,{"inputs":[{"name":"point"},{"name":"v"}],"output":{"name":"self"}}],[10,"to_vec","","Convert a point to a vector.",45,{"inputs":[{"name":"point"}],"output":{"name":"v"}}],[10,"mul_s","","Multiply each component by a scalar, returning the new point.",45,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"self"}}],[10,"div_s","","Divide each component by a scalar, returning the new point.",45,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"self"}}],[10,"rem_s","","Subtract a scalar from each component, returning the new point.",45,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_v","","Add a vector to this point, returning the new point.",45,{"inputs":[{"name":"point"},{"name":"v"}],"output":{"name":"self"}}],[10,"sub_p","","Subtract another point from this one, returning a new vector.",45,{"inputs":[{"name":"point"},{"name":"self"}],"output":{"name":"v"}}],[10,"mul_self_s","","Multiply each component by a scalar, in-place.",45,{"inputs":[{"name":"point"},{"name":"s"}],"output":null}],[10,"div_self_s","","Divide each component by a scalar, in-place.",45,{"inputs":[{"name":"point"},{"name":"s"}],"output":null}],[10,"rem_self_s","","Take the remainder of each component by a scalar, in-place.",45,{"inputs":[{"name":"point"},{"name":"s"}],"output":null}],[10,"add_self_v","","Add a vector to this point, in-place.",45,{"inputs":[{"name":"point"},{"name":"v"}],"output":null}],[10,"dot","","This is a weird one, but its useful for plane calculations.",45,{"inputs":[{"name":"point"},{"name":"v"}],"output":{"name":"s"}}],[10,"min","","",45,{"inputs":[{"name":"point"},{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",45,{"inputs":[{"name":"point"},{"name":"self"}],"output":{"name":"self"}}],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that\ncreates a circular motion, and preserves at least one point in the space.",null,null],[10,"identity","","Create the identity transform (causes no transformation).",46,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[10,"look_at","","Create a rotation to a given direction with an 'up' vector",46,{"inputs":[{"name":"rotation"},{"name":"v"},{"name":"v"}],"output":{"name":"self"}}],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'.\nBoth given vectors are assumed to have unit length.",46,{"inputs":[{"name":"rotation"},{"name":"v"},{"name":"v"}],"output":{"name":"self"}}],[10,"rotate_vector","","Rotate a vector using this rotation.",46,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"v"}}],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",46,{"inputs":[{"name":"rotation"},{"name":"p"}],"output":{"name":"p"}}],[11,"rotate_ray","","Rotate a ray using this rotation.",46,{"inputs":[{"name":"rotation"},{"name":"ray"}],"output":{"name":"ray"}}],[10,"concat","","Create a new rotation which combines both this rotation, and another.",46,{"inputs":[{"name":"rotation"},{"name":"self"}],"output":{"name":"self"}}],[10,"invert","","Create a new rotation which \"un-does\" this rotation. That is,\n`r.concat(r.invert())` is the identity.",46,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"concat_self","","Modify this rotation in-place by combining it with another.",46,{"inputs":[{"name":"rotation"},{"name":"self"}],"output":null}],[11,"invert_self","","Invert this rotation in-place.",46,{"inputs":[{"name":"rotation"}],"output":null}],[8,"Rotation2","","A two-dimensional rotation.",null,null],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both\nfrom_axis_angle() and from_euler() for 2D space.",47,{"inputs":[{"name":"rotation2"},{"name":"rad"}],"output":{"name":"self"}}],[8,"Rotation3","","A three-dimensional rotation.",null,null],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",48,{"inputs":[{"name":"rotation3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"self"}}],[10,"from_euler","","Create a rotation from a set of euler angles.",48,{"inputs":[{"name":"rotation3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",48,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",48,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",48,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[8,"ToBasis2","","Represents types which can be converted to a rotation matrix.",null,null],[10,"to_rot2","","Convert this type to a rotation matrix.",49,{"inputs":[{"name":"tobasis2"}],"output":{"name":"basis2"}}],[8,"ToBasis3","","Represents types which can be converted to a rotation matrix.",null,null],[10,"to_rot3","","Convert this type to a rotation matrix.",50,{"inputs":[{"name":"tobasis3"}],"output":{"name":"basis3"}}],[8,"Transform","","A trait representing an [affine\ntransformation](https://en.wikipedia.org/wiki/Affine_transformation) that\ncan be applied to points or vectors. An affine transformation is one which",null,null],[10,"identity","","Create an identity transformation. That is, a transformation which\ndoes nothing.",51,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from\n`eye`, using `up` for orientation.",51,{"inputs":[{"name":"transform"},{"name":"p"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[10,"transform_vector","","Transform a vector using this transform.",51,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"transform_point","","Transform a point using this transform.",51,{"inputs":[{"name":"transform"},{"name":"p"}],"output":{"name":"p"}}],[11,"transform_ray","","Transform a ray using this transform.",51,{"inputs":[{"name":"transform"},{"name":"ray"}],"output":{"name":"ray"}}],[11,"transform_as_point","","Transform a vector as a point using this transform.",51,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"concat","","Combine this transform with another, yielding a new transformation\nwhich has the effects of both.",51,{"inputs":[{"name":"transform"},{"name":"self"}],"output":{"name":"self"}}],[10,"invert","","Create a transform that \"un-does\" this one.",51,{"inputs":[{"name":"transform"}],"output":{"name":"option"}}],[11,"concat_self","","Combine this transform with another, in-place.",51,{"inputs":[{"name":"transform"},{"name":"self"}],"output":null}],[11,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",51,{"inputs":[{"name":"transform"}],"output":null}],[8,"Transform2","","",null,null],[8,"Transform3","","",null,null],[8,"ToComponents","","A trait that allows extracting components (rotation, translation, scale)\nfrom an arbitrary transformations",null,null],[10,"decompose","","Extract the (scale, rotation, translation) triple",52,null],[8,"ToComponents2","","",null,null],[8,"ToComponents3","","",null,null],[8,"CompositeTransform","","",null,null],[8,"CompositeTransform2","","",null,null],[8,"CompositeTransform3","","",null,null],[8,"Projection","","",null,null],[10,"to_frustum","","",53,{"inputs":[{"name":"projection"}],"output":{"name":"frustum"}}],[8,"Aabb","","",null,null],[10,"new","","Create a new AABB using two points as opposing corners.",54,{"inputs":[{"name":"aabb"},{"name":"p"},{"name":"p"}],"output":{"name":"self"}}],[10,"min","","Return a shared reference to the point nearest to (-inf, -inf).",54,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[10,"max","","Return a shared reference to the point nearest to (inf, inf).",54,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[11,"dim","","Return the dimensions of this AABB.",54,{"inputs":[{"name":"aabb"}],"output":{"name":"v"}}],[11,"volume","","Return the volume this AABB encloses.",54,{"inputs":[{"name":"aabb"}],"output":{"name":"s"}}],[11,"center","","Return the center point of this AABB.",54,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[10,"contains","","Tests whether a point is cointained in the box, inclusive for min corner\nand exclusive for the max corner.",54,{"inputs":[{"name":"aabb"},{"name":"p"}],"output":{"name":"bool"}}],[11,"grow","","Returns a new AABB that is grown to include the given point.",54,{"inputs":[{"name":"aabb"},{"name":"p"}],"output":{"name":"self"}}],[11,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",54,{"inputs":[{"name":"aabb"},{"name":"v"}],"output":{"name":"self"}}],[11,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",54,{"inputs":[{"name":"aabb"},{"name":"s"}],"output":{"name":"self"}}],[11,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",54,{"inputs":[{"name":"aabb"},{"name":"v"}],"output":{"name":"self"}}],[8,"Bound","","Generic bound.",null,null],[10,"relate_plane","","Classify the spatial relation with a plane.",55,{"inputs":[{"name":"bound"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"relate_clip_space","","Classify the relation with a projection matrix.",55,{"inputs":[{"name":"bound"},{"name":"matrix4"}],"output":{"name":"relation"}}],[8,"Intersect","","",null,null],[10,"intersection","","",56,{"inputs":[{"name":"intersect"}],"output":{"name":"result"}}],[8,"ApproxEq","","",null,null],[11,"approx_epsilon","","",57,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"t"}}],[11,"approx_eq","","",57,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[10,"approx_eq_eps","","",57,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"PartialOrd","","A trait providing a [partial ordering](http://mathworld.wolfram.com/PartialOrder.html).",null,null],[10,"partial_min","","",58,{"inputs":[{"name":"partialord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_max","","",58,{"inputs":[{"name":"partialord"},{"name":"self"}],"output":{"name":"self"}}],[8,"BaseNum","","Base numeric types with partial ordering",null,null],[8,"BaseInt","","Base integer types",null,null],[8,"BaseFloat","","Base floating point types",null,null],[11,"decode","","",2,{"inputs":[{"name":"matrix2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"matrix2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"decode","","",3,{"inputs":[{"name":"matrix3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"matrix3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"decode","","",4,{"inputs":[{"name":"matrix4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"matrix4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"new","","Create a new matrix, providing values for each index.",2,{"inputs":[{"name":"matrix2"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_cols","","Create a new matrix, providing columns.",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"zero","","Create a zero matrix (all zeros).",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_angle","","",2,{"inputs":[{"name":"matrix2"},{"name":"rad"}],"output":{"name":"matrix2"}}],[11,"neg_self","","Negate this `Matrix2` in-place.",2,{"inputs":[{"name":"matrix2"}],"output":null}],[11,"new","","Create a new matrix, providing values for each index.",3,{"inputs":[{"name":"matrix3"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_cols","","Create a new matrix, providing columns.",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"zero","","Create a zero matrix (all zeros).",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_angle_x","","Create a matrix from a rotation around the `x` axis (pitch).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_angle_y","","Create a matrix from a rotation around the `y` axis (yaw).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_angle_z","","Create a matrix from a rotation around the `z` axis (roll).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_euler","","Create a matrix from a set of euler angles.",3,{"inputs":[{"name":"matrix3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_axis_angle","","Create a matrix from a rotation around an arbitrary axis",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_diagonal","","Create a matrix from a non-uniform scale",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"neg_self","","Negate this `Matrix3` in-place.",3,{"inputs":[{"name":"matrix3"}],"output":null}],[11,"new","","Create a new matrix, providing values for each index.",4,{"inputs":[{"name":"matrix4"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_cols","","Create a new matrix, providing columns.",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"zero","","Create a zero matrix (all zeros).",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"from_translation","","Create a translation matrix from a Vector3",4,{"inputs":[{"name":"matrix4"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",4,{"inputs":[{"name":"matrix4"},{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"neg_self","","Negate this `Matrix4` in-place.",4,{"inputs":[{"name":"matrix4"}],"output":null}],[6,"Output","","",null,null],[11,"add","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[6,"Output","","",null,null],[11,"add","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[6,"Output","","",null,null],[11,"add","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[6,"Output","","",null,null],[11,"sub","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[6,"Output","","",null,null],[11,"sub","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[6,"Output","","",null,null],[11,"sub","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[6,"Output","","",null,null],[11,"neg","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[6,"Output","","",null,null],[11,"neg","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[6,"Output","","",null,null],[11,"neg","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"zero","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"is_zero","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"zero","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"is_zero","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"zero","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"is_zero","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[6,"Output","","",null,null],[11,"mul","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[6,"Output","","",null,null],[11,"mul","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[6,"Output","","",null,null],[11,"mul","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"one","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"one","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"one","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"into_fixed","","",2,null],[11,"as_fixed","","",2,null],[11,"as_mut_fixed","","",2,null],[11,"from_fixed","","",2,null],[11,"from_fixed_ref","","",2,null],[11,"from_fixed_mut","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index_mut","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"row","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"swap_rows","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"map","","",2,{"inputs":[{"name":"matrix2"},{"name":"f"}],"output":{"name":"matrix2"}}],[11,"into_fixed","","",3,null],[11,"as_fixed","","",3,null],[11,"as_mut_fixed","","",3,null],[11,"from_fixed","","",3,null],[11,"from_fixed_ref","","",3,null],[11,"from_fixed_mut","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index_mut","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"row","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"swap_rows","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"map","","",3,{"inputs":[{"name":"matrix3"},{"name":"f"}],"output":{"name":"matrix3"}}],[11,"into_fixed","","",4,null],[11,"as_fixed","","",4,null],[11,"as_mut_fixed","","",4,null],[11,"from_fixed","","",4,null],[11,"from_fixed_ref","","",4,null],[11,"from_fixed_mut","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"index_mut","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"row","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"swap_rows","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"map","","",4,{"inputs":[{"name":"matrix4"},{"name":"f"}],"output":{"name":"matrix4"}}],[11,"mul_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"div_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"rem_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"add_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul_v","","",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"add_self_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":null}],[11,"sub_self_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":null}],[11,"transpose","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"transpose_self","","",2,{"inputs":[{"name":"matrix2"}],"output":null}],[11,"determinant","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"s"}}],[11,"diagonal","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"vector2"}}],[11,"invert","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"option"}}],[11,"is_diagonal","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"mul_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"div_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"rem_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"add_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul_v","","",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"add_self_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":null}],[11,"sub_self_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":null}],[11,"transpose","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"transpose_self","","",3,{"inputs":[{"name":"matrix3"}],"output":null}],[11,"determinant","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"s"}}],[11,"diagonal","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"vector3"}}],[11,"invert","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"option"}}],[11,"is_diagonal","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"mul_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"div_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"rem_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"add_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_v","","",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"div_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"add_self_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":null}],[11,"sub_self_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":null}],[11,"transpose","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"transpose_self","","",4,{"inputs":[{"name":"matrix4"}],"output":null}],[11,"determinant","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"s"}}],[11,"diagonal","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"vector4"}}],[11,"invert","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"option"}}],[11,"is_diagonal","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"s"}],"output":{"name":"bool"}}],[11,"to_matrix3","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 3-dimensional identity matrix.",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix3"}}],[11,"to_matrix4","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix4"}}],[11,"to_matrix4","","Clone the elements of a 3-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix4"}}],[11,"to_quaternion","","Convert the matrix to a quaternion",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"quaternion"}}],[11,"fmt","","",2,{"inputs":[{"name":"matrix2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"matrix3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"matrix4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",2,{"inputs":[{"name":"matrix2"},{"name":"r"}],"output":{"name":"matrix2"}}],[11,"rand","","",3,{"inputs":[{"name":"matrix3"},{"name":"r"}],"output":{"name":"matrix3"}}],[11,"rand","","",4,{"inputs":[{"name":"matrix4"},{"name":"r"}],"output":{"name":"matrix4"}}],[11,"decode","","",5,{"inputs":[{"name":"quaternion"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"quaternion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"map","","",5,{"inputs":[{"name":"quaternion"},{"name":"f"}],"output":{"name":"quaternion"}}],[6,"Output","","",null,null],[11,"index","","",5,{"inputs":[{"name":"quaternion"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",5,{"inputs":[{"name":"quaternion"},{"name":"usize"}],"output":{"name":"s"}}],[11,"new","","Construct a new quaternion from one scalar component and three\nimaginary components",5,{"inputs":[{"name":"quaternion"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"from_sv","","Construct a new quaternion from a scalar and a vector",5,{"inputs":[{"name":"quaternion"},{"name":"s"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"zero","","The additive identity, ie: `q = 0 + 0i + 0j + 0i`",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"identity","","The multiplicative identity, ie: `q = 1 + 0i + 0j + 0i`",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_s","","The result of multiplying the quaternion a scalar",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"div_s","","The result of dividing the quaternion a scalar",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"mul_v","","The result of multiplying the quaternion by a vector",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_q","","The sum of this quaternion and `other`",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub_q","","The difference between this quaternion and `other`",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_q","","The result of multipliplying the quaternion by `other`",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_self_s","","Multiply this quaternion by a scalar, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":null}],[11,"div_self_s","","Divide this quaternion by a scalar, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"s"}],"output":null}],[11,"add_self_q","","Add this quaternion by another, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"sub_self_q","","Subtract another quaternion from this one, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"mul_self_q","","Multiply this quaternion by another, in-place.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"dot","","The dot product of the quaternion and `q`.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"s"}}],[11,"conjugate","","The conjugate of the quaternion.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"magnitude2","","The squared magnitude of the quaternion. This is useful for\nmagnitude comparisons where the exact magnitude does not need to be\ncalculated.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"s"}}],[11,"magnitude","","The magnitude of the quaternion",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"s"}}],[11,"normalize","","Normalize this quaternion, returning the new quaternion.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"bool"}}],[11,"slerp","","Spherical Linear Intoperlation",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"to_euler","","Convert a Quaternion to Eular angles\n    This is a polar singularity aware conversion",5,null],[11,"to_matrix3","","Convert the quaternion to a 3 x 3 rotation matrix",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix3"}}],[11,"to_matrix4","","Convert the quaternion to a 4 x 4 rotation matrix",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix4"}}],[6,"Output","","",null,null],[11,"neg","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"fmt","","",5,{"inputs":[{"name":"quaternion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_rot3","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"to_quaternion","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"identity","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"look_at","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"between_vectors","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"rotate_vector","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"concat","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"concat_self","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"invert","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"invert_self","","",5,{"inputs":[{"name":"quaternion"}],"output":null}],[11,"from_axis_angle","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"quaternion"}}],[11,"from_euler","","- [Maths - Conversion Euler to Quaternion]\n(http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm)",5,{"inputs":[{"name":"quaternion"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"quaternion"}}],[11,"rand","","",5,{"inputs":[{"name":"quaternion"},{"name":"r"}],"output":{"name":"quaternion"}}],[11,"decode","","",6,{"inputs":[{"name":"vector2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"vector2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"eq","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",6,{"inputs":[{"name":"vector2"},{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",6,{"inputs":[{"name":"vector2"}],"output":null}],[11,"zero","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"is_zero","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"cast","","Component-wise casting to another type",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"into_fixed","","",6,null],[11,"as_fixed","","",6,null],[11,"as_mut_fixed","","",6,null],[11,"from_fixed","","",6,null],[11,"from_fixed_ref","","",6,null],[11,"from_fixed_mut","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,{"inputs":[{"name":"vector2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",6,{"inputs":[{"name":"vector2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",6,{"inputs":[{"name":"vector2"},{"name":"f"}],"output":{"name":"vector2"}}],[11,"from_value","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"sub_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rem_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"add_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"sub_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"mul_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"div_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"rem_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"comp_add","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_mul","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_min","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_max","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[6,"Output","","",null,null],[11,"add","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[6,"Output","","",null,null],[11,"sub","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[6,"Output","","",null,null],[11,"neg","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[6,"Output","","",null,null],[11,"mul","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[6,"Output","","",null,null],[11,"div","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[6,"Output","","",null,null],[11,"rem","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",6,{"inputs":[{"name":"vector2"},{"name":"r"}],"output":{"name":"vector2"}}],[11,"decode","","",7,{"inputs":[{"name":"vector3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"vector3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"eq","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",7,{"inputs":[{"name":"vector3"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",7,{"inputs":[{"name":"vector3"}],"output":null}],[11,"zero","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"is_zero","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cast","","Component-wise casting to another type",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"into_fixed","","",7,null],[11,"as_fixed","","",7,null],[11,"as_mut_fixed","","",7,null],[11,"from_fixed","","",7,null],[11,"from_fixed_ref","","",7,null],[11,"from_fixed_mut","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,{"inputs":[{"name":"vector3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vector3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",7,{"inputs":[{"name":"vector3"},{"name":"f"}],"output":{"name":"vector3"}}],[11,"from_value","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"sub_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rem_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"add_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"sub_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"mul_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"div_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"rem_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"comp_add","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_mul","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_min","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_max","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[6,"Output","","",null,null],[11,"add","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[6,"Output","","",null,null],[11,"sub","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[6,"Output","","",null,null],[11,"neg","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[6,"Output","","",null,null],[11,"mul","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[6,"Output","","",null,null],[11,"div","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[6,"Output","","",null,null],[11,"rem","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",7,{"inputs":[{"name":"vector3"},{"name":"r"}],"output":{"name":"vector3"}}],[11,"decode","","",8,{"inputs":[{"name":"vector4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"vector4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"eq","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",8,{"inputs":[{"name":"vector4"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",8,{"inputs":[{"name":"vector4"}],"output":null}],[11,"zero","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"is_zero","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"cast","","Component-wise casting to another type",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"into_fixed","","",8,null],[11,"as_fixed","","",8,null],[11,"as_mut_fixed","","",8,null],[11,"from_fixed","","",8,null],[11,"from_fixed_ref","","",8,null],[11,"from_fixed_mut","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,{"inputs":[{"name":"vector4"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",8,{"inputs":[{"name":"vector4"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",8,{"inputs":[{"name":"vector4"},{"name":"f"}],"output":{"name":"vector4"}}],[11,"from_value","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"sub_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rem_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"div_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"add_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"sub_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"mul_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"div_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"rem_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"comp_add","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_mul","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_min","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_max","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[6,"Output","","",null,null],[11,"add","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[6,"Output","","",null,null],[11,"sub","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[6,"Output","","",null,null],[11,"neg","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[6,"Output","","",null,null],[11,"mul","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[6,"Output","","",null,null],[11,"div","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[6,"Output","","",null,null],[11,"rem","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",8,{"inputs":[{"name":"vector4"},{"name":"r"}],"output":{"name":"vector4"}}],[11,"unit_x","","A unit vector in the `x` direction.",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"unit_y","","A unit vector in the `y` direction.",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the\nprovided `z`.",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"unit_x","","A unit vector in the `x` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"unit_y","","A unit vector in the `y` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"unit_z","","A unit vector in the `w` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross","","Returns the cross product of the vector and `other`.",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross_self","","Calculates the cross product of the vector and `other`, then stores the\nresult in `self`.",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the\nprovided `w`.",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector2"}}],[11,"unit_x","","A unit vector in the `x` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_y","","A unit vector in the `y` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_z","","A unit vector in the `z` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_w","","A unit vector in the `w` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector3"}}],[11,"truncate_n","","Create a `Vector3`, dropping the nth element",8,{"inputs":[{"name":"vector4"},{"name":"isize"}],"output":{"name":"vector3"}}],[11,"angle","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"rad"}}],[11,"angle","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rad"}}],[11,"angle","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"rad"}}],[11,"fmt","","",6,{"inputs":[{"name":"vector2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"vector3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"vector4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"rad"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"rad"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"decode","","",10,{"inputs":[{"name":"deg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"deg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"to_rad","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"to_rad","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"rad"}}],[11,"to_deg","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"deg"}}],[11,"to_deg","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"full_turn","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_2","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_3","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_4","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"turn_div_6","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"full_turn","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_2","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_3","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_4","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"turn_div_6","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[6,"Output","","",null,null],[11,"add","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"rad"}}],[6,"Output","","",null,null],[11,"add","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"deg"}}],[6,"Output","","",null,null],[11,"sub","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"rad"}}],[6,"Output","","",null,null],[11,"sub","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"deg"}}],[6,"Output","","",null,null],[11,"neg","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[6,"Output","","",null,null],[11,"neg","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"is_zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"bool"}}],[11,"zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"is_zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"bool"}}],[6,"Output","","",null,null],[11,"mul","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"rad"}}],[6,"Output","","",null,null],[11,"mul","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"one","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"one","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"from","","",9,{"inputs":[{"name":"rad"},{"name":"a"}],"output":{"name":"rad"}}],[11,"full_turn","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"from","","",10,{"inputs":[{"name":"deg"},{"name":"a"}],"output":{"name":"deg"}}],[11,"full_turn","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"fmt","","",9,{"inputs":[{"name":"rad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"deg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"rad"},{"name":"rad"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"deg"},{"name":"deg"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",9,{"inputs":[{"name":"rad"},{"name":"r"}],"output":{"name":"rad"}}],[11,"rand","","",10,{"inputs":[{"name":"deg"},{"name":"r"}],"output":{"name":"deg"}}],[11,"decode","","",12,{"inputs":[{"name":"point2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"point2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"eq","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"decode","","",13,{"inputs":[{"name":"point3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"point3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"eq","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"point2"},{"name":"s"},{"name":"s"}],"output":{"name":"point2"}}],[11,"new","","",13,{"inputs":[{"name":"point3"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"point3"}}],[11,"from_homogeneous","","",13,{"inputs":[{"name":"point3"},{"name":"vector4"}],"output":{"name":"point3"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"vector4"}}],[11,"into_fixed","","",12,null],[11,"as_fixed","","",12,null],[11,"as_mut_fixed","","",12,null],[11,"from_fixed","","",12,null],[11,"from_fixed_ref","","",12,null],[11,"from_fixed_mut","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,{"inputs":[{"name":"point2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",12,{"inputs":[{"name":"point2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",12,{"inputs":[{"name":"point2"},{"name":"f"}],"output":{"name":"point2"}}],[11,"origin","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"from_vec","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"to_vec","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"div_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"rem_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"add_v","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"sub_p","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"add_self_v","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":null}],[11,"dot","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"min","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"max","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"point2"},{"name":"point2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_fixed","","",13,null],[11,"as_fixed","","",13,null],[11,"as_mut_fixed","","",13,null],[11,"from_fixed","","",13,null],[11,"from_fixed_ref","","",13,null],[11,"from_fixed_mut","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,{"inputs":[{"name":"point3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",13,{"inputs":[{"name":"point3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"map","","",13,{"inputs":[{"name":"point3"},{"name":"f"}],"output":{"name":"point3"}}],[11,"origin","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"from_vec","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"to_vec","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"div_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"rem_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"add_v","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"sub_p","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"add_self_v","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":null}],[11,"dot","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"min","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"max","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"point2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"point3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate_plane","","",13,{"inputs":[{"name":"point3"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"relate_clip_space","","",13,{"inputs":[{"name":"point3"},{"name":"matrix4"}],"output":{"name":"relation"}}],[11,"decode","","",14,{"inputs":[{"name":"line"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"line"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"new","","",14,{"inputs":[{"name":"line"},{"name":"p"},{"name":"p"}],"output":{"name":"line"}}],[11,"decode","","",15,{"inputs":[{"name":"ray"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"ray"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ray"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"ray"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ray"}],"output":{"name":"ray"}}],[11,"new","","",15,{"inputs":[{"name":"ray"},{"name":"p"},{"name":"v"}],"output":{"name":"ray"}}],[11,"decode","","",30,{"inputs":[{"name":"basis2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"basis2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"eq","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"as_matrix2","","Coerce to a `Matrix2`",30,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"to_rot2","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"to_matrix2","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"identity","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"look_at","","",30,{"inputs":[{"name":"basis2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"between_vectors","","",30,{"inputs":[{"name":"basis2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"rotate_vector","","",30,{"inputs":[{"name":"basis2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"concat","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"concat_self","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":null}],[11,"invert","","",30,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"invert_self","","",30,{"inputs":[{"name":"basis2"}],"output":null}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"basis2"},{"name":"basis2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_angle","","",30,{"inputs":[{"name":"basis2"},{"name":"rad"}],"output":{"name":"basis2"}}],[11,"decode","","",31,{"inputs":[{"name":"basis3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"basis3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"eq","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",31,{"inputs":[{"name":"basis3"},{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"as_matrix3","","Coerce to a `Matrix3`",31,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"to_rot3","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"to_matrix3","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"to_quaternion","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"quaternion"}}],[11,"identity","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"look_at","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"between_vectors","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"rotate_vector","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"concat","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"concat_self","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":null}],[11,"invert","","",31,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"invert_self","","",31,{"inputs":[{"name":"basis3"}],"output":null}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"basis3"},{"name":"basis3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_axis_angle","","",31,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_euler","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_x","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_y","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_z","","",31,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"decode","","",16,{"inputs":[{"name":"decomposed"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"decomposed"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"identity","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"look_at","","",16,{"inputs":[{"name":"decomposed"},{"name":"p"},{"name":"p"},{"name":"v"}],"output":{"name":"decomposed"}}],[11,"transform_vector","","",16,{"inputs":[{"name":"decomposed"},{"name":"v"}],"output":{"name":"v"}}],[11,"transform_point","","",16,{"inputs":[{"name":"decomposed"},{"name":"p"}],"output":{"name":"p"}}],[11,"concat","","",16,{"inputs":[{"name":"decomposed"},{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"invert","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"option"}}],[11,"to_matrix3","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix3"}}],[11,"to_matrix4","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix4"}}],[11,"fmt","","",16,{"inputs":[{"name":"decomposed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"identity","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"look_at","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"affinematrix3"}}],[11,"transform_vector","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"invert","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"option"}}],[11,"to_matrix4","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"matrix4"}}],[11,"decompose","","",16,null],[11,"decode","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"perspectivefov"}}],[11,"to_perspective","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"perspective"}}],[11,"to_frustum","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"frustum"}}],[11,"to_matrix4","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"matrix4"}}],[11,"decode","","",19,{"inputs":[{"name":"perspective"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"perspective"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"perspective"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"perspective"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"perspective"}}],[11,"to_frustum","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"frustum"}}],[11,"to_matrix4","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"matrix4"}}],[11,"decode","","",20,{"inputs":[{"name":"ortho"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"ortho"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"ortho"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"ortho"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"ortho"}}],[11,"to_frustum","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"frustum"}}],[11,"to_matrix4","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"matrix4"}}],[11,"decode","","",21,{"inputs":[{"name":"aabb2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"aabb2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"aabb2"},{"name":"aabb2"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"aabb2"},{"name":"aabb2"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"aabb2"}}],[11,"new","","Construct a new axis-aligned bounding box from two points.",21,{"inputs":[{"name":"aabb2"},{"name":"point2"},{"name":"point2"}],"output":{"name":"aabb2"}}],[11,"to_corners","","Compute corners.",21,null],[11,"new","","",21,{"inputs":[{"name":"aabb2"},{"name":"point2"},{"name":"point2"}],"output":{"name":"aabb2"}}],[11,"min","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"point2"}}],[11,"max","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"point2"}}],[11,"contains","","",21,{"inputs":[{"name":"aabb2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"aabb2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"aabb3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"aabb3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"aabb3"},{"name":"aabb3"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"aabb3"},{"name":"aabb3"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"aabb3"}}],[11,"new","","Construct a new axis-aligned bounding box from two points.",22,{"inputs":[{"name":"aabb3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"aabb3"}}],[11,"to_corners","","Compute corners.",22,null],[11,"new","","",22,{"inputs":[{"name":"aabb3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"aabb3"}}],[11,"min","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"max","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"contains","","",22,{"inputs":[{"name":"aabb3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"aabb3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate_plane","","",22,{"inputs":[{"name":"aabb3"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"eq","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"relation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"relation"}],"output":{"name":"relation"}}],[11,"decode","","",26,{"inputs":[{"name":"obb2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"obb2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"obb2"},{"name":"obb2"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"obb2"},{"name":"obb2"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"obb2"}],"output":{"name":"obb2"}}],[11,"decode","","",27,{"inputs":[{"name":"obb3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"obb3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"obb3"},{"name":"obb3"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"obb3"},{"name":"obb3"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"obb3"}],"output":{"name":"obb3"}}],[14,"assert_approx_eq_eps!","","",null,null],[14,"assert_approx_eq!","","",null,null],[11,"ptr","","Get the pointer to the first element of the array.",32,null],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",32,null],[11,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",32,null],[11,"replace_elem","","Replace an element in the array.",32,null],[11,"ptr","","Get the pointer to the first element of the array.",33,null],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",33,null],[11,"swap_cols","","Swap two columns of this array.",33,null],[11,"replace_col","","Replace a column in the array.",33,null],[11,"swap_elems","","Swap the values at index `a` and `b`",33,null],[11,"mul_self_m","","Multiply this matrix by another matrix, in-place.",35,null],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",35,null],[11,"invert_self","","Invert this matrix in-place.",35,null],[11,"is_invertible","","Test if this matrix is invertible.",35,null],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",35,null],[11,"dot","","Vector dot product.",40,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",41,null],[11,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",41,null],[11,"length","","The norm of the vector.",41,null],[11,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",41,null],[11,"normalize_to","","Returns a vector with the same direction and a given `length`.",41,null],[11,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",41,null],[11,"normalize_self","","Normalises the vector to a length of `1`.",41,null],[11,"normalize_self_to","","Normalizes the vector to `length`.",41,null],[11,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",41,null],[11,"neg_self","","Negate this angle, in-place.",44,null],[11,"add_a","","Add this angle with another, returning the new angle.",44,null],[11,"sub_a","","Subtract another angle from this one, returning the new angle.",44,null],[11,"div_a","","Divide this angle by another, returning the ratio.",44,null],[11,"rem_a","","Take the remainder of this angle with another.",44,null],[11,"mul_s","","Multiply this angle by a scalar, returning the new angle.",44,null],[11,"div_s","","Divide this angle by a scalar, returing the new angle.",44,null],[11,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",44,null],[11,"add_self_a","","Add this angle with another, in-place.",44,null],[11,"sub_self_a","","Subtract another angle from this one, in-place.",44,null],[11,"mul_self_s","","Multiply this angle by a scalar, in-place.",44,null],[11,"div_self_s","","Divide this angle by a scalar, in-place.",44,null],[11,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",44,null],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",44,null],[11,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",44,null],[11,"opposite","","Return the angle rotated by half a turn",44,null],[11,"bisect","","Returns the interior bisector of the two angles",44,null],[11,"turn_div_2","","",44,null],[11,"turn_div_3","","",44,null],[11,"turn_div_4","","",44,null],[11,"turn_div_6","","",44,null],[11,"equiv","","",44,null],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",46,null],[11,"rotate_ray","","Rotate a ray using this rotation.",46,null],[11,"concat_self","","Modify this rotation in-place by combining it with another.",46,null],[11,"invert_self","","Invert this rotation in-place.",46,null],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",48,null],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",48,null],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",48,null],[11,"transform_ray","","Transform a ray using this transform.",51,null],[11,"transform_as_point","","Transform a vector as a point using this transform.",51,null],[11,"concat_self","","Combine this transform with another, in-place.",51,null],[11,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",51,null],[11,"dim","","Return the dimensions of this AABB.",54,null],[11,"volume","","Return the volume this AABB encloses.",54,null],[11,"center","","Return the center point of this AABB.",54,null],[11,"grow","","Returns a new AABB that is grown to include the given point.",54,null],[11,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",54,null],[11,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",54,null],[11,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",54,null],[11,"relate_clip_space","","Classify the relation with a projection matrix.",55,null],[11,"approx_epsilon","","",57,null],[11,"approx_eq","","",57,null]],"paths":[[8,"One"],[8,"Zero"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Quaternion"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Rad"],[3,"Deg"],[3,"Plane"],[3,"Point2"],[3,"Point3"],[3,"Line"],[3,"Ray"],[3,"Decomposed"],[3,"AffineMatrix3"],[3,"PerspectiveFov"],[3,"Perspective"],[3,"Ortho"],[3,"Aabb2"],[3,"Aabb3"],[3,"Cylinder"],[3,"Frustum"],[3,"FrustumPoints"],[3,"Obb2"],[3,"Obb3"],[3,"Sphere"],[4,"Relation"],[3,"Basis2"],[3,"Basis3"],[8,"Array1"],[8,"Array2"],[8,"FixedArray"],[8,"Matrix"],[8,"ToMatrix2"],[8,"ToMatrix3"],[8,"ToMatrix4"],[8,"ToQuaternion"],[8,"Vector"],[8,"EuclideanVector"],[8,"ToRad"],[8,"ToDeg"],[8,"Angle"],[8,"Point"],[8,"Rotation"],[8,"Rotation2"],[8,"Rotation3"],[8,"ToBasis2"],[8,"ToBasis3"],[8,"Transform"],[8,"ToComponents"],[8,"Projection"],[8,"Aabb"],[8,"Bound"],[8,"Intersect"],[8,"ApproxEq"],[8,"PartialOrd"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[6,"FromStrRadixErr","","",null,null],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[6,"Output","","",null,null],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[6,"Err","","",null,null],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[6,"FromStrRadixErr","","",null,null],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[6,"Output","","",null,null],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[6,"Item","","",null,null],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[6,"Item","","",null,null],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[6,"Item","","",null,null],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[6,"Item","","",null,null],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[5,"cast","num::traits","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","num::traits::Num","Parse error for `from_str_radix`",null,null],[10,"from_str_radix","num::traits","Convert from a string and radix <= 36.",14,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",15,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",15,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",16,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",17,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",17,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",17,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",17,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",17,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",18,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",18,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",19,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",19,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",20,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",21,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",22,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",23,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",24,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",24,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",24,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",24,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",24,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",24,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",24,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",24,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",27,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",28,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",28,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",28,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",28,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",28,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",29,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",29,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",29,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",29,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",29,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[6,"Output","","",null,null],[11,"mul","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[11,"zero","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"FromStrRadixErr","","",null,null],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",29,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",29,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",29,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['nalgebra'] = {"items":[[0,"","nalgebra","# nalgebra",null,null],[3,"Identity","","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMat","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DVec","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Iso2","","Two dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Iso3","","Three dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Iso4","","Four dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",3,null],[12,"translation","","The translation applicable by this isometry.",3,null],[3,"Mat1","","Square matrix of dimension 1.",null,null],[12,"m11","","",4,null],[3,"Mat2","","Square matrix of dimension 2.",null,null],[12,"m11","","",5,null],[12,"m21","","",5,null],[12,"m12","","",5,null],[12,"m22","","",5,null],[3,"Mat3","","Square matrix of dimension 3.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m31","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[12,"m32","","",6,null],[12,"m13","","",6,null],[12,"m23","","",6,null],[12,"m33","","",6,null],[3,"Mat4","","Square matrix of dimension 4.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m41","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m42","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[12,"m43","","",7,null],[12,"m14","","",7,null],[12,"m24","","",7,null],[12,"m34","","",7,null],[12,"m44","","",7,null],[3,"Mat5","","Square matrix of dimension 5.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m51","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m52","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m53","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[12,"m54","","",8,null],[12,"m15","","",8,null],[12,"m25","","",8,null],[12,"m35","","",8,null],[12,"m45","","",8,null],[12,"m55","","",8,null],[3,"Mat6","","Square matrix of dimension 6.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m61","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m62","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m63","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m64","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[12,"m65","","",9,null],[12,"m16","","",9,null],[12,"m26","","",9,null],[12,"m36","","",9,null],[12,"m46","","",9,null],[12,"m56","","",9,null],[12,"m66","","",9,null],[3,"Rot2","","Two dimensional rotation matrix.",null,null],[3,"Rot3","","Three dimensional rotation matrix.",null,null],[3,"Rot4","","Four dimensional rotation matrix.",null,null],[3,"Vec0","","Vector of dimension 0.",null,null],[3,"Vec1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",10,null],[3,"Vec2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",11,null],[12,"y","","Second component of the vector.",11,null],[3,"Vec3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[12,"z","","Third component of the vector.",12,null],[3,"Vec4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[12,"w","","Fourth component of the vector.",13,null],[3,"Vec5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[12,"a","","Fifth of the vector.",14,null],[3,"Vec6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[12,"b","","Sixth component of the vector.",15,null],[3,"Pnt0","","Point of dimension 0.",null,null],[3,"Pnt1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",16,null],[3,"Pnt2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",17,null],[12,"y","","Second component of the point.",17,null],[3,"Pnt3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[12,"z","","Third component of the point.",18,null],[3,"Pnt4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[12,"w","","Fourth component of the point.",19,null],[3,"Pnt5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[12,"a","","Fifth of the point.",20,null],[3,"Pnt6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[12,"b","","Sixth component of the point.",21,null],[3,"Persp3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspMat3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Ortho3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quat","","A quaternion.",null,null],[12,"w","","The scalar component of the quaternion.",22,null],[12,"i","","The first vector component of the quaternion.",22,null],[12,"j","","The second vector component of the quaternion.",22,null],[12,"k","","The third vector component of the quaternion.",22,null],[3,"UnitQuat","","A unit quaternion that can represent a 3D rotation.",null,null],[4,"POrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",23,null],[13,"PartialEqual","","Equality relationship.",23,null],[13,"PartialGreater","","Result of a strict comparison.",23,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",23,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"pordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"orig","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dist","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"sqdist","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"perspective3d","","Computes a projection matrix given the frustrum near plane width, height, the field of\nview, and the distance to the clipping planes (`znear` and `zfar`).",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inv_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"to_rot_mat","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inv_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"sqnorm","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"det","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"lv"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inv","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"m"}}],[5,"cov","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diag","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dim","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"clone","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_fn","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"to_vec","","Transforms this matrix isizeo an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"new_identity","","Builds an identity matrix.",24,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"set","","Changes the value of a component of the matrix.",24,null],[11,"unsafe_set","","Just like `set` without bounds checking.",24,null],[11,"at","","Reads the value of a component of the matrix.",24,null],[11,"unsafe_at","","Just like `at` without bounds checking.",24,null],[11,"swap","","",24,null],[11,"shape","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"mean","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"col_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"set_diag","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":null}],[11,"diag","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"approx_epsilon","","",24,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"clone","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",0,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the result of a function.",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",0,{"inputs":[{"name":"dvec"},{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",0,null],[11,"as_mut_slice","","Mutably slices this vector.",0,null],[11,"shape","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"at","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",0,{"inputs":[{"name":"dvec"},{"name":"n"},{"name":"dvec"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",0,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"eq","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",25,null],[11,"as_mut_slice","","Mutably slices this vector.",25,null],[11,"shape","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"at","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"},{"name":"dvec1"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",25,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",25,null],[11,"from_fn","","Builds a vector filled with the result of a function.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",25,{"inputs":[{"name":"dvec1"},{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"eq","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",26,null],[11,"as_mut_slice","","Mutably slices this vector.",26,null],[11,"shape","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"at","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"},{"name":"dvec2"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",26,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",26,null],[11,"from_fn","","Builds a vector filled with the result of a function.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",26,{"inputs":[{"name":"dvec2"},{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"eq","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",27,null],[11,"as_mut_slice","","Mutably slices this vector.",27,null],[11,"shape","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"at","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"},{"name":"dvec3"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",27,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27,null],[11,"from_fn","","Builds a vector filled with the result of a function.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",27,{"inputs":[{"name":"dvec3"},{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"eq","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",28,null],[11,"as_mut_slice","","Mutably slices this vector.",28,null],[11,"shape","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"at","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"},{"name":"dvec4"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",28,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28,null],[11,"from_fn","","Builds a vector filled with the result of a function.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",28,{"inputs":[{"name":"dvec4"},{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"eq","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",29,null],[11,"as_mut_slice","","Mutably slices this vector.",29,null],[11,"shape","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"at","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"},{"name":"dvec5"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",29,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29,null],[11,"from_fn","","Builds a vector filled with the result of a function.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",29,{"inputs":[{"name":"dvec5"},{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"eq","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",30,null],[11,"as_mut_slice","","Mutably slices this vector.",30,null],[11,"shape","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"at","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"},{"name":"dvec6"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",30,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30,null],[11,"from_fn","","Builds a vector filled with the result of a function.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",30,{"inputs":[{"name":"dvec6"},{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","","",31,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",31,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",31,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"new_repeat","","Creates a new vector. The parameter is not taken in account.",31,{"inputs":[{"name":"vec0"},{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",10,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",10,{"inputs":[{"name":"vec1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_array","","View this vector as an array.",10,null],[11,"as_array_mut","","View this vector as a mutable array.",10,null],[11,"from_array_ref","","View an array as a vector.",10,null],[11,"from_array_mut","","View an array as a vector.",10,null],[11,"index","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"at","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"mul_s","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div_s","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"add_s","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub_s","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"append_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"prepend_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"sqnorm","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"is_zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",10,{"inputs":[{"name":"vec1"},{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"min_value","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"axpy","","",10,{"inputs":[{"name":"vec1"},{"name":"n"},{"name":"vec1"}],"output":null}],[11,"iter","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"},{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",10,{"inputs":[{"name":"vec1"},{"name":"r"}],"output":{"name":"vec1"}}],[11,"fmt","","",11,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",11,{"inputs":[{"name":"vec2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_array","","View this vector as an array.",11,null],[11,"as_array_mut","","View this vector as a mutable array.",11,null],[11,"from_array_ref","","View an array as a vector.",11,null],[11,"from_array_mut","","View an array as a vector.",11,null],[11,"index","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"at","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"mul_s","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div_s","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"add_s","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub_s","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"sqnorm","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"is_zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",11,{"inputs":[{"name":"vec2"},{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"min_value","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"axpy","","",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"vec2"}],"output":null}],[11,"iter","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"},{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",11,{"inputs":[{"name":"vec2"},{"name":"r"}],"output":{"name":"vec2"}}],[11,"fmt","","",12,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",12,{"inputs":[{"name":"vec3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_array","","View this vector as an array.",12,null],[11,"as_array_mut","","View this vector as a mutable array.",12,null],[11,"from_array_ref","","View an array as a vector.",12,null],[11,"from_array_mut","","View an array as a vector.",12,null],[11,"index","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"at","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"mul_s","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div_s","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"add_s","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub_s","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"sqnorm","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"is_zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"vec3"},{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"min_value","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"axpy","","",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"vec3"}],"output":null}],[11,"iter","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"},{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",12,{"inputs":[{"name":"vec3"},{"name":"r"}],"output":{"name":"vec3"}}],[11,"fmt","","",13,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",13,{"inputs":[{"name":"vec4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_array","","View this vector as an array.",13,null],[11,"as_array_mut","","View this vector as a mutable array.",13,null],[11,"from_array_ref","","View an array as a vector.",13,null],[11,"from_array_mut","","View an array as a vector.",13,null],[11,"index","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"at","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"mul_s","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div_s","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"add_s","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub_s","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"sqnorm","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"is_zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",13,{"inputs":[{"name":"vec4"},{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"min_value","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"axpy","","",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"vec4"}],"output":null}],[11,"iter","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"},{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",13,{"inputs":[{"name":"vec4"},{"name":"r"}],"output":{"name":"vec4"}}],[11,"fmt","","",14,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",14,{"inputs":[{"name":"vec5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_array","","View this vector as an array.",14,null],[11,"as_array_mut","","View this vector as a mutable array.",14,null],[11,"from_array_ref","","View an array as a vector.",14,null],[11,"from_array_mut","","View an array as a vector.",14,null],[11,"index","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"at","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"mul_s","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div_s","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"add_s","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub_s","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"append_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"prepend_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"sqnorm","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"is_zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",14,{"inputs":[{"name":"vec5"},{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"min_value","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"axpy","","",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"vec5"}],"output":null}],[11,"iter","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"},{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",14,{"inputs":[{"name":"vec5"},{"name":"r"}],"output":{"name":"vec5"}}],[11,"fmt","","",15,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",15,{"inputs":[{"name":"vec6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"from","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_array","","View this vector as an array.",15,null],[11,"as_array_mut","","View this vector as a mutable array.",15,null],[11,"from_array_ref","","View an array as a vector.",15,null],[11,"from_array_mut","","View an array as a vector.",15,null],[11,"index","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"at","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"mul_s","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div_s","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"add_s","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub_s","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"append_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"prepend_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"sqnorm","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"is_zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"vec6"},{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"min_value","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"axpy","","",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"vec6"}],"output":null}],[11,"iter","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",15,{"inputs":[{"name":"vec6"},{"name":"r"}],"output":{"name":"vec6"}}],[11,"fmt","","",32,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",32,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",32,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"new_repeat","","Creates a new point. The parameter is not taken in account.",32,{"inputs":[{"name":"pnt0"},{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",16,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"is_orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_array","","View this vector as an array.",16,null],[11,"as_array_mut","","View this vector as a mutable array.",16,null],[11,"from_array_ref","","View an array as a vector.",16,null],[11,"from_array_mut","","View an array as a vector.",16,null],[11,"index","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"at","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":null}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"mul_s","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div_s","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add_s","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub_s","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",16,{"inputs":[{"name":"pnt1"},{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"min_value","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"axpy","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"},{"name":"pnt1"}],"output":null}],[11,"iter","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",16,{"inputs":[{"name":"pnt1"},{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",17,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"is_orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_array","","View this vector as an array.",17,null],[11,"as_array_mut","","View this vector as a mutable array.",17,null],[11,"from_array_ref","","View an array as a vector.",17,null],[11,"from_array_mut","","View an array as a vector.",17,null],[11,"index","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"at","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":null}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"mul_s","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div_s","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add_s","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub_s","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",17,{"inputs":[{"name":"pnt2"},{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"min_value","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"axpy","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"pnt2"}],"output":null}],[11,"iter","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",17,{"inputs":[{"name":"pnt2"},{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",18,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"is_orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_array","","View this vector as an array.",18,null],[11,"as_array_mut","","View this vector as a mutable array.",18,null],[11,"from_array_ref","","View an array as a vector.",18,null],[11,"from_array_mut","","View an array as a vector.",18,null],[11,"index","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"at","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"mul_s","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div_s","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add_s","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub_s","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",18,{"inputs":[{"name":"pnt3"},{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"min_value","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"axpy","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"pnt3"}],"output":null}],[11,"iter","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",18,{"inputs":[{"name":"pnt3"},{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",19,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"is_orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_array","","View this vector as an array.",19,null],[11,"as_array_mut","","View this vector as a mutable array.",19,null],[11,"from_array_ref","","View an array as a vector.",19,null],[11,"from_array_mut","","View an array as a vector.",19,null],[11,"index","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"at","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"mul_s","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div_s","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add_s","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub_s","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",19,{"inputs":[{"name":"pnt4"},{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"min_value","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"axpy","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"pnt4"}],"output":null}],[11,"iter","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",19,{"inputs":[{"name":"pnt4"},{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",20,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"is_orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_array","","View this vector as an array.",20,null],[11,"as_array_mut","","View this vector as a mutable array.",20,null],[11,"from_array_ref","","View an array as a vector.",20,null],[11,"from_array_mut","","View an array as a vector.",20,null],[11,"index","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"at","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"mul_s","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div_s","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add_s","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub_s","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",20,{"inputs":[{"name":"pnt5"},{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"min_value","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"axpy","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"pnt5"}],"output":null}],[11,"iter","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",20,{"inputs":[{"name":"pnt5"},{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",21,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"is_orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_array","","View this vector as an array.",21,null],[11,"as_array_mut","","View this vector as a mutable array.",21,null],[11,"from_array_ref","","View an array as a vector.",21,null],[11,"from_array_mut","","View an array as a vector.",21,null],[11,"index","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"at","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"mul_s","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div_s","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add_s","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub_s","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",21,{"inputs":[{"name":"pnt6"},{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"min_value","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"axpy","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"pnt6"}],"output":null}],[11,"iter","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",21,{"inputs":[{"name":"pnt6"},{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","","",22,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",22,{"inputs":[{"name":"quat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",22,{"inputs":[{"name":"quat"}],"output":null}],[11,"inv","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"fmt","","",33,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",33,{"inputs":[{"name":"unitquat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",33,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",33,{"inputs":[{"name":"unitquat"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rand","","",22,{"inputs":[{"name":"quat"},{"name":"r"}],"output":{"name":"quat"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",33,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"inv","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",33,{"inputs":[{"name":"unitquat"},{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",33,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"from","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_array","","View this vector as an array.",22,null],[11,"as_array_mut","","View this vector as a mutable array.",22,null],[11,"from_array_ref","","View an array as a vector.",22,null],[11,"from_array_mut","","View an array as a vector.",22,null],[11,"index","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"at","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"swap","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"mul_s","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div_s","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"add_s","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub_s","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"one","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"is_zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",22,{"inputs":[{"name":"quat"},{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"min_value","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"axpy","","",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"quat"}],"output":null}],[11,"iter","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",33,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","","",34,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",34,{"inputs":[{"name":"identity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",34,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"fmt","","",4,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",4,{"inputs":[{"name":"mat1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",4,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",4,null],[11,"from_array_ref","","View a column-major array of array as a vector.",4,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",4,null],[11,"from","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"is_zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"iter","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",4,null],[11,"set_fast","","",4,null],[11,"dim","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",4,null],[11,"at","","",4,null],[11,"set","","",4,null],[11,"swap","","",4,null],[11,"unsafe_at","","",4,null],[11,"unsafe_set","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",4,{"inputs":[{"name":"mat1"}],"output":null}],[11,"approx_epsilon","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"set_diag","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":null}],[11,"diag","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"to_homogeneous","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",4,{"inputs":[{"name":"mat1"},{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"mat1"},{"name":"r"}],"output":{"name":"mat1"}}],[11,"fmt","","",5,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",5,{"inputs":[{"name":"mat2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"mat2"}}],[11,"new","","",5,{"inputs":[{"name":"mat2"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",5,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",5,null],[11,"from_array_ref","","View a column-major array of array as a vector.",5,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",5,null],[11,"from","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"is_zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"iter","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",5,null],[11,"at","","",5,null],[11,"set","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"transpose","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",5,{"inputs":[{"name":"mat2"}],"output":null}],[11,"approx_epsilon","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",5,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"set_diag","","",5,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":null}],[11,"diag","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"to_homogeneous","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",5,{"inputs":[{"name":"mat2"},{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"mat2"},{"name":"r"}],"output":{"name":"mat2"}}],[11,"fmt","","",6,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",6,{"inputs":[{"name":"mat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",6,{"inputs":[{"name":"mat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",6,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",6,null],[11,"from_array_ref","","View a column-major array of array as a vector.",6,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",6,null],[11,"from","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"is_zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"iter","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",6,null],[11,"at","","",6,null],[11,"set","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"transpose","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",6,{"inputs":[{"name":"mat3"}],"output":null}],[11,"approx_epsilon","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",6,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"set_diag","","",6,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":null}],[11,"diag","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"to_homogeneous","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",6,{"inputs":[{"name":"mat3"},{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"mat3"},{"name":"r"}],"output":{"name":"mat3"}}],[11,"fmt","","",7,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",7,{"inputs":[{"name":"mat4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",7,{"inputs":[{"name":"mat4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",7,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",7,null],[11,"from_array_ref","","View a column-major array of array as a vector.",7,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",7,null],[11,"from","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"is_zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"iter","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",7,null],[11,"at","","",7,null],[11,"set","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",7,{"inputs":[{"name":"mat4"}],"output":null}],[11,"approx_epsilon","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"set_diag","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":null}],[11,"diag","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"to_homogeneous","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",7,{"inputs":[{"name":"mat4"},{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"mat4"},{"name":"r"}],"output":{"name":"mat4"}}],[11,"fmt","","",8,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",8,{"inputs":[{"name":"mat5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",8,{"inputs":[{"name":"mat5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",8,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",8,null],[11,"from_array_ref","","View a column-major array of array as a vector.",8,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",8,null],[11,"from","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"is_zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",8,null],[11,"at","","",8,null],[11,"set","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",8,{"inputs":[{"name":"mat5"}],"output":null}],[11,"approx_epsilon","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"set_diag","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":null}],[11,"diag","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"to_homogeneous","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",8,{"inputs":[{"name":"mat5"},{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"mat5"},{"name":"r"}],"output":{"name":"mat5"}}],[11,"fmt","","",9,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",9,{"inputs":[{"name":"mat6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",9,{"inputs":[{"name":"mat6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",9,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",9,null],[11,"from_array_ref","","View a column-major array of array as a vector.",9,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",9,null],[11,"from","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"is_zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"iter","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",9,null],[11,"at","","",9,null],[11,"set","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",9,{"inputs":[{"name":"mat6"}],"output":null}],[11,"approx_epsilon","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"set_diag","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":null}],[11,"diag","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"outer","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"mat6"},{"name":"r"}],"output":{"name":"mat6"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",35,{"inputs":[{"name":"rot2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"rand","","",35,{"inputs":[{"name":"rot2"},{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",36,{"inputs":[{"name":"rot3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",36,{"inputs":[{"name":"rot3"},{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",36,{"inputs":[{"name":"rot3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Reorient this matrix such that its local `x` axis points to a given point. Note that the\nusually known `look_at` function does the same thing but with the `z` axis. See `look_at_z`\nfor that.",36,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"look_at_z","","Reorient this matrix such that its local `z` axis points to a given point.",36,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"rotation","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"rand","","",36,{"inputs":[{"name":"rot3"},{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",37,{"inputs":[{"name":"rot4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"append_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"prepend_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"submat","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",35,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"nrows","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"index","","",35,null],[11,"abs","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",35,{"inputs":[{"name":"rot2"}],"output":null}],[11,"approx_epsilon","","",35,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"submat","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",36,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"nrows","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"index","","",36,null],[11,"abs","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",36,{"inputs":[{"name":"rot3"}],"output":null}],[11,"approx_epsilon","","",36,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"submat","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",37,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"nrows","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"index","","",37,null],[11,"abs","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",37,{"inputs":[{"name":"rot4"}],"output":null}],[11,"approx_epsilon","","",37,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",1,{"inputs":[{"name":"iso2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",2,{"inputs":[{"name":"iso3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",3,{"inputs":[{"name":"iso4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3,{"inputs":[{"name":"iso4"},{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"dim","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",1,{"inputs":[{"name":"iso2"},{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"append_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"prepend_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"dim","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",2,{"inputs":[{"name":"iso3"},{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"append_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"prepend_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"append_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"prepend_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","","",38,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",38,{"inputs":[{"name":"persp3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",39,{"inputs":[{"name":"perspmat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",38,{"inputs":[{"name":"persp3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_fov","","Sets the field of view of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",38,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",38,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",39,{"inputs":[{"name":"perspmat3"},{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",39,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",39,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",40,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",40,{"inputs":[{"name":"ortho3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",41,{"inputs":[{"name":"orthomat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",40,{"inputs":[{"name":"ortho3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",40,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",40,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",41,{"inputs":[{"name":"orthomat3"},{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",41,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",41,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",23,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",23,{"inputs":[{"name":"pordering"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",23,{"inputs":[{"name":"pordering"},{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",42,{"inputs":[{"name":"absolute"},{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",43,{"inputs":[{"name":"absoluterotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",44,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",44,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[10,"approx_ulps","","Default ULPs for approximation.",44,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",44,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"approx_eq","","Tests approximate equality.",44,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",45,{"inputs":[{"name":"axpy"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",46,{"inputs":[{"name":"basis"},{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",46,{"inputs":[{"name":"basis"},{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",46,{"inputs":[{"name":"basis"},{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes' constant.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"e","","Euler's number.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",48,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",48,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",49,{"inputs":[{"name":"cast"},{"name":"t"}],"output":{"name":"self"}}],[8,"Col","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",50,{"inputs":[{"name":"col"}],"output":{"name":"usize"}}],[10,"col","","Reads the `i`-th column of `self`.",50,{"inputs":[{"name":"col"},{"name":"usize"}],"output":{"name":"c"}}],[10,"set_col","","Writes the `i`-th column of `self`.",50,{"inputs":[{"name":"col"},{"name":"usize"},{"name":"c"}],"output":null}],[8,"ColSlice","","Trait to access part of a column of a matrix",null,null],[10,"col_slice","","Returns a view to a slice of a column of a matrix.",51,{"inputs":[{"name":"colslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"c"}}],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",52,{"inputs":[{"name":"rowslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"r"}}],[8,"Cov","","Trait for computing the covariance of a set of data.",null,null],[10,"cov","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"}],"output":{"name":"m"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"Output","nalgebra::Cross","The cross product output.",null,null],[10,"cross","nalgebra","Computes the cross product between two elements (usually vectors).",54,{"inputs":[{"name":"cross"},{"name":"self"}],"output":{"name":"output"}}],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",55,{"inputs":[{"name":"crossmatrix"}],"output":{"name":"m"}}],[8,"Det","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"det","","Returns the determinant of `m`.",56,{"inputs":[{"name":"det"}],"output":{"name":"n"}}],[8,"Diag","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diag","","Creates a new matrix with the given diagonal.",57,{"inputs":[{"name":"diag"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_diag","","Sets the diagonal of this matrix.",57,{"inputs":[{"name":"diag"},{"name":"v"}],"output":null}],[10,"diag","","The diagonal of this matrix.",57,{"inputs":[{"name":"diag"}],"output":{"name":"v"}}],[8,"Dim","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dim","","The dimension of the object.",58,{"inputs":[{"name":"dim"},{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",59,{"inputs":[{"name":"dot"},{"name":"self"}],"output":{"name":"n"}}],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",60,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",61,{"inputs":[{"name":"eye"},{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"sqdist","","Computes the square distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[8,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",63,{"inputs":[{"name":"fromhomogeneous"},{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"at","","Reads the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"}],"output":{"name":"n"}}],[10,"set","","Writes to the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"n"}],"output":null}],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"i"}],"output":null}],[10,"unsafe_at","","Reads the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"}],"output":{"name":"n"}}],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"n"}],"output":null}],[8,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inv","","Returns the inverse of `m`.",65,{"inputs":[{"name":"inv"}],"output":{"name":"option"}}],[10,"inv_mut","","In-place version of `inverse`.",65,{"inputs":[{"name":"inv"}],"output":{"name":"bool"}}],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",66,{"inputs":[{"name":"iterable"}],"output":{"name":"iter"}}],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",67,{"inputs":[{"name":"iterablemut"}],"output":{"name":"itermut"}}],[8,"LMul","","Trait of objects having a left multiplication with another element.",null,null],[10,"lmul","","Computes `v * self`",68,{"inputs":[{"name":"lmul"},{"name":"v"}],"output":{"name":"v"}}],[8,"Mat","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the covariance of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",69,{"inputs":[{"name":"mean"}],"output":{"name":"n"}}],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[11,"norm","","Computes the norm of `self`.",70,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"sqnorm","","Computes the squared norm of `self`.",70,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"normalize","","Gets the normalized version of a copy of `v`.",70,{"inputs":[{"name":"norm"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes `self`.",70,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[8,"NumPnt","","Trait grouping most common operations on points.",null,null],[8,"NumVec","","Trait grouping most common operations on vectors.",null,null],[8,"One","","Multiplicative identity.",null,null],[10,"one","","Returns the multiplicative identity.",71,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"orig","","The trivial origin.",72,{"inputs":[{"name":"orig"}],"output":{"name":"self"}}],[10,"is_orig","","Returns true if this points is exactly the trivial origin.",72,{"inputs":[{"name":"orig"}],"output":{"name":"bool"}}],[8,"Outer","","Traits of objects having an outer product.",null,null],[10,"outer","","Computes the outer product: `a * b`",73,{"inputs":[{"name":"outer"},{"name":"self"}],"output":{"name":"m"}}],[8,"POrd","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"sup","","Returns the supremum of this value and another",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"pordering"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",74,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",74,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[10,"to_vec","","Converts this point to its associated vector.",75,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",75,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",75,{"inputs":[{"name":"pntasvec"},{"name":"v"}],"output":null}],[8,"RMul","","Trait of objects having a right multiplication with another element.",null,null],[10,"rmul","","Computes `self * v`",76,{"inputs":[{"name":"rmul"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",77,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_rotate","","Applies an inverse rotation to `v`.",77,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",78,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"inv_rotation","","Gets the inverse rotation associated with `self`.",78,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"append_rotation_mut","","Appends a rotation to this object.",78,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",78,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",78,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",78,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_rotation","","Sets the rotation of `self`.",78,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","nalgebra::RotationMatrix","The output rotation matrix type.",null,null],[10,"to_rot_mat","nalgebra","Gets the rotation matrix represented by `self`.",79,{"inputs":[{"name":"rotationmatrix"}],"output":{"name":"output"}}],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",80,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",80,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",80,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",80,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",81,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[10,"row","","Reads the `i`-th row of `self`.",81,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"r"}}],[10,"set_row","","Writes the `i`-th row of `self`.",81,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"r"}],"output":null}],[8,"ScalarAdd","","Trait of objects having an addition with a scalar.",null,null],[10,"add_s","","Gets the result of `self + n`.",82,{"inputs":[{"name":"scalaradd"},{"name":"n"}],"output":{"name":"self"}}],[8,"ScalarSub","","Trait of objects having a subtraction with a scalar.",null,null],[10,"sub_s","","Gets the result of `self - n`.",83,{"inputs":[{"name":"scalarsub"},{"name":"n"}],"output":{"name":"self"}}],[8,"ScalarMul","","Trait of objects having a multiplication with a scalar.",null,null],[10,"mul_s","","Gets the result of `self * n`.",84,{"inputs":[{"name":"scalarmul"},{"name":"n"}],"output":{"name":"self"}}],[8,"ScalarDiv","","Trait of objects having a division by a scalar.",null,null],[10,"div_s","","Gets the result of `self / n`.",85,{"inputs":[{"name":"scalardiv"},{"name":"n"}],"output":{"name":"self"}}],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",86,{"inputs":[{"name":"shape"}],"output":{"name":"i"}}],[8,"SquareMat","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",87,{"inputs":[{"name":"tohomogeneous"}],"output":{"name":"u"}}],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",88,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_transform","","Applies an inverse transformation to `v`.",88,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",89,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"inv_transformation","","Gets the inverse transformation of `self`.",89,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"append_transformation_mut","","Appends a transformation to this object.",89,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",89,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",89,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",89,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"set_transformation","","Sets the transformation of `self`.",89,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",90,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_translate","","Apply an inverse translation to an object.",90,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",91,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"inv_translation","","Gets the inverse translation associated with this object.",91,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"append_translation_mut","","Appends a translation to this object.",91,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",91,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_translation_mut","","Prepends a translation to this object.",91,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",91,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_translation","","Sets the translation.",91,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",92,{"inputs":[{"name":"transpose"}],"output":{"name":"self"}}],[10,"transpose_mut","","In-place version of `transposed`.",92,{"inputs":[{"name":"transpose"}],"output":null}],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",93,{"inputs":[{"name":"uniformspheresample"},{"name":"f"}],"output":null}],[8,"VecAsPnt","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[10,"to_pnt","","Converts this point to its associated vector.",94,{"inputs":[{"name":"vecaspnt"}],"output":{"name":"p"}}],[10,"as_pnt","","Converts a reference to this point to a reference to its associated vector.",94,{"inputs":[{"name":"vecaspnt"}],"output":{"name":"p"}}],[8,"Zero","","Additive identity.",null,null],[10,"zero","","Returns the additive identity.",95,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Tests if `self` is exactly zero.",95,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[14,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[14,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",80,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",80,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",80,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",80,null],[11,"norm","","Computes the norm of `self`.",70,null],[11,"sqdist","","Computes the square distance between two points.",62,null],[11,"dist","","Computes the distance between two points.",62,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",74,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",74,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",74,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",74,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",74,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",74,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",74,null],[11,"approx_eq","","Tests approximate equality.",44,null],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,null]],"paths":[[3,"DVec"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Vec1"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,"Pnt1"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Pnt5"],[3,"Pnt6"],[3,"Quat"],[4,"POrdering"],[3,"DMat"],[3,"DVec1"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DVec5"],[3,"DVec6"],[3,"Vec0"],[3,"Pnt0"],[3,"UnitQuat"],[3,"Identity"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Col"],[8,"ColSlice"],[8,"RowSlice"],[8,"Cov"],[8,"Cross"],[8,"CrossMatrix"],[8,"Det"],[8,"Diag"],[8,"Dim"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPnt"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inv"],[8,"Iterable"],[8,"IterableMut"],[8,"LMul"],[8,"Mean"],[8,"Norm"],[8,"One"],[8,"Orig"],[8,"Outer"],[8,"POrd"],[8,"PntAsVec"],[8,"RMul"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"Row"],[8,"ScalarAdd"],[8,"ScalarSub"],[8,"ScalarMul"],[8,"ScalarDiv"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"],[8,"VecAsPnt"],[8,"Zero"]]};
searchIndex['gl_generator'] = {"items":[[0,"","gl_generator","# gl_generator",null,null],[5,"generate_bindings","","Public function that generates Rust source code.",null,null],[0,"generators","","",null,null],[5,"gen_enum_item","gl_generator::generators","This function generates a `const name: type = value;` item.",null,{"inputs":[{"name":"enum"},{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[5,"gen_type_aliases","","Generates all the type aliases for a namespace.",null,{"inputs":[{"name":"ns"},{"name":"w"}],"output":{"name":"result"}}],[5,"gen_parameters","","Generates the list of Rust `Arg`s that a `Cmd` requires.",null,{"inputs":[{"name":"cmd"},{"name":"bool"},{"name":"bool"}],"output":{"name":"vec"}}],[5,"gen_return_type","","Generates the Rust return type of a `Cmd`.",null,{"inputs":[{"name":"cmd"}],"output":{"name":"string"}}],[5,"gen_symbol_name","","Generates the native symbol name of a `Cmd`.",null,{"inputs":[{"name":"ns"},{"name":"str"}],"output":{"name":"string"}}],[0,"global_gen","","",null,null],[3,"GlobalGenerator","gl_generator::generators::global_gen","",null,null],[11,"write","","",0,{"inputs":[{"name":"globalgenerator"},{"name":"registry"},{"name":"ns"},{"name":"w"}],"output":{"name":"result"}}],[0,"static_gen","gl_generator::generators","",null,null],[3,"StaticGenerator","gl_generator::generators::static_gen","",null,null],[11,"write","","",1,{"inputs":[{"name":"staticgenerator"},{"name":"registry"},{"name":"ns"},{"name":"w"}],"output":{"name":"result"}}],[0,"struct_gen","gl_generator::generators","",null,null],[3,"StructGenerator","gl_generator::generators::struct_gen","",null,null],[11,"write","","",2,{"inputs":[{"name":"structgenerator"},{"name":"registry"},{"name":"ns"},{"name":"w"}],"output":{"name":"result"}}],[0,"static_struct_gen","gl_generator::generators","",null,null],[3,"StaticStructGenerator","gl_generator::generators::static_struct_gen","",null,null],[11,"write","","",3,{"inputs":[{"name":"staticstructgenerator"},{"name":"registry"},{"name":"ns"},{"name":"w"}],"output":{"name":"result"}}],[8,"Generator","gl_generator::generators","Trait for a bindings generator.",null,null],[10,"write","","Builds the GL bindings.",4,{"inputs":[{"name":"generator"},{"name":"registry"},{"name":"ns"},{"name":"w"}],"output":{"name":"result"}}],[0,"registry","gl_generator","",null,null],[3,"Registry","gl_generator::registry","",null,null],[12,"groups","","",5,null],[12,"enums","","",5,null],[12,"cmds","","",5,null],[12,"features","","",5,null],[12,"extensions","","",5,null],[12,"aliases","","",5,null],[3,"EnumIterator","","",null,null],[3,"CmdIterator","","",null,null],[3,"Group","","",null,null],[12,"name","","",6,null],[12,"enums","","",6,null],[3,"EnumNs","","",null,null],[12,"namespace","","",7,null],[12,"group","","",7,null],[12,"ty","","",7,null],[12,"start","","",7,null],[12,"end","","",7,null],[12,"vendor","","",7,null],[12,"comment","","",7,null],[12,"defs","","",7,null],[3,"Enum","","",null,null],[12,"ident","","",8,null],[12,"value","","",8,null],[12,"alias","","",8,null],[12,"ty","","",8,null],[3,"CmdNs","","",null,null],[12,"namespace","","",9,null],[12,"defs","","",9,null],[3,"Binding","","",null,null],[12,"ident","","",10,null],[12,"ty","","",10,null],[12,"group","","",10,null],[3,"Cmd","","",null,null],[12,"proto","","",11,null],[12,"params","","",11,null],[12,"is_safe","","True if this command doesn't take any pointers.",11,null],[12,"alias","","",11,null],[12,"vecequiv","","",11,null],[12,"glx","","",11,null],[3,"Feature","","",null,null],[12,"api","","",12,null],[12,"name","","",12,null],[12,"number","","",12,null],[12,"requires","","",12,null],[12,"removes","","",12,null],[3,"Require","","",null,null],[12,"comment","","",13,null],[12,"enums","","A reference to the earlier types, by name",13,null],[12,"commands","","A reference to the earlier types, by name",13,null],[3,"Remove","","",null,null],[12,"profile","","",14,null],[12,"comment","","",14,null],[12,"enums","","A reference to the earlier types, by name",14,null],[12,"commands","","A reference to the earlier types, by name",14,null],[3,"Extension","","",null,null],[12,"name","","",15,null],[12,"supported","","which apis this extension is defined for (see Feature.api)",15,null],[12,"requires","","",15,null],[3,"GlxOpcode","","",null,null],[12,"ty","","",16,null],[12,"opcode","","",16,null],[12,"name","","",16,null],[12,"comment","","",16,null],[3,"Filter","","",null,null],[12,"fallbacks","","",17,null],[12,"extensions","","",17,null],[12,"profile","","",17,null],[12,"version","","",17,null],[12,"api","","",17,null],[4,"Ns","","",null,null],[13,"Gl","","",18,null],[13,"Glx","","",18,null],[13,"Wgl","","",18,null],[13,"Egl","","",18,null],[13,"Gles1","","",18,null],[13,"Gles2","","",18,null],[4,"Fallbacks","","",null,null],[13,"All","","",19,null],[13,"None","","",19,null],[11,"clone","","",18,{"inputs":[{"name":"ns"}],"output":{"name":"ns"}}],[11,"fmt_struct_name","","",18,{"inputs":[{"name":"ns"}],"output":{"name":"str"}}],[6,"Err","","",null,null],[11,"from_str","","",18,{"inputs":[{"name":"ns"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"ns"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_xml","","Generate a registry from the supplied XML string",5,{"inputs":[{"name":"registry"},{"name":"r"},{"name":"ns"},{"name":"option"}],"output":{"name":"registry"}}],[11,"get_tys","","Returns a set of all the types used in the supplied registry. This is useful\nfor working out what conversions are needed for the specific registry.",5,{"inputs":[{"name":"registry"}],"output":{"name":"btreeset"}}],[11,"enum_iter","","",5,{"inputs":[{"name":"registry"}],"output":{"name":"enumiterator"}}],[11,"cmd_iter","","",5,{"inputs":[{"name":"registry"}],"output":{"name":"cmditerator"}}],[6,"Output","","",null,null],[11,"add","","",5,{"inputs":[{"name":"registry"},{"name":"registry"}],"output":{"name":"registry"}}],[6,"Item","","",null,null],[11,"next","","",20,{"inputs":[{"name":"enumiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",21,{"inputs":[{"name":"cmditerator"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"feature"}],"output":{"name":"feature"}}],[11,"clone","","",13,{"inputs":[{"name":"require"}],"output":{"name":"require"}}],[11,"clone","","",14,{"inputs":[{"name":"remove"}],"output":{"name":"remove"}}],[11,"clone","","",15,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}]],"paths":[[3,"GlobalGenerator"],[3,"StaticGenerator"],[3,"StructGenerator"],[3,"StaticStructGenerator"],[8,"Generator"],[3,"Registry"],[3,"Group"],[3,"EnumNs"],[3,"Enum"],[3,"CmdNs"],[3,"Binding"],[3,"Cmd"],[3,"Feature"],[3,"Require"],[3,"Remove"],[3,"Extension"],[3,"GlxOpcode"],[3,"Filter"],[4,"Ns"],[4,"Fallbacks"],[3,"EnumIterator"],[3,"CmdIterator"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[6,"Item","","",null,null],[11,"next","","",30,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",31,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"rand","","",32,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",33,null],[11,"from_seed","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",34,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['xml'] = {"items":[[0,"","xml","This crate currently provides almost XML 1.0/1.1-compliant pull parser.",null,null],[0,"macros","","Contains several macros used in this crate.",null,null],[0,"name","","",null,null],[3,"Name","xml::name","Represents a qualified XML name.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",0,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",0,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",0,null],[3,"OwnedName","","An owned variant of `Name`.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",1,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",1,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",1,null],[11,"fmt","","",0,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"fmt","","",0,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Returns an owned variant of the qualified name.",0,{"inputs":[{"name":"name"}],"output":{"name":"ownedname"}}],[11,"local","","Returns a new `Name` instance representing plain local name.",0,{"inputs":[{"name":"name"},{"name":"str"}],"output":{"name":"name"}}],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",0,{"inputs":[{"name":"name"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"name"}}],[11,"to_repr","","Returns correct XML representation of this local name and prefix.",0,{"inputs":[{"name":"name"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"ownedname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"ownedname"},{"name":"ownedname"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"ownedname"},{"name":"ownedname"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"ownedname"}],"output":{"name":"ownedname"}}],[11,"fmt","","",1,{"inputs":[{"name":"ownedname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",1,{"inputs":[{"name":"ownedname"}],"output":{"name":"name"}}],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",1,{"inputs":[{"name":"ownedname"},{"name":"s"}],"output":{"name":"ownedname"}}],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",1,{"inputs":[{"name":"ownedname"},{"name":"s1"},{"name":"s2"},{"name":"option"}],"output":{"name":"ownedname"}}],[11,"prefix_as_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",1,{"inputs":[{"name":"ownedname"}],"output":{"name":"option"}}],[11,"namespace_as_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",1,{"inputs":[{"name":"ownedname"}],"output":{"name":"option"}}],[11,"to_repr","","See `Name::to_repr()` for details.",1,{"inputs":[{"name":"ownedname"}],"output":{"name":"string"}}],[6,"Err","","",null,null],[11,"from_str","","Parses the given string slice into a qualified name.",1,{"inputs":[{"name":"ownedname"},{"name":"str"}],"output":{"name":"result"}}],[0,"attribute","xml","",null,null],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute.",null,null],[12,"name","","Attribute name.",2,null],[12,"value","","Attribute value.",2,null],[3,"OwnedAttribute","","",null,null],[12,"name","","",3,null],[12,"value","","",3,null],[11,"fmt","","",2,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",2,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","",2,{"inputs":[{"name":"attribute"}],"output":{"name":"ownedattribute"}}],[11,"new","","",2,{"inputs":[{"name":"attribute"},{"name":"name"},{"name":"str"}],"output":{"name":"attribute"}}],[11,"fmt","","",3,{"inputs":[{"name":"ownedattribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"ownedattribute"},{"name":"ownedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"ownedattribute"},{"name":"ownedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"ownedattribute"}],"output":{"name":"ownedattribute"}}],[11,"borrow","","",3,{"inputs":[{"name":"ownedattribute"}],"output":{"name":"attribute"}}],[11,"new","","",3,{"inputs":[{"name":"ownedattribute"},{"name":"ownedname"},{"name":"string"}],"output":{"name":"ownedattribute"}}],[11,"fmt","","",3,{"inputs":[{"name":"ownedattribute"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"common","xml","Contains several types used throughout the library.",null,null],[3,"Error","xml::common","XML parsing error.",null,null],[4,"XmlVersion","","XML version enumeration.",null,null],[13,"Version10","","XML version 1.0.",4,null],[13,"Version11","","XML version 1.1.",4,null],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[8,"HasPosition","","Represents a thing which has a position inside some textual document.",null,null],[10,"row","","Returns a line number inside the document.",5,{"inputs":[{"name":"hasposition"}],"output":{"name":"usize"}}],[10,"col","","Returns a column number inside the document.",5,{"inputs":[{"name":"hasposition"}],"output":{"name":"usize"}}],[11,"fmt","","",6,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",6,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"row","","",6,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"col","","",6,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"new","","Creates a new error using position information from the provided\n`HasPosition` object and a message.",6,{"inputs":[{"name":"error"},{"name":"o"},{"name":"string"}],"output":{"name":"error"}}],[11,"new_full","","Creates a new error using provided position information and a message.",6,{"inputs":[{"name":"error"},{"name":"usize"},{"name":"usize"},{"name":"string"}],"output":{"name":"error"}}],[11,"msg","","Returns a reference to a message which is contained inside this error.",6,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"description","","",6,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"xmlversion"},{"name":"xmlversion"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"xmlversion"},{"name":"xmlversion"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"xmlversion"}],"output":{"name":"xmlversion"}}],[11,"fmt","","",4,{"inputs":[{"name":"xmlversion"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"escape","xml","",null,null],[5,"escape_str","xml::escape","Performs escaping of common XML characters.",null,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[0,"namespace","xml","",null,null],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs.",null,null],[3,"NamespaceMappings","","An iterator over mappings from prefixes to URIs in a namespace.",null,null],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces.",null,null],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack.",null,null],[6,"UriMapping","","",null,null],[17,"NS_XMLNS_PREFIX","","",null,null],[17,"NS_XMLNS_URI","","",null,null],[17,"NS_XML_PREFIX","","",null,null],[17,"NS_XML_URI","","",null,null],[17,"NS_EMPTY_URI","","",null,null],[8,"NamespaceIterable","","Denotes something which contains namespace URI mappings.",null,null],[16,"Iter","xml::namespace::NamespaceIterable","",null,null],[10,"uri_mappings","xml::namespace","",7,{"inputs":[{"name":"namespaceiterable"}],"output":{"name":"iter"}}],[11,"clone","","",8,{"inputs":[{"name":"namespace"}],"output":{"name":"namespace"}}],[11,"eq","","",8,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty namespace.",8,{"inputs":[{"name":"namespace"}],"output":{"name":"namespace"}}],[11,"is_empty","","Checks whether this namespace is empty.",8,{"inputs":[{"name":"namespace"}],"output":{"name":"bool"}}],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but the default mappings.",8,{"inputs":[{"name":"namespace"}],"output":{"name":"bool"}}],[11,"put","","Puts a mapping into this namespace.",8,{"inputs":[{"name":"namespace"},{"name":"option"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"force_put","","Puts a mapping into this namespace forcefully.",8,{"inputs":[{"name":"namespace"},{"name":"option"},{"name":"s2"}],"output":{"name":"option"}}],[11,"get","","Queries the namespace for the given prefix.",8,{"inputs":[{"name":"namespace"},{"name":"option"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",9,{"inputs":[{"name":"namespacemappings"}],"output":{"name":"option"}}],[6,"Iter","","",null,null],[11,"uri_mappings","","",8,{"inputs":[{"name":"namespace"}],"output":{"name":"namespacemappings"}}],[11,"eq","","",10,{"inputs":[{"name":"namespacestack"},{"name":"namespacestack"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"namespacestack"},{"name":"namespacestack"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespacestack"}}],[11,"empty","","Returns an empty namespace stack.",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespacestack"}}],[11,"default","","Returns a namespace stack with default items in it.",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespacestack"}}],[11,"push_empty","","Adds an empty namespace to the top of this stack.",10,{"inputs":[{"name":"namespacestack"}],"output":null}],[11,"pop","","Removes a namespace at the top of the stack.",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespace"}}],[11,"peek","","Returns a namespace at the top of the stack, leaving the stack intact.",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespace"}}],[11,"put","","Puts a mapping into the topmost namespace in this stack.",10,{"inputs":[{"name":"namespacestack"},{"name":"option"},{"name":"string"}],"output":{"name":"bool"}}],[11,"get","","Performs a search for the given prefix in the whole stack.",10,{"inputs":[{"name":"namespacestack"},{"name":"option"}],"output":{"name":"option"}}],[11,"squash","","Combines this stack of namespaces into a single namespace.",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespace"}}],[6,"Item","","",null,null],[11,"next","","",11,{"inputs":[{"name":"namespacestackmappings"}],"output":{"name":"option"}}],[6,"Iter","","",null,null],[11,"uri_mappings","","",10,{"inputs":[{"name":"namespacestack"}],"output":{"name":"namespacestackmappings"}}],[0,"reader","xml","Contains high-level interface for a pull-based XML parser.",null,null],[3,"EventReader","xml::reader","Simple wrapper around an `std::io::BufReader` which provides pull-based XML parsing.",null,null],[3,"Events","","XML events iterator, created by `events()` method on `Parser`.",null,null],[0,"config","","Contains parser configuration structure.",null,null],[3,"ParserConfig","xml::reader::config","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace be removed. Default is false.",12,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",12,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",12,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",12,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",12,null],[11,"new","","Returns a new config with default values.",12,{"inputs":[{"name":"parserconfig"}],"output":{"name":"parserconfig"}}],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",12,{"inputs":[{"name":"parserconfig"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",12,{"inputs":[{"name":"parserconfig"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",12,{"inputs":[{"name":"parserconfig"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",12,{"inputs":[{"name":"parserconfig"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",12,{"inputs":[{"name":"parserconfig"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[0,"events","xml::reader","Contains `XmlEvent` datatype, instances of which are emitted by the parser.",null,null],[4,"XmlEvent","xml::reader::events","An element of an XML input stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",13,null],[12,"version","xml::reader::events::XmlEvent","XML version.",13,null],[12,"encoding","","XML document encoding.",13,null],[12,"standalone","","XML standalone declaration.",13,null],[13,"EndDocument","xml::reader::events","Denotes to the end of the document stream.",13,null],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",13,null],[12,"name","xml::reader::events::XmlEvent","Processing instruction target.",13,null],[12,"data","","Processing instruction content.",13,null],[13,"StartElement","xml::reader::events","Denotes a beginning of an XML element.",13,null],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13,null],[12,"attributes","","A list of attributes associated with the element.",13,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",13,null],[13,"EndElement","xml::reader::events","Denotes an end of an XML document.",13,null],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13,null],[13,"CData","xml::reader::events","Denotes CDATA content.",13,null],[13,"Comment","","Denotes a comment.",13,null],[13,"Characters","","Denotes character data outside of tags.",13,null],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",13,null],[13,"Error","","Denotes parsing error.",13,null],[11,"clone","","",13,{"inputs":[{"name":"xmlevent"}],"output":{"name":"xmlevent"}}],[11,"eq","","",13,{"inputs":[{"name":"xmlevent"},{"name":"xmlevent"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"xmlevent"},{"name":"xmlevent"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"xmlevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_writer_event","","",13,{"inputs":[{"name":"xmlevent"}],"output":{"name":"option"}}],[11,"new","xml::reader","Creates a new parser, consuming given stream.",14,{"inputs":[{"name":"eventreader"},{"name":"b"}],"output":{"name":"eventreader"}}],[11,"with_config","","Creates a new parser with the provded configuration, consuming given `Buffer`.",14,{"inputs":[{"name":"eventreader"},{"name":"b"},{"name":"parserconfig"}],"output":{"name":"eventreader"}}],[11,"next","","Pulls and returns next XML event from the stream.",14,{"inputs":[{"name":"eventreader"}],"output":{"name":"xmlevent"}}],[11,"events","","Returns an iterator over XML events.",14,{"inputs":[{"name":"eventreader"}],"output":{"name":"events"}}],[6,"Item","","",null,null],[11,"next","","",15,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[11,"from_str","","Convenience method to create a reader from a string slice.",14,{"inputs":[{"name":"eventreader"},{"name":"str"}],"output":{"name":"eventreader"}}],[0,"writer","xml","",null,null],[3,"EventWriter","xml::writer","",null,null],[0,"config","","Contains emitter configuration structure.",null,null],[3,"EmitterConfig","xml::writer::config","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",16,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\"  \"`\n(two spaces).",16,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",16,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",16,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",16,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",16,null],[11,"new","","Creates an emitter configuration with default values.",16,{"inputs":[{"name":"emitterconfig"}],"output":{"name":"emitterconfig"}}],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",16,{"inputs":[{"name":"emitterconfig"},{"name":"string"}],"output":{"name":"emitterconfig"}}],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",16,{"inputs":[{"name":"emitterconfig"},{"name":"string"}],"output":{"name":"emitterconfig"}}],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",16,{"inputs":[{"name":"emitterconfig"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",16,{"inputs":[{"name":"emitterconfig"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",16,{"inputs":[{"name":"emitterconfig"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",16,{"inputs":[{"name":"emitterconfig"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[0,"events","xml::writer","",null,null],[4,"XmlEvent","xml::writer::events","An element of an XML output stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",17,null],[12,"version","xml::writer::events::XmlEvent","XML version.",17,null],[12,"encoding","","XML document encoding.",17,null],[12,"standalone","","XML standalone declaration.",17,null],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",17,null],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",17,null],[12,"data","","Processing instruction content.",17,null],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",17,null],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17,null],[12,"attributes","","A list of attributes associated with the element.",17,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",17,null],[13,"EndElement","xml::writer::events","Denotes an end of an XML document.",17,null],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17,null],[13,"CData","xml::writer::events","Denotes CDATA content.",17,null],[13,"Comment","","Denotes a comment.",17,null],[13,"Characters","","Denotes character data outside of tags.",17,null],[6,"EventWriterResult","xml::writer","",null,null],[11,"new","","",18,{"inputs":[{"name":"eventwriter"},{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"new_with_config","","",18,{"inputs":[{"name":"eventwriter"},{"name":"w"},{"name":"emitterconfig"}],"output":{"name":"eventwriter"}}],[11,"write","","",18,{"inputs":[{"name":"eventwriter"},{"name":"xmlevent"}],"output":{"name":"eventwriterresult"}}],[11,"new_into_mem","","",18,{"inputs":[{"name":"eventwriter"},{"name":"vec"}],"output":{"name":"eventwriter"}}],[11,"new_into_mem_config","","",18,{"inputs":[{"name":"eventwriter"},{"name":"vec"},{"name":"emitterconfig"}],"output":{"name":"eventwriter"}}],[0,"util","xml","",null,null],[3,"ClonedPairwise","xml::util","",null,null],[8,"OptionBorrowExt","","",null,null],[10,"borrow_internals","","",19,{"inputs":[{"name":"optionborrowext"}],"output":{"name":"option"}}],[8,"IteratorClonedPairwiseExt","","",null,null],[10,"cloned_pairwise","","",20,{"inputs":[{"name":"iteratorclonedpairwiseext"}],"output":{"name":"clonedpairwise"}}],[11,"borrow_internals","core::option","",21,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[6,"Item","xml::util","",null,null],[11,"next","","",22,{"inputs":[{"name":"clonedpairwise"}],"output":{"name":"option"}}]],"paths":[[3,"Name"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[4,"XmlVersion"],[8,"HasPosition"],[3,"Error"],[8,"NamespaceIterable"],[3,"Namespace"],[3,"NamespaceMappings"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"ParserConfig"],[4,"XmlEvent"],[3,"EventReader"],[3,"Events"],[3,"EmitterConfig"],[4,"XmlEvent"],[3,"EventWriter"],[8,"OptionBorrowExt"],[8,"IteratorClonedPairwiseExt"],[4,"Option"],[3,"ClonedPairwise"]]};
searchIndex['gl_common'] = {"items":[[0,"","gl_common","Defines everything used by `gl_generator`.",null,null],[8,"GlFunctionsSource","","",null,null],[10,"get_proc_addr","","",0,null]],"paths":[[8,"GlFunctionsSource"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Trace` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};
searchIndex['khronos_api'] = {"items":[[0,"","khronos_api","This crates contains the sources of the official OpenGL repository.",null,null],[7,"GL_XML","","Content of the official `gl.xml` file.",null,null],[7,"EGL_XML","","Content of the official `egl.xml` file.",null,null],[7,"WGL_XML","","Content of the official `wgl.xml` file.",null,null],[7,"GLX_XML","","Content of the official `glx.xml` file.",null,null]],"paths":[]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",19,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",17,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"ControlCharacterInString","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"encodererror"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","rustc_serialize::Decoder","",null,null],[10,"read_nil","rustc_serialize","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","rustc_serialize::Encoder","",null,null],[10,"emit_nil","rustc_serialize","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['lazy_static'] = {"items":[[0,"","lazy_static","A macro for declaring lazily evaluated statics.",null,null],[14,"lazy_static!","","",null,null]],"paths":[]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
initSearch(searchIndex);
